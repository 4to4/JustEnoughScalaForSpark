{
  "metadata" : {
    "name" : "Just Enough Scala for Spark",
    "user_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : {
      "id" : "DB7A35849BCB4167802DB59D5CA868E8"
    },
    "cell_type" : "markdown",
    "source" : "# Just Enough Scala for Spark\n\n[Dean Wampler, Ph.D.](mailto:deanwampler@gmail.com)<br/>\n[@deanwampler](http://twitter.com/deanwampler)\n\nWelcome. This notebook teaches you the core concepts of [Scala](http://scala-lang.org) necessary to use [Apache Spark's](http://spark.apache.org) Scala API effectively. Spark does a nice job exploiting the nicest features of Scala, while avoiding most of the more difficult and obscure features. "
  }, {
    "metadata" : {
      "id" : "FEB41A56E21F408A966052A75B819C8E"
    },
    "cell_type" : "markdown",
    "source" : "## Introduction: Why Scala?\nSpark lets you use Scala, Java, Python, R, and SQL to do your work. Scala and Java appeal to _data engineers_, who do the heavy lifting of building resilient and scalable infrastructures for _Big Data_. Python, R, and SQL appeal to _data scientists_, who build models for analyzing data, including machine learning, as well as explore data interactively, where SQL is very convenient.\n\nThese aren't hard boundaries. Many people do both roles. Many data engineers like Python and may use SQL and R. Many data scientists have decided to use Scala with Spark.\n\nBriefly, some of the advantages of using Scala include the following:\n* **Performance:** Since Spark is written in Scala, when you use the [RDD](http://spark.apache.org/docs/latest/programming-guide.html#resilient-distributed-datasets-rdds) API, you get the best performance and the most complete API coverage when you use Scala. It's true that with [DataFrames](http://spark.apache.org/docs/latest/sql-programming-guide.html), code written in all five languages performs about the same.\n* **Debugging:** When runtime problems occur, understanding the exception stack trace and other debug information is easiest if you know Scala. Unfortunately, the abstractions provided by the different language APIs \"leak\" when problems occur.\n* **Concise, Expressive Code:** Compared to Java, Scala code is much more concise and several features of Scala make your code even more concise. This elevates your productivity and makes it easier to imagine a design approach and then write it down without having to translate the idea to a less flexible API that reflects idiomatic language constraints. (You'll see this in action as we go.)\n* **Type Safety:** Compared to Python and R, Scala code benefits from _static typing_ with _type inference_. _Static typing_ means that the Scala parser finds more errors in your expressions at compile time, when they don't match expected types, rather than discovering the problem later at run time. However, _type inference_ means you don't have to add a lot of explicit type information to you code. In most cases, Scala will infer the correct types for you."
  }, {
    "metadata" : {
      "id" : "643793D69BF84D788D14E50DBE1CED14"
    },
    "cell_type" : "markdown",
    "source" : "### Why Not Scala?\nScala isn't perfect. There are two disadvantages compared to Python and R:\n* **Libraries:** Python and R have a rich ecosystem of data analytics libraries. While the picture is improving for Scala, Python and R are still well ahead.\n* **Advanced Language Features:** Mastering advanced language features gives you a lot of power to exploit, but if you don't understand those features, they can get in your way when you're just trying to get work done. Scala has some sophisticated constructs, especially in its _type system_. Fortunately, Spark mostly hides the advanced constructs."
  }, {
    "metadata" : {
      "id" : "1D3A90B8EB19432E9D569E0BDF099FA8"
    },
    "cell_type" : "markdown",
    "source" : "### For More on Scala\nI can only scratch the surface of Scala here. We'll \"sketch\" concepts without too much depth. You'll learn enough to make use of them, but eventually you'll want to deepen your understanding.\n\nWhen you need more information, consider these resources:\n\n* [Programming Scala, Second Edition](http://shop.oreilly.com/product/0636920033073.do): My comprehensive introduction to Scala.\n* [Scala Language Website](http://scala-lang.org/): Where to download Scala, find documentation (e.g., the [Scaladocs](http://www.scala-lang.org/api/current/#package): Scala library documentation, like [Javadocs](https://docs.oracle.com/javase/8/docs/api/)), and other information.\n* [Lightbend](http://www.lightbend.com/services/) training, consulting, and support for Scala, Big Data tools like Spark, and the [Lightbend Reactive Platform](http://www.lightbend.com/products/lightbend-reactive-platform).\n\nFor now, I recommend that you open the Scaladocs for Scala and for Spark's Scala API. Clicking these two links will open them in new browser tabs:\n* Scaladocs for <a href=\"http://www.scala-lang.org/api/2.11.8/#package\" target=\"scala_scaladocs\">Scala</a>.\n* Scaladocs for <a href=\"http://spark.apache.org/docs/latest/api/scala/index.html#package\" target=\"spark_scaladocs\">Spark</a>."
  }, {
    "metadata" : {
      "id" : "09039ABE472F4B09AA5969B8FAA7E2BD"
    },
    "cell_type" : "markdown",
    "source" : "> **Tips for using Scaladocs:**\n* Use the search bar in the upper-left-hand side to find a particular _type_. (For example, try \"RDD\" in the Spark Scaladocs.) \n* To search for a particular _method_, click the character under the search box for the method name's first letter, then scroll to it."
  }, {
    "metadata" : {
      "id" : "40AA3A2B596F44CBB4955A0F282E6D28"
    },
    "cell_type" : "markdown",
    "source" : "## About Notebooks\nYou're using the [Spark Notebook](http://spark-notebook.io/) environment, a Scala-centric fork of [iPython](https://ipython.org/) configured for [Apache Spark](http://spark.apache.org).\n\nNotebooks let you mix documentation, like this [Markdown](https://daringfireball.net/projects/markdown/) \"cell\", with cells that contain code, graphs of results, etc. The metaphor is a physical notebook a scientist or student might use while working in a laboratory.\n\nThe menus and toolbar at the top provide options for evaluating a cell, adding and deleting cells, etc. You'll want to learn keyboard shortcuts if you use notebooks a lot."
  }, {
    "metadata" : {
      "id" : "5A1E9EC40F5A423A8C42B542CD7D6378"
    },
    "cell_type" : "markdown",
    "source" : "> **Tips:**\n\n> Invoke the _Help > Keyboard Shortcuts_ menu item, then capture the page as an image (it's a modal dialog, unfortunately). Learn a few shortcuts each day.\n\n> For now, just know that you can click into any cell to move the focus. When you're in a cell, `shift+enter` evaluates the cell (parses and renders the Markdown or runs the code), then moves to the next cell. Try it for a few cells. I'll wait...\n\n> Finally, there is a right-hand sidebar with useful information. If you want to view or hide the sidebar, use the _View > Toggle sidebar_ menu item. In the sidebar you'll see a link _open SparkUI_ to see Spark's own web UI. Use it to see more information about what your Spark jobs are doing."
  }, {
    "metadata" : {
      "id" : "1085BD83DF844ADC87E5E73DC4F419B6"
    },
    "cell_type" : "markdown",
    "source" : "Okay. It's particularly nice that you can edit a cell you've already evaluated and rerun it. This is great when you're experimenting with code."
  }, {
    "metadata" : {
      "id" : "25BC8DA67F874D09836EE3400D876755"
    },
    "cell_type" : "markdown",
    "source" : "When you start this notebook, Spark Notebook creates a [SparkContext](http://spark.apache.org/docs/latest/programming-guide.html#initializing-spark) for you. This is the entry point of any Spark application. It knows how to connect to your cluster (or run locally in the same JVM), how to configure properties, etc. It also runs a Web UI that lets you monitor your running jobs. The instance of `SparkContext` is called `sc`. The next cell simply confirms that it exists. (The next cell is also our first `code` cell.)"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "EE12AC334C4F4DEA957BDC14070B3468"
    },
    "cell_type" : "code",
    "source" : "sc",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res1: org.apache.spark.SparkContext = org.apache.spark.SparkContext@191a367e\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "org.apache.spark.SparkContext@191a367e"
      },
      "output_type" : "execute_result",
      "execution_count" : 1,
      "time" : "Took: 2 seconds 847 milliseconds, at 2016-12-1 16:43"
    } ]
  }, {
    "metadata" : {
      "id" : "8C9131CF1E354A2CB9103CA66C6470E9"
    },
    "cell_type" : "markdown",
    "source" : "Here are few other bits of information we can get from the `SparkContext`:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "02BE99E15B5245FBB07CE38840FC7DB4"
    },
    "cell_type" : "code",
    "source" : "println(\"Spark version:      \" + sc.version)\nprintln(\"Spark master:       \" + sc.master)\nprintln(\"Running 'locally'?: \" + sc.isLocal)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Spark version:      2.0.2\nSpark master:       local[*]\nRunning 'locally'?: true\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 3,
      "time" : "Took: 2 seconds 866 milliseconds, at 2016-12-1 16:44"
    } ]
  }, {
    "metadata" : {
      "id" : "06B794609083404EB53553A5C98FF1E5"
    },
    "cell_type" : "markdown",
    "source" : "## Let's Download Some Data (and Start Learning Scala)\nWe're going to write real Spark programs and use them as vehicles for learning Scala and how to use it with Spark.\n\nBut first, we need to download some text files we'll use, which contain some of the plays of Shakespeare. The next few cells define some helper methods (functions) to do this and then perform the download. We'll start learning Scala concepts as we go."
  }, {
    "metadata" : {
      "id" : "D43407B76FEB47138B4C172B8686399A"
    },
    "cell_type" : "markdown",
    "source" : "> **Note:** \"method\" vs. \"function\"\n\n> Scala follows a common object-oriented convention where the term _method_ is used for a function that's attached to a class or instance. Unlike Java, at least before Java 8, Scala also has _functions_ that are not associated with a particular class or instance. \n\n> In our next code example, we'll define a few helper _methods_ for printing information, but you won't see a class definition here. So, what class is associated with these methods? When you use Scala in a notebook, you're actually using the Scala interpreter, which wraps any expressions and definitions we write into a hidden, generated class. The interpreter has to do this in order to generate valid JVM byte code. \n\n> Unfortunately, it can be a bit confusing when to use a method vs. a function, reflecting Scala's hybrid nature as an object-oriented and a functional language. Fortunately, in many cases, we can use methods and functions interchangably, so we won't worry about the distinction too much from now on.\n\n> We're defining methods now. We'll see what a real _function_ looks like soon."
  }, {
    "metadata" : {
      "id" : "9EB0F4904E62411ABB4732FCE434F3E2"
    },
    "cell_type" : "markdown",
    "source" : "Okay, here are two convenience methods for printing either an error message or a simple \"information\" message. We'll explain the syntax in a subsequent cell below."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "CEDDE3DA00584FD091761BB897BA76B8"
    },
    "cell_type" : "code",
    "source" : "/*\n * \"info\" takes a single String argument, prints it on a line,\n * and returns it. \n */\ndef info(message: String): String = {\n    println(message)\n\n    // The last expression in the block, message, is the return value. \n    // \"return\" keyword not required.\n    // Do no additional formatting for the return string.\n    message  // No additional formatting\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "info: (message: String)String\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 4,
      "time" : "Took: 1 second 286 milliseconds, at 2016-12-1 16:47"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "10CDCBBDF9B0414381D29AA57001B4FE"
    },
    "cell_type" : "code",
    "source" : "/*\n * \"error\" takes a single String argument, prints a formatted error message,\n * and returns the message. \n */\ndef error(message: String): String = {   \n    \n    // Print the string passed to \"println\" and add a linefeed (\"ln\"):\n    // See the next cell for an explanation of how the string is constructed.\n    val fullMessage = s\"\"\"\n        |********************************************************************\n        |\n        |  ERROR: $message\n        |\n        |********************************************************************\n        |\"\"\".stripMargin\n    println(fullMessage)\n    \n    fullMessage\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "error: (message: String)String\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 5,
      "time" : "Took: 1 second 528 milliseconds, at 2016-12-1 16:47"
    } ]
  }, {
    "metadata" : {
      "id" : "803A3B24EDA44D8E8D0387961CED80C0"
    },
    "cell_type" : "markdown",
    "source" : "Let's try them:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "094980E7109040EA916AFE8EAA902C35"
    },
    "cell_type" : "code",
    "source" : "val infoString = info(\"All is well.\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "All is well.\ninfoString: String = All is well.\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 6,
      "time" : "Took: 1 second 427 milliseconds, at 2016-12-1 16:47"
    } ]
  }, {
    "metadata" : {
      "id" : "529BE6FCDA584E0A8C3D21579C3FCBE6"
    },
    "cell_type" : "markdown",
    "source" : "Why is the string shown twice? The first string is the output of `println`. The second string is the value returned from `info` and assigned to the immutable value (`val` keyword) named `infoString`. Note that if you didn't know what type of object was returned by `info`, Spark Notebook is showing you the type here, using the Scala syntax, `name: Type`.\n\nCheck out the right-hand side bar, too. It shows the values we've defined so far and their types. Note how the signatures of our two methods are written."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "AAF85354A9654E22A53B00546A0CAA29"
    },
    "cell_type" : "code",
    "source" : "val errorString = error(\"Uh oh!\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "\n********************************************************************\n\n  ERROR: Uh oh!\n\n********************************************************************\n\nerrorString: String =\n\"\n********************************************************************\n\n  ERROR: Uh oh!\n\n********************************************************************\n\"\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 8,
      "time" : "Took: 1 second 436 milliseconds, at 2016-12-1 16:50"
    } ]
  }, {
    "metadata" : {
      "id" : "57CAB7BAD29C4C938AF2ADBE21B14170"
    },
    "cell_type" : "markdown",
    "source" : "We see the same multiline string twice for the same reason. If you have defined a variable previously in the notebook, you can see its value (actually, the result of calling `toString` on the value), by putting it in a cell by itself."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "DA14FE765E6C4E5B848876DC5FB95DBC"
    },
    "cell_type" : "code",
    "source" : "errorString",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res12: String =\n\"\n********************************************************************\n\n  ERROR: Uh oh!\n\n********************************************************************\n\"\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "\n********************************************************************\n\n  ERROR: Uh oh!\n\n********************************************************************\n"
      },
      "output_type" : "execute_result",
      "execution_count" : 9,
      "time" : "Took: 1 second 624 milliseconds, at 2016-12-1 16:51"
    } ]
  }, {
    "metadata" : {
      "id" : "5CBE146ACD0B4212AB27E476DB571F7E"
    },
    "cell_type" : "markdown",
    "source" : "Returning to the details of method definitions, we have the following elements, in order:\n* The `def` keyword.\n* The method's name (`error` and `info` here).\n* The argument list in parentheses. If there are no arguments, the empty parentheses can be omitted. This is common for `toString` and \"getter\"-like methods that simply return a field in an instance, etc.\n* A colon followed by the type of the value returned by the method. This can often be inferred by Scala, so it's optional, but recommended for readibility by users!\n* An `=` (equals) sign that separates the method _signature_ from the _body_.\n* The body in braces `{ ... }`, although if the body consists of a single expression, the braces are optional.\n* The last expression in the body is used as the return value. The `return` keyword is optional and rarely used.\n* Semicolons (`;`) are inferred at the end of lines (in most cases) and rarely used."
  }, {
    "metadata" : {
      "id" : "CD393F164BDA4FA883DC4B8A5D00AE09"
    },
    "cell_type" : "markdown",
    "source" : "Look at the argument list for `error`. It is `(message: String)`, where `message` is the argument name and its type is `String`. This convention for _type annotations_, `name: Type`, is also used for the return type, `error(...): String`. Type annotations are required by Scala for method arguments. They are optional in most cases for the return type. We'll see that Scala can infer the types of many expressions and variable declarations.\n\nScala uses the same comment conventions as Java, `// ...` for a single line, and `/* ... */` for a comment block."
  }, {
    "metadata" : {
      "id" : "5755E06B4F334463BB852AD280667B3B"
    },
    "cell_type" : "markdown",
    "source" : "> **Note:** Expression vs. Statement\n\n> An _expression_ has a value, while a _statement_ does not. Hence, when we assign an expression to a variable, the value the expression returns is assigned to the variable."
  }, {
    "metadata" : {
      "id" : "2F67CEA53FCC4CD78E60C8471C77C032"
    },
    "cell_type" : "markdown",
    "source" : "Inside `error`, we used a combination _interpolated_ and _triple-quoted_ string with the syntax `s\"\"\"...\"\"\"`:\n* **Triple-quoted string:** `\"\"\"...\"\"\"`. Useful for embedding newlines, like we did inside `error`. (We'll see another benefit later.)\n* **String interpolation:** Invoked by putting `s` before the string, e.g., `s\"...\"` or `s\"\"\"...\"\"\"`. Lets us embed variable references and expressions, where the string conversion will be inserted automatically. For example: "
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "AFF78A0F505845BE88A3559B7958B24A"
    },
    "cell_type" : "code",
    "source" : "s\"\"\"Use braces for expressions: ${sc.version}.\nYou can omit the braces when just using a variable: $sc\nHowever, watch for ambiguities like ${sc}andextrastuff\"\"\"",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res16: String =\nUse braces for expressions: 2.0.2.\nYou can omit the braces when just using a variable: org.apache.spark.SparkContext@191a367e\nHowever, watch for ambiguities like org.apache.spark.SparkContext@191a367eandextrastuff\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "Use braces for expressions: 2.0.2.\nYou can omit the braces when just using a variable: org.apache.spark.SparkContext@191a367e\nHowever, watch for ambiguities like org.apache.spark.SparkContext@191a367eandextrastuff"
      },
      "output_type" : "execute_result",
      "execution_count" : 11,
      "time" : "Took: 1 second 624 milliseconds, at 2016-12-1 16:55"
    } ]
  }, {
    "metadata" : {
      "id" : "60FFAE1216ED45A480E3C68682B432DC"
    },
    "cell_type" : "markdown",
    "source" : "Another feature we're using for triple-quoted strings is the ability to strip the leading whitespace off each line. The `stripMargin` method removes all whitespace before and including the `|`. This lets you indent those lines for proper code formatting (i.e., indentation), but not have that whitespace remain in the string. In the following example, the resulting string has blank lines at the beginning and end. Note what happens with whitespace before `line2`:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "F85886E75E5A47C9861E3F65A8EB4267"
    },
    "cell_type" : "code",
    "source" : "s\"\"\"\n    |line 1\n    |  line 2\n    |\"\"\".stripMargin",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res18: String =\n\"\nline 1\n  line 2\n\"\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "\nline 1\n  line 2\n"
      },
      "output_type" : "execute_result",
      "execution_count" : 12,
      "time" : "Took: 2 seconds 103 milliseconds, at 2016-12-1 16:56"
    } ]
  }, {
    "metadata" : {
      "id" : "2D7671C27CAB4A678AB8F0DF595BF4F4"
    },
    "cell_type" : "markdown",
    "source" : "> **Note:**\n\n> Character \"literals\" are specified single quotes, '/', while strings use double quotes, \"/\"."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "7E816DA2EE374A858D48A7CA8DB629C1"
    },
    "cell_type" : "code",
    "source" : "'/'",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res20: Char = /\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "/"
      },
      "output_type" : "execute_result",
      "execution_count" : 13,
      "time" : "Took: 1 second 869 milliseconds, at 2016-12-1 16:56"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "DE8F13B8E30D4EDF86972B678C67FF04"
    },
    "cell_type" : "code",
    "source" : "\"/\"",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res22: String = /\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "/"
      },
      "output_type" : "execute_result",
      "execution_count" : 14,
      "time" : "Took: 1 second 765 milliseconds, at 2016-12-1 16:56"
    } ]
  }, {
    "metadata" : {
      "id" : "5D406BE17F12428081AD53D22E347148"
    },
    "cell_type" : "markdown",
    "source" : "### Mutable Variables vs. Immutable Values\nSee how how to declare an immutable value before with `val`. Let's explore this a bit more:\n* `val immutableValue = ...`: Once initialized, we can't assign a _different_ value to `immutableValue`.\n* `var mutableVariable = ...`: We can assign new values to `mutableVariable` as often as we want.\n\nIt's _highly recommended_ that you only use `vals` unless you have a good reason for needing mutability, which is a very common source of bugs!!\n\n> A `val immutableValue` could point to an instance that itself _is_ mutable, e.g., an [Array](http://www.scala-lang.org/api/current/#scala.Array). In this case, while we can't assign a new array to `immutableValue`, we can change elements within the array! Put another way, immutability isn't _transitive_."
  }, {
    "metadata" : {
      "id" : "7CDC26D8E6E145579F07A2A577B264AA"
    },
    "cell_type" : "markdown",
    "source" : "### Download the Files\nNow let's define a method that works like the popularity \\*NIX [curl](http://linux.die.net/man/1/curl) utility. It's a bit long and you don't need to understand all the details, but we'll use it to download data we need for the notebook."
  }, {
    "metadata" : {
      "id" : "5956F2A6A32C4782844AE7E53A982575"
    },
    "cell_type" : "markdown",
    "source" : "Most of the types used here are from Java's library (JDK). Because Scala compiles to JVM byte code, you can use any Java library you want from Scala:\n* [java.net.URL](https://docs.oracle.com/javase/8/docs/api/java/net/URL.html): Handles URL formatting and connections.\n* [java.io.File](https://docs.oracle.com/javase/8/docs/api/java/io/File.html): Working with files and directories.\n* [java.io.BufferedInputStream](https://docs.oracle.com/javase/8/docs/api/java/io/BufferedInputStream.html): Buffered input from an underlying stream.\n* [java.io.BufferedOutputStream](https://docs.oracle.com/javase/8/docs/api/java/io/BufferedOutputStream.html): Buffered output to an underlying stream.\n* [java.io.FileOutputStream](https://docs.oracle.com/javase/8/docs/api/java/io/FileOutputStream.html): Output to a file, specifically.\n\nAs before, we'll use comments to explain a few other new Scala constructs. "
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1CD9CBDB4CE540AE8C0CACD1106377A6"
    },
    "cell_type" : "code",
    "source" : "// Import this utility for working with URLs. Unlike Java the semicolon ';' is not required.\nimport java.net.URL   \n\n// Use {...} to provide a list of things to import, when you don't want to import everything \n// in a package and you don't want to write a separate line for each type.\nimport java.io.{File, BufferedInputStream, BufferedOutputStream, FileOutputStream}\n\n/**\n * Download a file at a URL and write it to a target directory.\n */\ndef curl(sourceURLString: String, targetDirectoryString: String): File = {\n\n    // The path separator on your platform: \"/\" on Linux and MacOS, \"\\\" on Windows.\n    val pathSeparator = File.separator\n\n    // Use the name of the remote file as the file name in the target directory.\n    // We split on the URL path elements using the separator, which is ALWAYS \"/\"\n    // on all platforms.\n    val sourceFileName = sourceURLString.split(\"/\").last  \n    val outFileName = targetDirectoryString + pathSeparator + sourceFileName\n\n    // Set up a connection and buffered input stream for the source file.\n    println(s\"Downloading $sourceURLString to $outFileName\")\n    val sourceURL = new URL(sourceURLString)\n    val connection = sourceURL.openConnection()\n    val in = new BufferedInputStream(connection.getInputStream())\n\n    // If here, the connection was successfully opened (i.e., no exceptions thrown).\n    // Now create the target directory (nothing happens if it already exists).\n    val targetDirectory = new File(targetDirectoryString)\n    targetDirectory.mkdirs()\n\n    // Setup the output file and a stream to write to it.\n    val outFile = new File(outFileName)\n    val out = new BufferedOutputStream(new FileOutputStream(outFile))\n    \n    // Create a buffer to hold the in-flight bytes.\n    val hundredK = 100*1024\n    val bytes = Array.fill[Byte](hundredK)(0)   // Create byte buffer, elements set to 0\n                                                // Array elements are _mutable_.\n    // Loop until we've read everything.\n    var loops = 0                               // A counter for progress feedback.\n    var count = in.read(bytes, 0, hundredK)     // Read up to \"hundredK\" bytes at a time.\n    while (count != -1) {                       // Haven't hit the end of input yet?\n        if (loops % 10 == 0) print(\".\")         // Print occasional feedback.\n        loops += 1                              // increment the counter.\n        out.write(bytes, 0, count)              // Write to the new file.\n        count = in.read(bytes, 0, hundredK)     // Read the next chunk and loop...\n    }\n    println(\"\\nFinished!\")\n    in.close()                                  // Clean up! Close file & stream handles\n    out.flush()\n    out.close()\n    outFile                                     // Returned file (if we got this far)\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import java.net.URL\nimport java.io.{File, BufferedInputStream, BufferedOutputStream, FileOutputStream}\ncurl: (sourceURLString: String, targetDirectoryString: String)java.io.File\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 15,
      "time" : "Took: 1 second 392 milliseconds, at 2016-12-1 16:57"
    } ]
  }, {
    "metadata" : {
      "id" : "9CDE2B4DECD04454B032AB2965658AC3"
    },
    "cell_type" : "markdown",
    "source" : "Okay, before we actually use `curl`, let's create the target directory. (This is also done in `curl`, but we're using the success or failure for other purposes here.) "
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "2694A3E4B4FF44F683842A9AB7742C89"
    },
    "cell_type" : "code",
    "source" : "// The target directory, which we'll now create, if necessary.\nval shakespeare = new File(\"data/shakespeare\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "shakespeare: java.io.File = data/shakespeare\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 16,
      "time" : "Took: 1 second 225 milliseconds, at 2016-12-1 16:58"
    } ]
  }, {
    "metadata" : {
      "id" : "2C4EA916B7974EAE8863CDB8D78251B7"
    },
    "cell_type" : "markdown",
    "source" : "Scala's `if` construct is actually an expression (in Java they are _statements_). The `if` expression will return `true` or `false` and assign it to `success`, which we'll use in a moment."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "CFADB7E042BC4F59837EA8CBCE16CDB2"
    },
    "cell_type" : "code",
    "source" : "val success = if (shakespeare.exists == false) {   // doesn't exist already?\n    if (shakespeare.mkdirs() == false) {           // did the attempt fail??\n        error(s\"Failed to create directory path: $shakespeare\")  // ignore returned string\n        false\n    } else {                                       // successful\n        info(s\"Created $shakespeare\")\n        true\n    }\n} else {\n    info(s\"$shakespeare already exists\")\n    true\n}\nprintln(\"success = \" + success)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "data/shakespeare already exists\nsuccess = true\nsuccess: Boolean = true\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 18,
      "time" : "Took: 1 second 568 milliseconds, at 2016-12-1 16:59"
    } ]
  }, {
    "metadata" : {
      "id" : "015D2C9460EC4C619EEDE8AF53019887"
    },
    "cell_type" : "markdown",
    "source" : "If we successfully created the output directory (or it already existed), let's download a handful of files, each with one play of Shakespeare, from [http://www.cs.usyd.edu.au/~matty/Shakespeare/](http://www.cs.usyd.edu.au/~matty/Shakespeare/)."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "FD299F503F6E45128FB1243B1E4C5025"
    },
    "cell_type" : "code",
    "source" : "val pathSeparator = File.separator\nval targetDirName = shakespeare.toString\nval urlRoot = \"http://www.cs.usyd.edu.au/~matty/Shakespeare/texts/comedies/\"\nval plays = Seq(\n    \"tamingoftheshrew\", \"comedyoferrors\", \"loveslabourslost\", \"midsummersnightsdream\",\n    \"merrywivesofwindsor\", \"muchadoaboutnothing\", \"asyoulikeit\", \"twelfthnight\")\n\nif (success) {\n    println(s\"Downloading plays from $urlRoot.\")\n    val successes = for {\n        play <- plays\n        playFileName = targetDirName + pathSeparator + play\n        playFile = new File(playFileName)\n        if (playFile.exists == false)\n        file = curl(urlRoot + play, targetDirName)\n    } yield {\n        info(s\"Downloaded $play and wrote $file\")\n        s\"$playFileName:\\tSuccess!\"\n    }\n  \n    println(\"Finished!\")\n  \n    successes.foreach(println)\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Downloading plays from http://www.cs.usyd.edu.au/~matty/Shakespeare/texts/comedies/.\nFinished!\npathSeparator: String = /\ntargetDirName: String = data/shakespeare\nurlRoot: String = http://www.cs.usyd.edu.au/~matty/Shakespeare/texts/comedies/\nplays: Seq[String] = List(tamingoftheshrew, comedyoferrors, loveslabourslost, midsummersnightsdream, merrywivesofwindsor, muchadoaboutnothing, asyoulikeit, twelfthnight)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 20,
      "time" : "Took: 1 second 623 milliseconds, at 2016-12-1 17:2"
    } ]
  }, {
    "metadata" : {
      "id" : "8D9C6981C7CE4E79BAC96837D15A4EC8"
    },
    "cell_type" : "markdown",
    "source" : "I'm using a so-called `for` _comprehension_. They are _expressions_, not _statements_ like Java's `for` loops. They have the form:\n\n```\nfor {\n  play <- plays\n  ...\n} yield { block_of_final_expressions }\n```\n\nWe iterate through a collection, `plays`, and assign each one to the `play` variable (actually an immutable value for each pass through the loop). \n\nAfter assigning to `play`, subsequent steps in the `for` comprehension use it. First, a [java.io.File](https://docs.oracle.com/javase/8/docs/api/java/io/File.html) instance, `playFile`, is created. Then, `playFile` is used to evaluate a conditional - does the file already exist (i.e., have we already downloaded this file)?\n\nIf the file already exists, the conditional returns `false`, which short-circuits the loop and goes to the next `play` in the list. If the file doesn't exit, the final expression uses `curl` to download it.\n\nThe `yield` keyword tells Scala that I want to construct a new collection, using the expression that follows to construct each element, an _interpolated_ string."
  }, {
    "metadata" : {
      "id" : "3294471AEA464DED856AAD4DEC34DDB3"
    },
    "cell_type" : "markdown",
    "source" : "## Passing Functions as Arguments\nNote how we printed the returned `successes` collection of strings. The idiom `collection.foreach(println)` is handy for looping over the elements and printing them, one per line. But how exactly does this work? (We'll use `plays` instead of `successes`, because the latter will be empty if you run that code twice, since the files will already be downloaded.)"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9B3811BAC9194A7AA30DDB65678F075A"
    },
    "cell_type" : "code",
    "source" : "println(\"Pass println as the function to use for each element:\")\nplays.foreach(println)\n\nprintln(\"\\nUsing an anonymous function that calls println: `str => println(str)`\")\nprintln(\"(Note that the type of the argument `str` is inferred to be String.)\")\nplays.foreach(str => println(str))\n\nprintln(\"\\nAdding the argument type explicitly. Note that the parentheses are required.\")\nplays.foreach((str: String) => println(str))\n\nprintln(\"\\nWhy do we need to name this argument? Scala lets us use _ as a placeholder.\")\nplays.foreach(println(_))\n\nprintln(\"\\nFor longer functions, you can use {...} instead of (...).\")\nprintln(\"Why? Because it gives you the familiar multiline block syntax with {...}\")\nplays.foreach {\n  (str: String) => println(str)\n}\n\nprintln(\"\\nThe _ placeholder can be used *once* for each argument in the list.\")\nprintln(\"As an assume, use `reduceLeft` to sum some integers.\")\nval integers = 0 to 10   // Return a \"range\" from 0 to 10, inclusive\nintegers.reduceLeft((i,j) => i+j)\nintegers.reduceLeft(_+_)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Pass println as the function to use for each element:\ntamingoftheshrew\ncomedyoferrors\nloveslabourslost\nmidsummersnightsdream\nmerrywivesofwindsor\nmuchadoaboutnothing\nasyoulikeit\ntwelfthnight\n\nUsing an anonymous function that calls println: `str => println(str)`\n(Note that the type of the argument `str` is inferred to be String.)\ntamingoftheshrew\ncomedyoferrors\nloveslabourslost\nmidsummersnightsdream\nmerrywivesofwindsor\nmuchadoaboutnothing\nasyoulikeit\ntwelfthnight\n\nAdding the argument type explicitly. Note that the parentheses are required.\ntamingoftheshrew\ncomedyoferrors\nloveslabourslost\nmidsummersnightsdream\nmerrywivesofwindsor\nmuchadoaboutnothing\nasyoulikeit\ntwelfthnight\n\nWhy do we need to name this argument? Scala lets us use _ as a placeholder.\ntamingoftheshrew\ncomedyoferrors\nloveslabourslost\nmidsummersnightsdream\nmerrywivesofwindsor\nmuchadoaboutnothing\nasyoulikeit\ntwelfthnight\n\nFor longer functions, you can use {...} instead of (...).\nWhy? Because it gives you the familiar multiline block syntax with {...}\ntamingoftheshrew\ncomedyoferrors\nloveslabourslost\nmidsummersnightsdream\nmerrywivesofwindsor\nmuchadoaboutnothing\nasyoulikeit\ntwelfthnight\n\nThe _ placeholder can be used *once* for each argument in the list.\nAs an assume, use `reduceLeft` to sum some integers.\nintegers: scala.collection.immutable.Range.Inclusive = Range(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nres34: Int = 55\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "55"
      },
      "output_type" : "execute_result",
      "execution_count" : 21,
      "time" : "Took: 1 second 831 milliseconds, at 2016-12-1 17:3"
    } ]
  }, {
    "metadata" : {
      "id" : "6E8F041BF67F43DD9C79FE29021BDC7F"
    },
    "cell_type" : "markdown",
    "source" : "# Our First Spark Program\nWhew! We've learned a lot of Scala already while doing typical data science chores (i.e., fetching data). \n\nNow let's implement a real algorithm using Spark, _Inverted Index_."
  }, {
    "metadata" : {
      "id" : "EA38A54959954056A26AFB2136540AD4"
    },
    "cell_type" : "markdown",
    "source" : "## Inverted Index - When You're Tired of Counting Words...\n\nYou'll want to use _Inverted Index_ when you create your next \"Google killer\". It takes in a corpus of documents (e.g., web pages), tokenizes the words, and outputs for each word a list of the documents that contain it, along with the corresponding counts. \n\nThis is a slightly more interesting algorithm than _Word Count_, the classic \"hello world\" program everyone implements when they learn Spark.\n\nThe term _inverted_ here means we start with the words as part of the input _values_, while the _keys_ are the document identifiers, and we'll switch (\"invert\") to using the words as keys and the document identifiers as values."
  }, {
    "metadata" : {
      "id" : "D7F7A6A97DE14FA18131C707E4599D8A"
    },
    "cell_type" : "markdown",
    "source" : "Here's our first version, all at once. This is _one, long expression_. Note the periods `.` at the end of the subexpressions."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "279CFDA0E697461A8109AF880AF3FF10"
    },
    "cell_type" : "code",
    "source" : "val iiFirstPass1 = sc.wholeTextFiles(shakespeare.toString).\n    flatMap { location_contents_tuple2 => \n        val words = location_contents_tuple2._2.split(\"\"\"\\W+\"\"\")\n        val fileName = location_contents_tuple2._1.split(pathSeparator).last\n        words.map(word => ((word, fileName), 1))\n    }.\n    reduceByKey((count1, count2) => count1 + count2).\n    map { word_file_count_tup3 => \n        (word_file_count_tup3._1._1, (word_file_count_tup3._1._2, word_file_count_tup3._2)) \n    }.\n    groupByKey.\n    sortByKey(ascending = true).\n    mapValues { iterable => \n        val vect = iterable.toVector.sortBy { file_count_tup2 => \n            (-file_count_tup2._2, file_count_tup2._1)\n        }\n        vect.mkString(\",\")\n    }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "iiFirstPass1: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[9] at mapValues at <console>:85\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 22,
      "time" : "Took: 5 seconds 833 milliseconds, at 2016-12-1 17:5"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "6EB201ECBECA4B148CC0D6E7D308C46D"
    },
    "cell_type" : "code",
    "source" : "iiFirstPass1.take(50).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "(,(asyoulikeit,1),(comedyoferrors,1),(loveslabourslost,1),(merrywivesofwindsor,1),(midsummersnightsdream,1),(muchadoaboutnothing,1),(tamingoftheshrew,1),(twelfthnight,1))\n(A,(loveslabourslost,78),(tamingoftheshrew,59),(twelfthnight,47),(comedyoferrors,42),(midsummersnightsdream,39),(merrywivesofwindsor,38),(asyoulikeit,34),(muchadoaboutnothing,31))\n(ABOUT,(muchadoaboutnothing,18))\n(ACT,(merrywivesofwindsor,23),(asyoulikeit,22),(twelfthnight,18),(muchadoaboutnothing,17),(tamingoftheshrew,12),(comedyoferrors,11),(loveslabourslost,9),(midsummersnightsdream,9))\n(ADAM,(asyoulikeit,16))\n(ADO,(muchadoaboutnothing,18))\n(ADRIANA,(comedyoferrors,85))\n(ADRIANO,(loveslabourslost,111))\n(AEGEON,(comedyoferrors,20))\n(AEMELIA,(comedyoferrors,16))\n(AEMILIA,(comedyoferrors,3))\n(AEacides,(tamingoftheshrew,1))\n(AEgeon,(comedyoferrors,7))\n(AEgle,(midsummersnightsdream,1))\n(AEmilia,(comedyoferrors,4))\n(AEsculapius,(merrywivesofwindsor,1))\n(AGUECHEEK,(twelfthnight,2))\n(ALL,(midsummersnightsdream,2),(tamingoftheshrew,2))\n(AMIENS,(asyoulikeit,16))\n(ANDREW,(twelfthnight,104))\n(ANGELO,(comedyoferrors,36))\n(ANN,(merrywivesofwindsor,1))\n(ANNE,(merrywivesofwindsor,27))\n(ANTIPHOLUS,(comedyoferrors,195))\n(ANTONIO,(muchadoaboutnothing,32),(twelfthnight,32))\n(ARMADO,(loveslabourslost,111))\n(AS,(asyoulikeit,24))\n(AUDREY,(asyoulikeit,18))\n(Abate,(loveslabourslost,1),(midsummersnightsdream,1))\n(Abbess,(comedyoferrors,2))\n(Abetting,(comedyoferrors,1))\n(Abhor,(asyoulikeit,1))\n(Abide,(midsummersnightsdream,1))\n(Ability,(muchadoaboutnothing,1))\n(About,(loveslabourslost,2),(merrywivesofwindsor,2),(midsummersnightsdream,1),(muchadoaboutnothing,1),(tamingoftheshrew,1),(twelfthnight,1))\n(Above,(loveslabourslost,3),(twelfthnight,2),(merrywivesofwindsor,1),(tamingoftheshrew,1))\n(Abraham,(merrywivesofwindsor,2))\n(Abruptly,(asyoulikeit,1))\n(Academe,(loveslabourslost,1))\n(Accept,(tamingoftheshrew,1))\n(Accompany,(midsummersnightsdream,1))\n(According,(asyoulikeit,2),(comedyoferrors,1),(tamingoftheshrew,1),(twelfthnight,1))\n(Accost,(twelfthnight,3))\n(Accusativo,(merrywivesofwindsor,1))\n(Acheron,(midsummersnightsdream,1))\n(Achieve,(tamingoftheshrew,1))\n(Achilles,(loveslabourslost,1))\n(Actaeon,(merrywivesofwindsor,2))\n(Action,(loveslabourslost,1))\n(Adam,(asyoulikeit,7),(comedyoferrors,4),(muchadoaboutnothing,3),(loveslabourslost,2),(tamingoftheshrew,1))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 23,
      "time" : "Took: 1 second 869 milliseconds, at 2016-12-1 17:5"
    } ]
  }, {
    "metadata" : {
      "id" : "5C58024E869A433188F2002554FD0DD8"
    },
    "cell_type" : "markdown",
    "source" : "Now let's break it down into steps, assigning each step to a variable. This extra verbosity let's us see what Scala infers for the type returned by each expression, helping us learn. \n\nThis is one of the nice features of Scala. We don't have to put in the type information ourselves, most of the time, like we would have to do for Java code. Instead, we let the compiler give us feedback about what we just created. This is especially useful when you're learning a new API, like Spark's."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "5C14F35215B645AF8E1114F13E06BE84"
    },
    "cell_type" : "code",
    "source" : "val fileContents = sc.wholeTextFiles(shakespeare.toString)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "fileContents: org.apache.spark.rdd.RDD[(String, String)] = data/shakespeare MapPartitionsRDD[11] at wholeTextFiles at <console>:71\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 24,
      "time" : "Took: 1 second 165 milliseconds, at 2016-12-1 17:8"
    } ]
  }, {
    "metadata" : {
      "id" : "3DE80FDA9C8947938A39BDB23B6A7E59"
    },
    "cell_type" : "markdown",
    "source" : "The output is telling us that `fileContents` has the type [RDD[(String,String)]](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD), but `RDD` is a base class and the actual instance is a `MapPartitionsRDD`, which is a \"private\" implementation subclass of `RDD`. \n\nA name followed by square brackets, `[...]`, means that `RDD[...]` requires one or more type parameters in the brackets. In this case, a single type parameter, which represents the type of the records held by the `RDD`. \n\nThe single type parameter is given by `(String,String)`, which is a convenient shorthand for [Tuple2[String,String]](http://www.scala-lang.org/api/current/index.html#scala.Tuple2). That is, we have two-element _tuples_ as records, where the first element is a `String` for a file's fully-qualified path and the second element is a `String` for the contents of that file. This is what `SparkContext.wholeTextFiles` returns for us. We'll use the path to remember where we found words, while the contents contains the words themselves (of course).\n\nTo recap, the following two types are equivalent:\n* `RDD[(String,String)]` - Note parentheses nested in brackets, `[(...)]`.\n* `RDD[Tuple2[String,String]]` - Note nested brackets `[...[...]]`, not `[(...)]`.\n\n> **NOTE:** The number in brackets `[N]` in `MapPartitionsRDD[N]` is actually an internal identifier used by Spark. In the output for `fileContents`, we're actually calling `toString` on the instance. It's confusing that `MapPartitionsRDD.toString` uses `[...]`, which looks like a type signature."
  }, {
    "metadata" : {
      "id" : "E7013006BEBB49818F71394C6006B8E6"
    },
    "cell_type" : "markdown",
    "source" : "We'll see shortly that you can also write _instances_ of [Tuple2[T1,T2]](http://www.scala-lang.org/api/current/index.html#scala.Tuple2) with the same syntax, e.g., `(\"foo\", 101)`, for a `(String,Int)` tuple, and similarly for _higher-arity_ tuples (up to 22 elements...), e.g., `(\"foo\", 101, 3.14159, (\"bar\", 202L))`. Run the next cell to see the type signature for this last tuple."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "348ECFFC072E498A90A069E8FBD896C6"
    },
    "cell_type" : "code",
    "source" : "val footuple = (\"foo\", 101L, 3.14159F, (\"bar\", 202L))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "footuple: (String, Long, Float, (String, Long)) = (foo,101,3.14159,(bar,202))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 25,
      "time" : "Took: 896 milliseconds, at 2016-12-1 17:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "6F0388F3C9524011BB44099F00976C05"
    },
    "cell_type" : "code",
    "source" : "val (name, age, pi, (otherName, otherAge)) = footuple",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "name: String = foo\nage: Long = 101\npi: Float = 3.14159\notherName: String = bar\notherAge: Long = 202\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 26,
      "time" : "Took: 978 milliseconds, at 2016-12-1 17:8"
    } ]
  }, {
    "metadata" : {
      "id" : "D3DDA1765CFF488C9C09518D2B7A6709"
    },
    "cell_type" : "markdown",
    "source" : "Do you understand it? Do you see that it's a four-element tuple and not a five-element tuple? This is because the `(\"bar\", 202L)` is a nested tuple. It's the fourth element of the outer tuple."
  }, {
    "metadata" : {
      "id" : "560F2DC1EAAD46F28CDDBB2F5BE877ED"
    },
    "cell_type" : "markdown",
    "source" : "**Exercise:** Try creating some more tuples with elements of different types. Use the next cell."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "E9EA7CFFCEE24419B028DE88C7AE70A3"
    },
    "cell_type" : "code",
    "source" : "(1,2)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res42: (Int, Int) = (1,2)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "(1,2)"
      },
      "output_type" : "execute_result",
      "execution_count" : 27,
      "time" : "Took: 1 second 18 milliseconds, at 2016-12-1 17:9"
    } ]
  }, {
    "metadata" : {
      "id" : "DC32974A3B8D40F08D6F1717F6C5B6D2"
    },
    "cell_type" : "markdown",
    "source" : "How many `fileContents` records do we have? Not many. It should be the same number as the number of files we downloaded above."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "6A25871A32B14E89908FA23FD5358182"
    },
    "cell_type" : "code",
    "source" : "fileContents.count",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res44: Long = 8\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "8"
      },
      "output_type" : "execute_result",
      "execution_count" : 28,
      "time" : "Took: 1 second 475 milliseconds, at 2016-12-1 17:9"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "36EF21C8E62149838CF404DC4BC1E803"
    },
    "cell_type" : "code",
    "source" : "fileContents.take(1).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "(file:/Users/deanwampler/projects/spark/spark-notebook/spark-notebook-0.7.0-scala-2.11.8-spark-2.0.2-hadoop-2.7.2-with-hive/data/shakespeare/asyoulikeit,\tAS YOU LIKE IT\n\n\n\tDRAMATIS PERSONAE\n\n\nDUKE SENIOR\tliving in banishment.\n\nDUKE FREDERICK\this brother, an usurper of his dominions.\n\n\nAMIENS\t|\n\t|  lords attending on the banished duke.\nJAQUES\t|\n\n\nLE BEAU\ta courtier attending upon Frederick.\n\nCHARLES\twrestler to Frederick.\n\n\nOLIVER\t\t|\n\t\t|\nJAQUES (JAQUES DE BOYS:)  \t|  sons of Sir Rowland de Boys.\n\t\t|\nORLANDO\t\t|\n\n\nADAM\t|\n\t|  servants to Oliver.\nDENNIS\t|\n\n\nTOUCHSTONE\ta clown.\n\nSIR OLIVER MARTEXT\ta vicar.\n\n\nCORIN\t|\n\t|  shepherds.\nSILVIUS\t|\n\n\nWILLIAM\ta country fellow in love with Audrey.\n\n\tA person representing HYMEN. (HYMEN:)\n\nROSALIND\tdaughter to the banished duke.\n\nCELIA\tdaughter to Frederick.\n\nPHEBE\ta shepherdess.\n\nAUDREY\ta country wench.\n\n\tLords, pages, and attendants, &c.\n\t(Forester:)\n\t(A Lord:)\n\t(First Lord:)\n\t(Second Lord:)\n\t(First Page:)\n\t(Second Page:)\n\n\nSCENE\tOliver's house; Duke Frederick's court; and the\n\tForest of Arden.\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT I\n\n\n\nSCENE I\tOrchard of Oliver's house.\n\n\n\t[Enter ORLANDO and ADAM]\n\nORLANDO\tAs I remember, Adam, it was upon this fashion\n\tbequeathed me by will but poor a thousand crowns,\n\tand, as thou sayest, charged my brother, on his\n\tblessing, to breed me well: and there begins my\n\tsadness. My brother Jaques he keeps at school, and\n\treport speaks goldenly of his profit: for my part,\n\the keeps me rustically at home, or, to speak more\n\tproperly, stays me here at home unkept; for call you\n\tthat keeping for a gentleman of my birth, that\n\tdiffers not from the stalling of an ox? His horses\n\tare bred better; for, besides that they are fair\n\twith their feeding, they are taught their manage,\n\tand to that end riders dearly hired: but I, his\n\tbrother, gain nothing under him but growth; for the\n\twhich his animals on his dunghills are as much\n\tbound to him as I. Besides this nothing that he so\n\tplentifully gives me, the something that nature gave\n\tme his countenance seems to take from me: he lets\n\tme feed with his hinds, bars me the place of a\n\tbrother, and, as much as in him lies, mines my\n\tgentility with my education. This is it, Adam, that\n\tgrieves me; and the spirit of my father, which I\n\tthink is within me, begins to mutiny against this\n\tservitude: I will no longer endure it, though yet I\n\tknow no wise remedy how to avoid it.\n\nADAM\tYonder comes my master, your brother.\n\nORLANDO\tGo apart, Adam, and thou shalt hear how he will\n\tshake me up.\n\n\t[Enter OLIVER]\n\nOLIVER\tNow, sir! what make you here?\n\nORLANDO\tNothing: I am not taught to make any thing.\n\nOLIVER\tWhat mar you then, sir?\n\nORLANDO\tMarry, sir, I am helping you to mar that which God\n\tmade, a poor unworthy brother of yours, with idleness.\n\nOLIVER\tMarry, sir, be better employed, and be naught awhile.\n\nORLANDO\tShall I keep your hogs and eat husks with them?\n\tWhat prodigal portion have I spent, that I should\n\tcome to such penury?\n\nOLIVER\tKnow you where your are, sir?\n\nORLANDO\tO, sir, very well; here in your orchard.\n\nOLIVER\tKnow you before whom, sir?\n\nORLANDO\tAy, better than him I am before knows me. I know\n\tyou are my eldest brother; and, in the gentle\n\tcondition of blood, you should so know me. The\n\tcourtesy of nations allows you my better, in that\n\tyou are the first-born; but the same tradition\n\ttakes not away my blood, were there twenty brothers\n\tbetwixt us: I have as much of my father in me as\n\tyou; albeit, I confess, your coming before me is\n\tnearer to his reverence.\n\nOLIVER\tWhat, boy!\n\nORLANDO\tCome, come, elder brother, you are too young in this.\n\nOLIVER\tWilt thou lay hands on me, villain?\n\nORLANDO\tI am no villain; I am the youngest son of Sir\n\tRowland de Boys; he was my father, and he is thrice\n\ta villain that says such a father begot villains.\n\tWert thou not my brother, I would not take this hand\n\tfrom thy throat till this other had pulled out thy\n\ttongue for saying so: thou hast railed on thyself.\n\nADAM\tSweet masters, be patient: for your father's\n\tremembrance, be at accord.\n\nOLIVER\tLet me go, I say.\n\nORLANDO\tI will not, till I please: you shall hear me. My\n\tfather charged you in his will to give me good\n\teducation: you have trained me like a peasant,\n\tobscuring and hiding from me all gentleman-like\n\tqualities. The spirit of my father grows strong in\n\tme, and I will no longer endure it: therefore allow\n\tme such exercises as may become a gentleman, or\n\tgive me the poor allottery my father left me by\n\ttestament; with that I will go buy my fortunes.\n\nOLIVER\tAnd what wilt thou do? beg, when that is spent?\n\tWell, sir, get you in: I will not long be troubled\n\twith you; you shall have some part of your will: I\n\tpray you, leave me.\n\nORLANDO\tI will no further offend you than becomes me for my good.\n\nOLIVER\tGet you with him, you old dog.\n\nADAM\tIs 'old dog' my reward? Most true, I have lost my\n\tteeth in your service. God be with my old master!\n\the would not have spoke such a word.\n\n\t[Exeunt ORLANDO and ADAM]\n\nOLIVER\tIs it even so? begin you to grow upon me? I will\n\tphysic your rankness, and yet give no thousand\n\tcrowns neither. Holla, Dennis!\n\n\t[Enter DENNIS]\n\nDENNIS\tCalls your worship?\n\nOLIVER\tWas not Charles, the duke's wrestler, here to speak with me?\n\nDENNIS\tSo please you, he is here at the door and importunes\n\taccess to you.\n\nOLIVER\tCall him in.\n\n\t[Exit DENNIS]\n\n\t'Twill be a good way; and to-morrow the wrestling is.\n\n\t[Enter CHARLES]\n\nCHARLES\tGood morrow to your worship.\n\nOLIVER\tGood Monsieur Charles, what's the new news at the\n\tnew court?\n\nCHARLES\tThere's no news at the court, sir, but the old news:\n\tthat is, the old duke is banished by his younger\n\tbrother the new duke; and three or four loving lords\n\thave put themselves into voluntary exile with him,\n\twhose lands and revenues enrich the new duke;\n\ttherefore he gives them good leave to wander.\n\nOLIVER\tCan you tell if Rosalind, the duke's daughter, be\n\tbanished with her father?\n\nCHARLES\tO, no; for the duke's daughter, her cousin, so loves\n\ther, being ever from their cradles bred together,\n\tthat she would have followed her exile, or have died\n\tto stay behind her. She is at the court, and no\n\tless beloved of her uncle than his own daughter; and\n\tnever two ladies loved as they do.\n\nOLIVER\tWhere will the old duke live?\n\nCHARLES\tThey say he is already in the forest of Arden, and\n\ta many merry men with him; and there they live like\n\tthe old Robin Hood of England: they say many young\n\tgentlemen flock to him every day, and fleet the time\n\tcarelessly, as they did in the golden world.\n\nOLIVER\tWhat, you wrestle to-morrow before the new duke?\n\nCHARLES\tMarry, do I, sir; and I came to acquaint you with a\n\tmatter. I am given, sir, secretly to understand\n\tthat your younger brother Orlando hath a disposition\n\tto come in disguised against me to try a fall.\n\tTo-morrow, sir, I wrestle for my credit; and he that\n\tescapes me without some broken limb shall acquit him\n\twell. Your brother is but young and tender; and,\n\tfor your love, I would be loath to foil him, as I\n\tmust, for my own honour, if he come in: therefore,\n\tout of my love to you, I came hither to acquaint you\n\twithal, that either you might stay him from his\n\tintendment or brook such disgrace well as he shall\n\trun into, in that it is a thing of his own search\n\tand altogether against my will.\n\nOLIVER\tCharles, I thank thee for thy love to me, which\n\tthou shalt find I will most kindly requite. I had\n\tmyself notice of my brother's purpose herein and\n\thave by underhand means laboured to dissuade him from\n\tit, but he is resolute. I'll tell thee, Charles:\n\tit is the stubbornest young fellow of France, full\n\tof ambition, an envious emulator of every man's\n\tgood parts, a secret and villanous contriver against\n\tme his natural brother: therefore use thy\n\tdiscretion; I had as lief thou didst break his neck\n\tas his finger. And thou wert best look to't; for if\n\tthou dost him any slight disgrace or if he do not\n\tmightily grace himself on thee, he will practise\n\tagainst thee by poison, entrap thee by some\n\ttreacherous device and never leave thee till he\n\thath ta'en thy life by some indirect means or other;\n\tfor, I assure thee, and almost with tears I speak\n\tit, there is not one so young and so villanous this\n\tday living. I speak but brotherly of him; but\n\tshould I anatomize him to thee as he is, I must\n\tblush and weep and thou must look pale and wonder.\n\nCHARLES\tI am heartily glad I came hither to you. If he come\n\tto-morrow, I'll give him his payment: if ever he go\n\talone again, I'll never wrestle for prize more: and\n\tso God keep your worship!\n\nOLIVER\tFarewell, good Charles.\n\n\t[Exit CHARLES]\n\n\tNow will I stir this gamester: I hope I shall see\n\tan end of him; for my soul, yet I know not why,\n\thates nothing more than he. Yet he's gentle, never\n\tschooled and yet learned, full of noble device, of\n\tall sorts enchantingly beloved, and indeed so much\n\tin the heart of the world, and especially of my own\n\tpeople, who best know him, that I am altogether\n\tmisprised: but it shall not be so long; this\n\twrestler shall clear all: nothing remains but that\n\tI kindle the boy thither; which now I'll go about.\n\n\t[Exit]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT I\n\n\n\nSCENE II\tLawn before the Duke's palace.\n\n\n\t[Enter CELIA and ROSALIND]\n\nCELIA\tI pray thee, Rosalind, sweet my coz, be merry.\n\nROSALIND\tDear Celia, I show more mirth than I am mistress of;\n\tand would you yet I were merrier? Unless you could\n\tteach me to forget a banished father, you must not\n\tlearn me how to remember any extraordinary pleasure.\n\nCELIA\tHerein I see thou lovest me not with the full weight\n\tthat I love thee. If my uncle, thy banished father,\n\thad banished thy uncle, the duke my father, so thou\n\thadst been still with me, I could have taught my\n\tlove to take thy father for mine: so wouldst thou,\n\tif the truth of thy love to me were so righteously\n\ttempered as mine is to thee.\n\nROSALIND\tWell, I will forget the condition of my estate, to\n\trejoice in yours.\n\nCELIA\tYou know my father hath no child but I, nor none is\n\tlike to have: and, truly, when he dies, thou shalt\n\tbe his heir, for what he hath taken away from thy\n\tfather perforce, I will render thee again in\n\taffection; by mine honour, I will; and when I break\n\tthat oath, let me turn monster: therefore, my\n\tsweet Rose, my dear Rose, be merry.\n\nROSALIND\tFrom henceforth I will, coz, and devise sports. Let\n\tme see; what think you of falling in love?\n\nCELIA\tMarry, I prithee, do, to make sport withal: but\n\tlove no man in good earnest; nor no further in sport\n\tneither than with safety of a pure blush thou mayst\n\tin honour come off again.\n\nROSALIND\tWhat shall be our sport, then?\n\nCELIA\tLet us sit and mock the good housewife Fortune from\n\ther wheel, that her gifts may henceforth be bestowed equally.\n\nROSALIND\tI would we could do so, for her benefits are\n\tmightily misplaced, and the bountiful blind woman\n\tdoth most mistake in her gifts to women.\n\nCELIA\t'Tis true; for those that she makes fair she scarce\n\tmakes honest, and those that she makes honest she\n\tmakes very ill-favouredly.\n\nROSALIND\tNay, now thou goest from Fortune's office to\n\tNature's: Fortune reigns in gifts of the world,\n\tnot in the lineaments of Nature.\n\n\t[Enter TOUCHSTONE]\n\nCELIA\tNo? when Nature hath made a fair creature, may she\n\tnot by Fortune fall into the fire? Though Nature\n\thath given us wit to flout at Fortune, hath not\n\tFortune sent in this fool to cut off the argument?\n\nROSALIND\tIndeed, there is Fortune too hard for Nature, when\n\tFortune makes Nature's natural the cutter-off of\n\tNature's wit.\n\nCELIA\tPeradventure this is not Fortune's work neither, but\n\tNature's; who perceiveth our natural wits too dull\n\tto reason of such goddesses and hath sent this\n\tnatural for our whetstone; for always the dulness of\n\tthe fool is the whetstone of the wits. How now,\n\twit! whither wander you?\n\nTOUCHSTONE\tMistress, you must come away to your father.\n\nCELIA\tWere you made the messenger?\n\nTOUCHSTONE\tNo, by mine honour, but I was bid to come for you.\n\nROSALIND\tWhere learned you that oath, fool?\n\nTOUCHSTONE\tOf a certain knight that swore by his honour they\n\twere good pancakes and swore by his honour the\n\tmustard was naught: now I'll stand to it, the\n\tpancakes were naught and the mustard was good, and\n\tyet was not the knight forsworn.\n\nCELIA\tHow prove you that, in the great heap of your\n\tknowledge?\n\nROSALIND\tAy, marry, now unmuzzle your wisdom.\n\nTOUCHSTONE\tStand you both forth now: stroke your chins, and\n\tswear by your beards that I am a knave.\n\nCELIA\tBy our beards, if we had them, thou art.\n\nTOUCHSTONE\tBy my knavery, if I had it, then I were; but if you\n\tswear by that that is not, you are not forsworn: no\n\tmore was this knight swearing by his honour, for he\n\tnever had any; or if he had, he had sworn it away\n\tbefore ever he saw those pancakes or that mustard.\n\nCELIA\tPrithee, who is't that thou meanest?\n\nTOUCHSTONE\tOne that old Frederick, your father, loves.\n\nCELIA\tMy father's love is enough to honour him: enough!\n\tspeak no more of him; you'll be whipped for taxation\n\tone of these days.\n\nTOUCHSTONE\tThe more pity, that fools may not speak wisely what\n\twise men do foolishly.\n\nCELIA\tBy my troth, thou sayest true; for since the little\n\twit that fools have was silenced, the little foolery\n\tthat wise men have makes a great show. Here comes\n\tMonsieur Le Beau.\n\nROSALIND\tWith his mouth full of news.\n\nCELIA\tWhich he will put on us, as pigeons feed their young.\n\nROSALIND\tThen shall we be news-crammed.\n\nCELIA\tAll the better; we shall be the more marketable.\n\n\t[Enter LE BEAU]\n\n\tBon jour, Monsieur Le Beau: what's the news?\n\nLE BEAU\tFair princess, you have lost much good sport.\n\nCELIA\tSport! of what colour?\n\nLE BEAU\tWhat colour, madam! how shall I answer you?\n\nROSALIND\tAs wit and fortune will.\n\nTOUCHSTONE\tOr as the Destinies decree.\n\nCELIA\tWell said: that was laid on with a trowel.\n\nTOUCHSTONE\tNay, if I keep not my rank,--\n\nROSALIND\tThou losest thy old smell.\n\nLE BEAU\tYou amaze me, ladies: I would have told you of good\n\twrestling, which you have lost the sight of.\n\nROSALIND\tYou tell us the manner of the wrestling.\n\nLE BEAU\tI will tell you the beginning; and, if it please\n\tyour ladyships, you may see the end; for the best is\n\tyet to do; and here, where you are, they are coming\n\tto perform it.\n\nCELIA\tWell, the beginning, that is dead and buried.\n\nLE BEAU\tThere comes an old man and his three sons,--\n\nCELIA\tI could match this beginning with an old tale.\n\nLE BEAU\tThree proper young men, of excellent growth and presence.\n\nROSALIND\tWith bills on their necks, 'Be it known unto all men\n\tby these presents.'\n\nLE BEAU\tThe eldest of the three wrestled with Charles, the\n\tduke's wrestler; which Charles in a moment threw him\n\tand broke three of his ribs, that there is little\n\thope of life in him: so he served the second, and\n\tso the third. Yonder they lie; the poor old man,\n\ttheir father, making such pitiful dole over them\n\tthat all the beholders take his part with weeping.\n\nROSALIND\tAlas!\n\nTOUCHSTONE\tBut what is the sport, monsieur, that the ladies\n\thave lost?\n\nLE BEAU\tWhy, this that I speak of.\n\nTOUCHSTONE\tThus men may grow wiser every day: it is the first\n\ttime that ever I heard breaking of ribs was sport\n\tfor ladies.\n\nCELIA\tOr I, I promise thee.\n\nROSALIND\tBut is there any else longs to see this broken music\n\tin his sides? is there yet another dotes upon\n\trib-breaking? Shall we see this wrestling, cousin?\n\nLE BEAU\tYou must, if you stay here; for here is the place\n\tappointed for the wrestling, and they are ready to\n\tperform it.\n\nCELIA\tYonder, sure, they are coming: let us now stay and see it.\n\n\t[Flourish. Enter DUKE FREDERICK, Lords, ORLANDO,\n\tCHARLES, and Attendants]\n\nDUKE FREDERICK\tCome on: since the youth will not be entreated, his\n\town peril on his forwardness.\n\nROSALIND\tIs yonder the man?\n\nLE BEAU\tEven he, madam.\n\nCELIA\tAlas, he is too young! yet he looks successfully.\n\nDUKE FREDERICK\tHow now, daughter and cousin! are you crept hither\n\tto see the wrestling?\n\nROSALIND\tAy, my liege, so please you give us leave.\n\nDUKE FREDERICK\tYou will take little delight in it, I can tell you;\n\tthere is such odds in the man. In pity of the\n\tchallenger's youth I would fain dissuade him, but he\n\twill not be entreated. Speak to him, ladies; see if\n\tyou can move him.\n\nCELIA\tCall him hither, good Monsieur Le Beau.\n\nDUKE FREDERICK\tDo so: I'll not be by.\n\nLE BEAU\tMonsieur the challenger, the princesses call for you.\n\nORLANDO\tI attend them with all respect and duty.\n\nROSALIND\tYoung man, have you challenged Charles the wrestler?\n\nORLANDO\tNo, fair princess; he is the general challenger: I\n\tcome but in, as others do, to try with him the\n\tstrength of my youth.\n\nCELIA\tYoung gentleman, your spirits are too bold for your\n\tyears. You have seen cruel proof of this man's\n\tstrength: if you saw yourself with your eyes or\n\tknew yourself with your judgment, the fear of your\n\tadventure would counsel you to a more equal\n\tenterprise. We pray you, for your own sake, to\n\tembrace your own safety and give over this attempt.\n\nROSALIND\tDo, young sir; your reputation shall not therefore\n\tbe misprised: we will make it our suit to the duke\n\tthat the wrestling might not go forward.\n\nORLANDO\tI beseech you, punish me not with your hard\n\tthoughts; wherein I confess me much guilty, to deny\n\tso fair and excellent ladies any thing. But let\n\tyour fair eyes and gentle wishes go with me to my\n\ttrial: wherein if I be foiled, there is but one\n\tshamed that was never gracious; if killed, but one\n\tdead that was willing to be so: I shall do my\n\tfriends no wrong, for I have none to lament me, the\n\tworld no injury, for in it I have nothing; only in\n\tthe world I fill up a place, which may be better\n\tsupplied when I have made it empty.\n\nROSALIND\tThe little strength that I have, I would it were with you.\n\nCELIA\tAnd mine, to eke out hers.\n\nROSALIND\tFare you well: pray heaven I be deceived in you!\n\nCELIA\tYour heart's desires be with you!\n\nCHARLES\tCome, where is this young gallant that is so\n\tdesirous to lie with his mother earth?\n\nORLANDO\tReady, sir; but his will hath in it a more modest working.\n\nDUKE FREDERICK\tYou shall try but one fall.\n\nCHARLES\tNo, I warrant your grace, you shall not entreat him\n\tto a second, that have so mightily persuaded him\n\tfrom a first.\n\nORLANDO\tAn you mean to mock me after, you should not have\n\tmocked me before: but come your ways.\n\nROSALIND\tNow Hercules be thy speed, young man!\n\nCELIA\tI would I were invisible, to catch the strong\n\tfellow by the leg.\n\n\t[They wrestle]\n\nROSALIND\tO excellent young man!\n\nCELIA\tIf I had a thunderbolt in mine eye, I can tell who\n\tshould down.\n\n\t[Shout. CHARLES is thrown]\n\nDUKE FREDERICK\tNo more, no more.\n\nORLANDO\tYes, I beseech your grace: I am not yet well breathed.\n\nDUKE FREDERICK\tHow dost thou, Charles?\n\nLE BEAU\tHe cannot speak, my lord.\n\nDUKE FREDERICK\tBear him away. What is thy name, young man?\n\nORLANDO\tOrlando, my liege; the youngest son of Sir Rowland de Boys.\n\nDUKE FREDERICK\tI would thou hadst been son to some man else:\n\tThe world esteem'd thy father honourable,\n\tBut I did find him still mine enemy:\n\tThou shouldst have better pleased me with this deed,\n\tHadst thou descended from another house.\n\tBut fare thee well; thou art a gallant youth:\n\tI would thou hadst told me of another father.\n\n\t[Exeunt DUKE FREDERICK, train, and LE BEAU]\n\nCELIA\tWere I my father, coz, would I do this?\n\nORLANDO\tI am more proud to be Sir Rowland's son,\n\tHis youngest son; and would not change that calling,\n\tTo be adopted heir to Frederick.\n\nROSALIND\tMy father loved Sir Rowland as his soul,\n\tAnd all the world was of my father's mind:\n\tHad I before known this young man his son,\n\tI should have given him tears unto entreaties,\n\tEre he should thus have ventured.\n\nCELIA\tGentle cousin,\n\tLet us go thank him and encourage him:\n\tMy father's rough and envious disposition\n\tSticks me at heart. Sir, you have well deserved:\n\tIf you do keep your promises in love\n\tBut justly, as you have exceeded all promise,\n\tYour mistress shall be happy.\n\nROSALIND\tGentleman,\n\n\t[Giving him a chain from her neck]\n\n\tWear this for me, one out of suits with fortune,\n\tThat could give more, but that her hand lacks means.\n\tShall we go, coz?\n\nCELIA\t                  Ay. Fare you well, fair gentleman.\n\nORLANDO\tCan I not say, I thank you? My better parts\n\tAre all thrown down, and that which here stands up\n\tIs but a quintain, a mere lifeless block.\n\nROSALIND\tHe calls us back: my pride fell with my fortunes;\n\tI'll ask him what he would. Did you call, sir?\n\tSir, you have wrestled well and overthrown\n\tMore than your enemies.\n\nCELIA\tWill you go, coz?\n\nROSALIND\tHave with you. Fare you well.\n\n\t[Exeunt ROSALIND and CELIA]\n\nORLANDO\tWhat passion hangs these weights upon my tongue?\n\tI cannot speak to her, yet she urged conference.\n\tO poor Orlando, thou art overthrown!\n\tOr Charles or something weaker masters thee.\n\n\t[Re-enter LE BEAU]\n\nLE BEAU\tGood sir, I do in friendship counsel you\n\tTo leave this place. Albeit you have deserved\n\tHigh commendation, true applause and love,\n\tYet such is now the duke's condition\n\tThat he misconstrues all that you have done.\n\tThe duke is humorous; what he is indeed,\n\tMore suits you to conceive than I to speak of.\n\nORLANDO\tI thank you, sir: and, pray you, tell me this:\n\tWhich of the two was daughter of the duke\n\tThat here was at the wrestling?\n\nLE BEAU\tNeither his daughter, if we judge by manners;\n\tBut yet indeed the lesser is his daughter\n\tThe other is daughter to the banish'd duke,\n\tAnd here detain'd by her usurping uncle,\n\tTo keep his daughter company; whose loves\n\tAre dearer than the natural bond of sisters.\n\tBut I can tell you that of late this duke\n\tHath ta'en displeasure 'gainst his gentle niece,\n\tGrounded upon no other argument\n\tBut that the people praise her for her virtues\n\tAnd pity her for her good father's sake;\n\tAnd, on my life, his malice 'gainst the lady\n\tWill suddenly break forth. Sir, fare you well:\n\tHereafter, in a better world than this,\n\tI shall desire more love and knowledge of you.\n\nORLANDO\tI rest much bounden to you: fare you well.\n\n\t[Exit LE BEAU]\n\n\tThus must I from the smoke into the smother;\n\tFrom tyrant duke unto a tyrant brother:\n\tBut heavenly Rosalind!\n\n\t[Exit]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT I\n\n\n\nSCENE III\tA room in the palace.\n\n\n\t[Enter CELIA and ROSALIND]\n\nCELIA\tWhy, cousin! why, Rosalind! Cupid have mercy! not a word?\n\nROSALIND\tNot one to throw at a dog.\n\nCELIA\tNo, thy words are too precious to be cast away upon\n\tcurs; throw some of them at me; come, lame me with reasons.\n\nROSALIND\tThen there were two cousins laid up; when the one\n\tshould be lamed with reasons and the other mad\n\twithout any.\n\nCELIA\tBut is all this for your father?\n\nROSALIND\tNo, some of it is for my child's father. O, how\n\tfull of briers is this working-day world!\n\nCELIA\tThey are but burs, cousin, thrown upon thee in\n\tholiday foolery: if we walk not in the trodden\n\tpaths our very petticoats will catch them.\n\nROSALIND\tI could shake them off my coat: these burs are in my heart.\n\nCELIA\tHem them away.\n\nROSALIND\tI would try, if I could cry 'hem' and have him.\n\nCELIA\tCome, come, wrestle with thy affections.\n\nROSALIND\tO, they take the part of a better wrestler than myself!\n\nCELIA\tO, a good wish upon you! you will try in time, in\n\tdespite of a fall. But, turning these jests out of\n\tservice, let us talk in good earnest: is it\n\tpossible, on such a sudden, you should fall into so\n\tstrong a liking with old Sir Rowland's youngest son?\n\nROSALIND\tThe duke my father loved his father dearly.\n\nCELIA\tDoth it therefore ensue that you should love his son\n\tdearly? By this kind of chase, I should hate him,\n\tfor my father hated his father dearly; yet I hate\n\tnot Orlando.\n\nROSALIND\tNo, faith, hate him not, for my sake.\n\nCELIA\tWhy should I not? doth he not deserve well?\n\nROSALIND\tLet me love him for that, and do you love him\n\tbecause I do. Look, here comes the duke.\n\nCELIA\tWith his eyes full of anger.\n\n\t[Enter DUKE FREDERICK, with Lords]\n\nDUKE FREDERICK\tMistress, dispatch you with your safest haste\n\tAnd get you from our court.\n\nROSALIND\tMe, uncle?\n\nDUKE FREDERICK\tYou, cousin\n\tWithin these ten days if that thou be'st found\n\tSo near our public court as twenty miles,\n\tThou diest for it.\n\nROSALIND\t                  I do beseech your grace,\n\tLet me the knowledge of my fault bear with me:\n\tIf with myself I hold intelligence\n\tOr have acquaintance with mine own desires,\n\tIf that I do not dream or be not frantic,--\n\tAs I do trust I am not--then, dear uncle,\n\tNever so much as in a thought unborn\n\tDid I offend your highness.\n\nDUKE FREDERICK\tThus do all traitors:\n\tIf their purgation did consist in words,\n\tThey are as innocent as grace itself:\n\tLet it suffice thee that I trust thee not.\n\nROSALIND\tYet your mistrust cannot make me a traitor:\n\tTell me whereon the likelihood depends.\n\nDUKE FREDERICK\tThou art thy father's daughter; there's enough.\n\nROSALIND\tSo was I when your highness took his dukedom;\n\tSo was I when your highness banish'd him:\n\tTreason is not inherited, my lord;\n\tOr, if we did derive it from our friends,\n\tWhat's that to me? my father was no traitor:\n\tThen, good my liege, mistake me not so much\n\tTo think my poverty is treacherous.\n\nCELIA\tDear sovereign, hear me speak.\n\nDUKE FREDERICK\tAy, Celia; we stay'd her for your sake,\n\tElse had she with her father ranged along.\n\nCELIA\tI did not then entreat to have her stay;\n\tIt was your pleasure and your own remorse:\n\tI was too young that time to value her;\n\tBut now I know her: if she be a traitor,\n\tWhy so am I; we still have slept together,\n\tRose at an instant, learn'd, play'd, eat together,\n\tAnd wheresoever we went, like Juno's swans,\n\tStill we went coupled and inseparable.\n\nDUKE FREDERICK\tShe is too subtle for thee; and her smoothness,\n\tHer very silence and her patience\n\tSpeak to the people, and they pity her.\n\tThou art a fool: she robs thee of thy name;\n\tAnd thou wilt show more bright and seem more virtuous\n\tWhen she is gone. Then open not thy lips:\n\tFirm and irrevocable is my doom\n\tWhich I have pass'd upon her; she is banish'd.\n\nCELIA\tPronounce that sentence then on me, my liege:\n\tI cannot live out of her company.\n\nDUKE FREDERICK\tYou are a fool. You, niece, provide yourself:\n\tIf you outstay the time, upon mine honour,\n\tAnd in the greatness of my word, you die.\n\n\t[Exeunt DUKE FREDERICK and Lords]\n\nCELIA\tO my poor Rosalind, whither wilt thou go?\n\tWilt thou change fathers? I will give thee mine.\n\tI charge thee, be not thou more grieved than I am.\n\nROSALIND\tI have more cause.\n\nCELIA\t                  Thou hast not, cousin;\n\tPrithee be cheerful: know'st thou not, the duke\n\tHath banish'd me, his daughter?\n\nROSALIND\tThat he hath not.\n\nCELIA\tNo, hath not? Rosalind lacks then the love\n\tWhich teacheth thee that thou and I am one:\n\tShall we be sunder'd? shall we part, sweet girl?\n\tNo: let my father seek another heir.\n\tTherefore devise with me how we may fly,\n\tWhither to go and what to bear with us;\n\tAnd do not seek to take your change upon you,\n\tTo bear your griefs yourself and leave me out;\n\tFor, by this heaven, now at our sorrows pale,\n\tSay what thou canst, I'll go along with thee.\n\nROSALIND\tWhy, whither shall we go?\n\nCELIA\tTo seek my uncle in the forest of Arden.\n\nROSALIND\tAlas, what danger will it be to us,\n\tMaids as we are, to travel forth so far!\n\tBeauty provoketh thieves sooner than gold.\n\nCELIA\tI'll put myself in poor and mean attire\n\tAnd with a kind of umber smirch my face;\n\tThe like do you: so shall we pass along\n\tAnd never stir assailants.\n\nROSALIND\tWere it not better,\n\tBecause that I am more than common tall,\n\tThat I did suit me all points like a man?\n\tA gallant curtle-axe upon my thigh,\n\tA boar-spear in my hand; and--in my heart\n\tLie there what hidden woman's fear there will--\n\tWe'll have a swashing and a martial outside,\n\tAs many other mannish cowards have\n\tThat do outface it with their semblances.\n\nCELIA\tWhat shall I call thee when thou art a man?\n\nROSALIND\tI'll have no worse a name than Jove's own page;\n\tAnd therefore look you call me Ganymede.\n\tBut what will you be call'd?\n\nCELIA\tSomething that hath a reference to my state\n\tNo longer Celia, but Aliena.\n\nROSALIND\tBut, cousin, what if we assay'd to steal\n\tThe clownish fool out of your father's court?\n\tWould he not be a comfort to our travel?\n\nCELIA\tHe'll go along o'er the wide world with me;\n\tLeave me alone to woo him. Let's away,\n\tAnd get our jewels and our wealth together,\n\tDevise the fittest time and safest way\n\tTo hide us from pursuit that will be made\n\tAfter my flight. Now go we in content\n\tTo liberty and not to banishment.\n\n\t[Exeunt]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT II\n\n\n\nSCENE I\tThe Forest of Arden.\n\n\n\t[Enter DUKE SENIOR, AMIENS, and two or three Lords,\n\tlike foresters]\n\nDUKE SENIOR\tNow, my co-mates and brothers in exile,\n\tHath not old custom made this life more sweet\n\tThan that of painted pomp? Are not these woods\n\tMore free from peril than the envious court?\n\tHere feel we but the penalty of Adam,\n\tThe seasons' difference, as the icy fang\n\tAnd churlish chiding of the winter's wind,\n\tWhich, when it bites and blows upon my body,\n\tEven till I shrink with cold, I smile and say\n\t'This is no flattery: these are counsellors\n\tThat feelingly persuade me what I am.'\n\tSweet are the uses of adversity,\n\tWhich, like the toad, ugly and venomous,\n\tWears yet a precious jewel in his head;\n\tAnd this our life exempt from public haunt\n\tFinds tongues in trees, books in the running brooks,\n\tSermons in stones and good in every thing.\n\tI would not change it.\n\nAMIENS\tHappy is your grace,\n\tThat can translate the stubbornness of fortune\n\tInto so quiet and so sweet a style.\n\nDUKE SENIOR\tCome, shall we go and kill us venison?\n\tAnd yet it irks me the poor dappled fools,\n\tBeing native burghers of this desert city,\n\tShould in their own confines with forked heads\n\tHave their round haunches gored.\n\nFirst Lord\tIndeed, my lord,\n\tThe melancholy Jaques grieves at that,\n\tAnd, in that kind, swears you do more usurp\n\tThan doth your brother that hath banish'd you.\n\tTo-day my Lord of Amiens and myself\n\tDid steal behind him as he lay along\n\tUnder an oak whose antique root peeps out\n\tUpon the brook that brawls along this wood:\n\tTo the which place a poor sequester'd stag,\n\tThat from the hunter's aim had ta'en a hurt,\n\tDid come to languish, and indeed, my lord,\n\tThe wretched animal heaved forth such groans\n\tThat their discharge did stretch his leathern coat\n\tAlmost to bursting, and the big round tears\n\tCoursed one another down his innocent nose\n\tIn piteous chase; and thus the hairy fool\n\tMuch marked of the melancholy Jaques,\n\tStood on the extremest verge of the swift brook,\n\tAugmenting it with tears.\n\nDUKE SENIOR\tBut what said Jaques?\n\tDid he not moralize this spectacle?\n\nFirst Lord\tO, yes, into a thousand similes.\n\tFirst, for his weeping into the needless stream;\n\t'Poor deer,' quoth he, 'thou makest a testament\n\tAs worldlings do, giving thy sum of more\n\tTo that which had too much:' then, being there alone,\n\tLeft and abandon'd of his velvet friends,\n\t''Tis right:' quoth he; 'thus misery doth part\n\tThe flux of company:' anon a careless herd,\n\tFull of the pasture, jumps along by him\n\tAnd never stays to greet him; 'Ay' quoth Jaques,\n\t'Sweep on, you fat and greasy citizens;\n\t'Tis just the fashion: wherefore do you look\n\tUpon that poor and broken bankrupt there?'\n\tThus most invectively he pierceth through\n\tThe body of the country, city, court,\n\tYea, and of this our life, swearing that we\n\tAre mere usurpers, tyrants and what's worse,\n\tTo fright the animals and to kill them up\n\tIn their assign'd and native dwelling-place.\n\nDUKE SENIOR\tAnd did you leave him in this contemplation?\n\nSecond Lord\tWe did, my lord, weeping and commenting\n\tUpon the sobbing deer.\n\nDUKE SENIOR\tShow me the place:\n\tI love to cope him in these sullen fits,\n\tFor then he's full of matter.\n\nFirst Lord\tI'll bring you to him straight.\n\n\t[Exeunt]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT II\n\n\n\nSCENE II\tA room in the palace.\n\n\n\t[Enter DUKE FREDERICK, with Lords]\n\nDUKE FREDERICK\tCan it be possible that no man saw them?\n\tIt cannot be: some villains of my court\n\tAre of consent and sufferance in this.\n\nFirst Lord\tI cannot hear of any that did see her.\n\tThe ladies, her attendants of her chamber,\n\tSaw her abed, and in the morning early\n\tThey found the bed untreasured of their mistress.\n\nSecond Lord\tMy lord, the roynish clown, at whom so oft\n\tYour grace was wont to laugh, is also missing.\n\tHisperia, the princess' gentlewoman,\n\tConfesses that she secretly o'erheard\n\tYour daughter and her cousin much commend\n\tThe parts and graces of the wrestler\n\tThat did but lately foil the sinewy Charles;\n\tAnd she believes, wherever they are gone,\n\tThat youth is surely in their company.\n\nDUKE FREDERICK\tSend to his brother; fetch that gallant hither;\n\tIf he be absent, bring his brother to me;\n\tI'll make him find him: do this suddenly,\n\tAnd let not search and inquisition quail\n\tTo bring again these foolish runaways.\n\n\t[Exeunt]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT II\n\n\n\nSCENE III\tBefore OLIVER'S house.\n\n\n\t[Enter ORLANDO and ADAM, meeting]\n\nORLANDO\tWho's there?\n\nADAM\tWhat, my young master? O, my gentle master!\n\tO my sweet master! O you memory\n\tOf old Sir Rowland! why, what make you here?\n\tWhy are you virtuous? why do people love you?\n\tAnd wherefore are you gentle, strong and valiant?\n\tWhy would you be so fond to overcome\n\tThe bonny priser of the humorous duke?\n\tYour praise is come too swiftly home before you.\n\tKnow you not, master, to some kind of men\n\tTheir graces serve them but as enemies?\n\tNo more do yours: your virtues, gentle master,\n\tAre sanctified and holy traitors to you.\n\tO, what a world is this, when what is comely\n\tEnvenoms him that bears it!\n\nORLANDO\tWhy, what's the matter?\n\nADAM\tO unhappy youth!\n\tCome not within these doors; within this roof\n\tThe enemy of all your graces lives:\n\tYour brother--no, no brother; yet the son--\n\tYet not the son, I will not call him son\n\tOf him I was about to call his father--\n\tHath heard your praises, and this night he means\n\tTo burn the lodging where you use to lie\n\tAnd you within it: if he fail of that,\n\tHe will have other means to cut you off.\n\tI overheard him and his practises.\n\tThis is no place; this house is but a butchery:\n\tAbhor it, fear it, do not enter it.\n\nORLANDO\tWhy, whither, Adam, wouldst thou have me go?\n\nADAM\tNo matter whither, so you come not here.\n\nORLANDO\tWhat, wouldst thou have me go and beg my food?\n\tOr with a base and boisterous sword enforce\n\tA thievish living on the common road?\n\tThis I must do, or know not what to do:\n\tYet this I will not do, do how I can;\n\tI rather will subject me to the malice\n\tOf a diverted blood and bloody brother.\n\nADAM\tBut do not so. I have five hundred crowns,\n\tThe thrifty hire I saved under your father,\n\tWhich I did store to be my foster-nurse\n\tWhen service should in my old limbs lie lame\n\tAnd unregarded age in corners thrown:\n\tTake that, and He that doth the ravens feed,\n\tYea, providently caters for the sparrow,\n\tBe comfort to my age! Here is the gold;\n\tAnd all this I give you. Let me be your servant:\n\tThough I look old, yet I am strong and lusty;\n\tFor in my youth I never did apply\n\tHot and rebellious liquors in my blood,\n\tNor did not with unbashful forehead woo\n\tThe means of weakness and debility;\n\tTherefore my age is as a lusty winter,\n\tFrosty, but kindly: let me go with you;\n\tI'll do the service of a younger man\n\tIn all your business and necessities.\n\nORLANDO\tO good old man, how well in thee appears\n\tThe constant service of the antique world,\n\tWhen service sweat for duty, not for meed!\n\tThou art not for the fashion of these times,\n\tWhere none will sweat but for promotion,\n\tAnd having that, do choke their service up\n\tEven with the having: it is not so with thee.\n\tBut, poor old man, thou prunest a rotten tree,\n\tThat cannot so much as a blossom yield\n\tIn lieu of all thy pains and husbandry\n\tBut come thy ways; well go along together,\n\tAnd ere we have thy youthful wages spent,\n\tWe'll light upon some settled low content.\n\nADAM\tMaster, go on, and I will follow thee,\n\tTo the last gasp, with truth and loyalty.\n\tFrom seventeen years till now almost fourscore\n\tHere lived I, but now live here no more.\n\tAt seventeen years many their fortunes seek;\n\tBut at fourscore it is too late a week:\n\tYet fortune cannot recompense me better\n\tThan to die well and not my master's debtor.\n\n\t[Exeunt]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT II\n\n\n\nSCENE IV\tThe Forest of Arden.\n\n\n\t[Enter ROSALIND for Ganymede, CELIA for Aliena,\n\tand TOUCHSTONE]\n\nROSALIND\tO Jupiter, how weary are my spirits!\n\nTOUCHSTONE\tI care not for my spirits, if my legs were not weary.\n\nROSALIND\tI could find in my heart to disgrace my man's\n\tapparel and to cry like a woman; but I must comfort\n\tthe weaker vessel, as doublet and hose ought to show\n\titself courageous to petticoat: therefore courage,\n\tgood Aliena!\n\nCELIA\tI pray you, bear with me; I cannot go no further.\n\nTOUCHSTONE\tFor my part, I had rather bear with you than bear\n\tyou; yet I should bear no cross if I did bear you,\n\tfor I think you have no money in your purse.\n\nROSALIND\tWell, this is the forest of Arden.\n\nTOUCHSTONE\tAy, now am I in Arden; the more fool I; when I was\n\tat home, I was in a better place: but travellers\n\tmust be content.\n\nROSALIND\tAy, be so, good Touchstone.\n\n\t[Enter CORIN and SILVIUS]\n\n\tLook you, who comes here; a young man and an old in\n\tsolemn talk.\n\nCORIN\tThat is the way to make her scorn you still.\n\nSILVIUS\tO Corin, that thou knew'st how I do love her!\n\nCORIN\tI partly guess; for I have loved ere now.\n\nSILVIUS\tNo, Corin, being old, thou canst not guess,\n\tThough in thy youth thou wast as true a lover\n\tAs ever sigh'd upon a midnight pillow:\n\tBut if thy love were ever like to mine--\n\tAs sure I think did never man love so--\n\tHow many actions most ridiculous\n\tHast thou been drawn to by thy fantasy?\n\nCORIN\tInto a thousand that I have forgotten.\n\nSILVIUS\tO, thou didst then ne'er love so heartily!\n\tIf thou remember'st not the slightest folly\n\tThat ever love did make thee run into,\n\tThou hast not loved:\n\tOr if thou hast not sat as I do now,\n\tWearying thy hearer in thy mistress' praise,\n\tThou hast not loved:\n\tOr if thou hast not broke from company\n\tAbruptly, as my passion now makes me,\n\tThou hast not loved.\n\tO Phebe, Phebe, Phebe!\n\n\t[Exit]\n\nROSALIND\tAlas, poor shepherd! searching of thy wound,\n\tI have by hard adventure found mine own.\n\nTOUCHSTONE\tAnd I mine. I remember, when I was in love I broke\n\tmy sword upon a stone and bid him take that for\n\tcoming a-night to Jane Smile; and I remember the\n\tkissing of her batlet and the cow's dugs that her\n\tpretty chopt hands had milked; and I remember the\n\twooing of a peascod instead of her, from whom I took\n\ttwo cods and, giving her them again, said with\n\tweeping tears 'Wear these for my sake.' We that are\n\ttrue lovers run into strange capers; but as all is\n\tmortal in nature, so is all nature in love mortal in folly.\n\nROSALIND\tThou speakest wiser than thou art ware of.\n\nTOUCHSTONE\tNay, I shall ne'er be ware of mine own wit till I\n\tbreak my shins against it.\n\nROSALIND\tJove, Jove! this shepherd's passion\n\tIs much upon my fashion.\n\nTOUCHSTONE\tAnd mine; but it grows something stale with me.\n\nCELIA\tI pray you, one of you question yond man\n\tIf he for gold will give us any food:\n\tI faint almost to death.\n\nTOUCHSTONE\tHolla, you clown!\n\nROSALIND\tPeace, fool: he's not thy kinsman.\n\nCORIN\tWho calls?\n\nTOUCHSTONE\tYour betters, sir.\n\nCORIN\t                  Else are they very wretched.\n\nROSALIND\tPeace, I say. Good even to you, friend.\n\nCORIN\tAnd to you, gentle sir, and to you all.\n\nROSALIND\tI prithee, shepherd, if that love or gold\n\tCan in this desert place buy entertainment,\n\tBring us where we may rest ourselves and feed:\n\tHere's a young maid with travel much oppress'd\n\tAnd faints for succor.\n\nCORIN\tFair sir, I pity her\n\tAnd wish, for her sake more than for mine own,\n\tMy fortunes were more able to relieve her;\n\tBut I am shepherd to another man\n\tAnd do not shear the fleeces that I graze:\n\tMy master is of churlish disposition\n\tAnd little recks to find the way to heaven\n\tBy doing deeds of hospitality:\n\tBesides, his cote, his flocks and bounds of feed\n\tAre now on sale, and at our sheepcote now,\n\tBy reason of his absence, there is nothing\n\tThat you will feed on; but what is, come see.\n\tAnd in my voice most welcome shall you be.\n\nROSALIND\tWhat is he that shall buy his flock and pasture?\n\nCORIN\tThat young swain that you saw here but erewhile,\n\tThat little cares for buying any thing.\n\nROSALIND\tI pray thee, if it stand with honesty,\n\tBuy thou the cottage, pasture and the flock,\n\tAnd thou shalt have to pay for it of us.\n\nCELIA\tAnd we will mend thy wages. I like this place.\n\tAnd willingly could waste my time in it.\n\nCORIN\tAssuredly the thing is to be sold:\n\tGo with me: if you like upon report\n\tThe soil, the profit and this kind of life,\n\tI will your very faithful feeder be\n\tAnd buy it with your gold right suddenly.\n\n\t[Exeunt]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT II\n\n\n\nSCENE V\tThe Forest.\n\n\n\t[Enter AMIENS, JAQUES, and others]\n\t\n\tSONG.\nAMIENS\tUnder the greenwood tree\n\tWho loves to lie with me,\n\tAnd turn his merry note\n\tUnto the sweet bird's throat,\n\tCome hither, come hither, come hither:\n\tHere shall he see No enemy\n\tBut winter and rough weather.\n\nJAQUES\tMore, more, I prithee, more.\n\nAMIENS\tIt will make you melancholy, Monsieur Jaques.\n\nJAQUES\tI thank it. More, I prithee, more. I can suck\n\tmelancholy out of a song, as a weasel sucks eggs.\n\tMore, I prithee, more.\n\nAMIENS\tMy voice is ragged: I know I cannot please you.\n\nJAQUES\tI do not desire you to please me; I do desire you to\n\tsing. Come, more; another stanzo: call you 'em stanzos?\n\nAMIENS\tWhat you will, Monsieur Jaques.\n\nJAQUES\tNay, I care not for their names; they owe me\n\tnothing. Will you sing?\n\nAMIENS\tMore at your request than to please myself.\n\nJAQUES\tWell then, if ever I thank any man, I'll thank you;\n\tbut that they call compliment is like the encounter\n\tof two dog-apes, and when a man thanks me heartily,\n\tmethinks I have given him a penny and he renders me\n\tthe beggarly thanks. Come, sing; and you that will\n\tnot, hold your tongues.\n\nAMIENS\tWell, I'll end the song. Sirs, cover the while; the\n\tduke will drink under this tree. He hath been all\n\tthis day to look you.\n\nJAQUES\tAnd I have been all this day to avoid him. He is\n\ttoo disputable for my company: I think of as many\n\tmatters as he, but I give heaven thanks and make no\n\tboast of them. Come, warble, come.\n\t\n\tSONG.\n\tWho doth ambition shun\n\n\t[All together here]\n\n\tAnd loves to live i' the sun,\n\tSeeking the food he eats\n\tAnd pleased with what he gets,\n\tCome hither, come hither, come hither:\n\tHere shall he see No enemy\n\tBut winter and rough weather.\n\nJAQUES\tI'll give you a verse to this note that I made\n\tyesterday in despite of my invention.\n\nAMIENS\tAnd I'll sing it.\n\nJAQUES\tThus it goes:--\n\n\tIf it do come to pass\n\tThat any man turn ass,\n\tLeaving his wealth and ease,\n\tA stubborn will to please,\n\tDucdame, ducdame, ducdame:\n\tHere shall he see\n\tGross fools as he,\n\tAn if he will come to me.\n\nAMIENS\tWhat's that 'ducdame'?\n\nJAQUES\t'Tis a Greek invocation, to call fools into a\n\tcircle. I'll go sleep, if I can; if I cannot, I'll\n\trail against all the first-born of Egypt.\n\nAMIENS\tAnd I'll go seek the duke: his banquet is prepared.\n\n\t[Exeunt severally]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT II\n\n\n\nSCENE VI\tThe forest.\n\n\n\t[Enter ORLANDO and ADAM]\n\nADAM\tDear master, I can go no further. O, I die for food!\n\tHere lie I down, and measure out my grave. Farewell,\n\tkind master.\n\nORLANDO\tWhy, how now, Adam! no greater heart in thee? Live\n\ta little; comfort a little; cheer thyself a little.\n\tIf this uncouth forest yield any thing savage, I\n\twill either be food for it or bring it for food to\n\tthee. Thy conceit is nearer death than thy powers.\n\tFor my sake be comfortable; hold death awhile at\n\tthe arm's end: I will here be with thee presently;\n\tand if I bring thee not something to eat, I will\n\tgive thee leave to die: but if thou diest before I\n\tcome, thou art a mocker of my labour. Well said!\n\tthou lookest cheerly, and I'll be with thee quickly.\n\tYet thou liest in the bleak air: come, I will bear\n\tthee to some shelter; and thou shalt not die for\n\tlack of a dinner, if there live any thing in this\n\tdesert. Cheerly, good Adam!\n\n\t[Exeunt]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT II\n\n\n\nSCENE VII\tThe forest.\n\n\n\t[A table set out. Enter DUKE SENIOR, AMIENS, and\n\tLords like outlaws]\n\nDUKE SENIOR\tI think he be transform'd into a beast;\n\tFor I can no where find him like a man.\n\nFirst Lord\tMy lord, he is but even now gone hence:\n\tHere was he merry, hearing of a song.\n\nDUKE SENIOR\tIf he, compact of jars, grow musical,\n\tWe shall have shortly discord in the spheres.\n\tGo, seek him: tell him I would speak with him.\n\n\t[Enter JAQUES]\n\nFirst Lord\tHe saves my labour by his own approach.\n\nDUKE SENIOR\tWhy, how now, monsieur! what a life is this,\n\tThat your poor friends must woo your company?\n\tWhat, you look merrily!\n\nJAQUES\tA fool, a fool! I met a fool i' the forest,\n\tA motley fool; a miserable world!\n\tAs I do live by food, I met a fool\n\tWho laid him down and bask'd him in the sun,\n\tAnd rail'd on Lady Fortune in good terms,\n\tIn good set terms and yet a motley fool.\n\t'Good morrow, fool,' quoth I. 'No, sir,' quoth he,\n\t'Call me not fool till heaven hath sent me fortune:'\n\tAnd then he drew a dial from his poke,\n\tAnd, looking on it with lack-lustre eye,\n\tSays very wisely, 'It is ten o'clock:\n\tThus we may see,' quoth he, 'how the world wags:\n\t'Tis but an hour ago since it was nine,\n\tAnd after one hour more 'twill be eleven;\n\tAnd so, from hour to hour, we ripe and ripe,\n\tAnd then, from hour to hour, we rot and rot;\n\tAnd thereby hangs a tale.' When I did hear\n\tThe motley fool thus moral on the time,\n\tMy lungs began to crow like chanticleer,\n\tThat fools should be so deep-contemplative,\n\tAnd I did laugh sans intermission\n\tAn hour by his dial. O noble fool!\n\tA worthy fool! Motley's the only wear.\n\nDUKE SENIOR\tWhat fool is this?\n\nJAQUES\tO worthy fool! One that hath been a courtier,\n\tAnd says, if ladies be but young and fair,\n\tThey have the gift to know it: and in his brain,\n\tWhich is as dry as the remainder biscuit\n\tAfter a voyage, he hath strange places cramm'd\n\tWith observation, the which he vents\n\tIn mangled forms. O that I were a fool!\n\tI am ambitious for a motley coat.\n\nDUKE SENIOR\tThou shalt have one.\n\nJAQUES\tIt is my only suit;\n\tProvided that you weed your better judgments\n\tOf all opinion that grows rank in them\n\tThat I am wise. I must have liberty\n\tWithal, as large a charter as the wind,\n\tTo blow on whom I please; for so fools have;\n\tAnd they that are most galled with my folly,\n\tThey most must laugh. And why, sir, must they so?\n\tThe 'why' is plain as way to parish church:\n\tHe that a fool doth very wisely hit\n\tDoth very foolishly, although he smart,\n\tNot to seem senseless of the bob: if not,\n\tThe wise man's folly is anatomized\n\tEven by the squandering glances of the fool.\n\tInvest me in my motley; give me leave\n\tTo speak my mind, and I will through and through\n\tCleanse the foul body of the infected world,\n\tIf they will patiently receive my medicine.\n\nDUKE SENIOR\tFie on thee! I can tell what thou wouldst do.\n\nJAQUES\tWhat, for a counter, would I do but good?\n\nDUKE SENIOR\tMost mischievous foul sin, in chiding sin:\n\tFor thou thyself hast been a libertine,\n\tAs sensual as the brutish sting itself;\n\tAnd all the embossed sores and headed evils,\n\tThat thou with licence of free foot hast caught,\n\tWouldst thou disgorge into the general world.\n\nJAQUES\tWhy, who cries out on pride,\n\tThat can therein tax any private party?\n\tDoth it not flow as hugely as the sea,\n\tTill that the weary very means do ebb?\n\tWhat woman in the city do I name,\n\tWhen that I say the city-woman bears\n\tThe cost of princes on unworthy shoulders?\n\tWho can come in and say that I mean her,\n\tWhen such a one as she such is her neighbour?\n\tOr what is he of basest function\n\tThat says his bravery is not of my cost,\n\tThinking that I mean him, but therein suits\n\tHis folly to the mettle of my speech?\n\tThere then; how then? what then? Let me see wherein\n\tMy tongue hath wrong'd him: if it do him right,\n\tThen he hath wrong'd himself; if he be free,\n\tWhy then my taxing like a wild-goose flies,\n\tUnclaim'd of any man. But who comes here?\n\n\t[Enter ORLANDO, with his sword drawn]\n\nORLANDO\tForbear, and eat no more.\n\nJAQUES\tWhy, I have eat none yet.\n\nORLANDO\tNor shalt not, till necessity be served.\n\nJAQUES\tOf what kind should this cock come of?\n\nDUKE SENIOR\tArt thou thus bolden'd, man, by thy distress,\n\tOr else a rude despiser of good manners,\n\tThat in civility thou seem'st so empty?\n\nORLANDO\tYou touch'd my vein at first: the thorny point\n\tOf bare distress hath ta'en from me the show\n\tOf smooth civility: yet am I inland bred\n\tAnd know some nurture. But forbear, I say:\n\tHe dies that touches any of this fruit\n\tTill I and my affairs are answered.\n\nJAQUES\tAn you will not be answered with reason, I must die.\n\nDUKE SENIOR\tWhat would you have? Your gentleness shall force\n\tMore than your force move us to gentleness.\n\nORLANDO\tI almost die for food; and let me have it.\n\nDUKE SENIOR\tSit down and feed, and welcome to our table.\n\nORLANDO\tSpeak you so gently? Pardon me, I pray you:\n\tI thought that all things had been savage here;\n\tAnd therefore put I on the countenance\n\tOf stern commandment. But whate'er you are\n\tThat in this desert inaccessible,\n\tUnder the shade of melancholy boughs,\n\tLose and neglect the creeping hours of time\n\tIf ever you have look'd on better days,\n\tIf ever been where bells have knoll'd to church,\n\tIf ever sat at any good man's feast,\n\tIf ever from your eyelids wiped a tear\n\tAnd know what 'tis to pity and be pitied,\n\tLet gentleness my strong enforcement be:\n\tIn the which hope I blush, and hide my sword.\n\nDUKE SENIOR\tTrue is it that we have seen better days,\n\tAnd have with holy bell been knoll'd to church\n\tAnd sat at good men's feasts and wiped our eyes\n\tOf drops that sacred pity hath engender'd:\n\tAnd therefore sit you down in gentleness\n\tAnd take upon command what help we have\n\tThat to your wanting may be minister'd.\n\nORLANDO\tThen but forbear your food a little while,\n\tWhiles, like a doe, I go to find my fawn\n\tAnd give it food. There is an old poor man,\n\tWho after me hath many a weary step\n\tLimp'd in pure love: till he be first sufficed,\n\tOppress'd with two weak evils, age and hunger,\n\tI will not touch a bit.\n\nDUKE SENIOR\tGo find him out,\n\tAnd we will nothing waste till you return.\n\nORLANDO\tI thank ye; and be blest for your good comfort!\n\n\t[Exit]\n\nDUKE SENIOR\tThou seest we are not all alone unhappy:\n\tThis wide and universal theatre\n\tPresents more woeful pageants than the scene\n\tWherein we play in.\n\nJAQUES\tAll the world's a stage,\n\tAnd all the men and women merely players:\n\tThey have their exits and their entrances;\n\tAnd one man in his time plays many parts,\n\tHis acts being seven ages. At first the infant,\n\tMewling and puking in the nurse's arms.\n\tAnd then the whining school-boy, with his satchel\n\tAnd shining morning face, creeping like snail\n\tUnwillingly to school. And then the lover,\n\tSighing like furnace, with a woeful ballad\n\tMade to his mistress' eyebrow. Then a soldier,\n\tFull of strange oaths and bearded like the pard,\n\tJealous in honour, sudden and quick in quarrel,\n\tSeeking the bubble reputation\n\tEven in the cannon's mouth. And then the justice,\n\tIn fair round belly with good capon lined,\n\tWith eyes severe and beard of formal cut,\n\tFull of wise saws and modern instances;\n\tAnd so he plays his part. The sixth age shifts\n\tInto the lean and slipper'd pantaloon,\n\tWith spectacles on nose and pouch on side,\n\tHis youthful hose, well saved, a world too wide\n\tFor his shrunk shank; and his big manly voice,\n\tTurning again toward childish treble, pipes\n\tAnd whistles in his sound. Last scene of all,\n\tThat ends this strange eventful history,\n\tIs second childishness and mere oblivion,\n\tSans teeth, sans eyes, sans taste, sans everything.\n\n\t[Re-enter ORLANDO, with ADAM]\n\nDUKE SENIOR\tWelcome. Set down your venerable burthen,\n\tAnd let him feed.\n\nORLANDO\tI thank you most for him.\n\nADAM\tSo had you need:\n\tI scarce can speak to thank you for myself.\n\nDUKE SENIOR\tWelcome; fall to: I will not trouble you\n\tAs yet, to question you about your fortunes.\n\tGive us some music; and, good cousin, sing.\n\t\n\tSONG.\nAMIENS\tBlow, blow, thou winter wind.\n\tThou art not so unkind\n\tAs man's ingratitude;\n\tThy tooth is not so keen,\n\tBecause thou art not seen,\n\tAlthough thy breath be rude.\n\tHeigh-ho! sing, heigh-ho! unto the green holly:\n\tMost friendship is feigning, most loving mere folly:\n\tThen, heigh-ho, the holly!\n\tThis life is most jolly.\n\tFreeze, freeze, thou bitter sky,\n\tThat dost not bite so nigh\n\tAs benefits forgot:\n\tThough thou the waters warp,\n\tThy sting is not so sharp\n\tAs friend remember'd not.\n\tHeigh-ho! sing, &c.\n\nDUKE SENIOR\tIf that you were the good Sir Rowland's son,\n\tAs you have whisper'd faithfully you were,\n\tAnd as mine eye doth his effigies witness\n\tMost truly limn'd and living in your face,\n\tBe truly welcome hither: I am the duke\n\tThat loved your father: the residue of your fortune,\n\tGo to my cave and tell me. Good old man,\n\tThou art right welcome as thy master is.\n\tSupport him by the arm. Give me your hand,\n\tAnd let me all your fortunes understand.\n\n\t[Exeunt]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT III\n\n\n\nSCENE I\tA room in the palace.\n\n\n\t[Enter DUKE FREDERICK, Lords, and OLIVER]\n\nDUKE FREDERICK\tNot see him since? Sir, sir, that cannot be:\n\tBut were I not the better part made mercy,\n\tI should not seek an absent argument\n\tOf my revenge, thou present. But look to it:\n\tFind out thy brother, wheresoe'er he is;\n\tSeek him with candle; bring him dead or living\n\tWithin this twelvemonth, or turn thou no more\n\tTo seek a living in our territory.\n\tThy lands and all things that thou dost call thine\n\tWorth seizure do we seize into our hands,\n\tTill thou canst quit thee by thy brothers mouth\n\tOf what we think against thee.\n\nOLIVER\tO that your highness knew my heart in this!\n\tI never loved my brother in my life.\n\nDUKE FREDERICK\tMore villain thou. Well, push him out of doors;\n\tAnd let my officers of such a nature\n\tMake an extent upon his house and lands:\n\tDo this expediently and turn him going.\n\n\t[Exeunt]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT III\n\n\n\nSCENE II\tThe forest.\n\n\n\t[Enter ORLANDO, with a paper]\n\nORLANDO\tHang there, my verse, in witness of my love:\n\tAnd thou, thrice-crowned queen of night, survey\n\tWith thy chaste eye, from thy pale sphere above,\n\tThy huntress' name that my full life doth sway.\n\tO Rosalind! these trees shall be my books\n\tAnd in their barks my thoughts I'll character;\n\tThat every eye which in this forest looks\n\tShall see thy virtue witness'd every where.\n\tRun, run, Orlando; carve on every tree\n\tThe fair, the chaste and unexpressive she.\n\n\t[Exit]\n\n\t[Enter CORIN and TOUCHSTONE]\n\nCORIN\tAnd how like you this shepherd's life, Master Touchstone?\n\nTOUCHSTONE\tTruly, shepherd, in respect of itself, it is a good\n\tlife, but in respect that it is a shepherd's life,\n\tit is naught. In respect that it is solitary, I\n\tlike it very well; but in respect that it is\n\tprivate, it is a very vile life. Now, in respect it\n\tis in the fields, it pleaseth me well; but in\n\trespect it is not in the court, it is tedious. As\n\tis it a spare life, look you, it fits my humour well;\n\tbut as there is no more plenty in it, it goes much\n\tagainst my stomach. Hast any philosophy in thee, shepherd?\n\nCORIN\tNo more but that I know the more one sickens the\n\tworse at ease he is; and that he that wants money,\n\tmeans and content is without three good friends;\n\tthat the property of rain is to wet and fire to\n\tburn; that good pasture makes fat sheep, and that a\n\tgreat cause of the night is lack of the sun; that\n\the that hath learned no wit by nature nor art may\n\tcomplain of good breeding or comes of a very dull kindred.\n\nTOUCHSTONE\tSuch a one is a natural philosopher. Wast ever in\n\tcourt, shepherd?\n\nCORIN\tNo, truly.\n\nTOUCHSTONE\tThen thou art damned.\n\nCORIN\tNay, I hope.\n\nTOUCHSTONE\tTruly, thou art damned like an ill-roasted egg, all\n\ton one side.\n\nCORIN\tFor not being at court? Your reason.\n\nTOUCHSTONE\tWhy, if thou never wast at court, thou never sawest\n\tgood manners; if thou never sawest good manners,\n\tthen thy manners must be wicked; and wickedness is\n\tsin, and sin is damnation. Thou art in a parlous\n\tstate, shepherd.\n\nCORIN\tNot a whit, Touchstone: those that are good manners\n\tat the court are as ridiculous in the country as the\n\tbehavior of the country is most mockable at the\n\tcourt. You told me you salute not at the court, but\n\tyou kiss your hands: that courtesy would be\n\tuncleanly, if courtiers were shepherds.\n\nTOUCHSTONE\tInstance, briefly; come, instance.\n\nCORIN\tWhy, we are still handling our ewes, and their\n\tfells, you know, are greasy.\n\nTOUCHSTONE\tWhy, do not your courtier's hands sweat? and is not\n\tthe grease of a mutton as wholesome as the sweat of\n\ta man? Shallow, shallow. A better instance, I say; come.\n\nCORIN\tBesides, our hands are hard.\n\nTOUCHSTONE\tYour lips will feel them the sooner. Shallow again.\n\tA more sounder instance, come.\n\nCORIN\tAnd they are often tarred over with the surgery of\n\tour sheep: and would you have us kiss tar? The\n\tcourtier's hands are perfumed with civet.\n\nTOUCHSTONE\tMost shallow man! thou worms-meat, in respect of a\n\tgood piece of flesh indeed! Learn of the wise, and\n\tperpend: civet is of a baser birth than tar, the\n\tvery uncleanly flux of a cat. Mend the instance, shepherd.\n\nCORIN\tYou have too courtly a wit for me: I'll rest.\n\nTOUCHSTONE\tWilt thou rest damned? God help thee, shallow man!\n\tGod make incision in thee! thou art raw.\n\nCORIN\tSir, I am a true labourer: I earn that I eat, get\n\tthat I wear, owe no man hate, envy no man's\n\thappiness, glad of other men's good, content with my\n\tharm, and the greatest of my pride is to see my ewes\n\tgraze and my lambs suck.\n\nTOUCHSTONE\tThat is another simple sin in you, to bring the ewes\n\tand the rams together and to offer to get your\n\tliving by the copulation of cattle; to be bawd to a\n\tbell-wether, and to betray a she-lamb of a\n\ttwelvemonth to a crooked-pated, old, cuckoldly ram,\n\tout of all reasonable match. If thou beest not\n\tdamned for this, the devil himself will have no\n\tshepherds; I cannot see else how thou shouldst\n\t'scape.\n\nCORIN\tHere comes young Master Ganymede, my new mistress's brother.\n\n\t[Enter ROSALIND, with a paper, reading]\n\nROSALIND\t     From the east to western Ind,\n\tNo jewel is like Rosalind.\n\tHer worth, being mounted on the wind,\n\tThrough all the world bears Rosalind.\n\tAll the pictures fairest lined\n\tAre but black to Rosalind.\n\tLet no fair be kept in mind\n\tBut the fair of Rosalind.\n\nTOUCHSTONE\tI'll rhyme you so eight years together, dinners and\n\tsuppers and sleeping-hours excepted: it is the\n\tright butter-women's rank to market.\n\nROSALIND\tOut, fool!\n\nTOUCHSTONE\tFor a taste:\n\tIf a hart do lack a hind,\n\tLet him seek out Rosalind.\n\tIf the cat will after kind,\n\tSo be sure will Rosalind.\n\tWinter garments must be lined,\n\tSo must slender Rosalind.\n\tThey that reap must sheaf and bind;\n\tThen to cart with Rosalind.\n\tSweetest nut hath sourest rind,\n\tSuch a nut is Rosalind.\n\tHe that sweetest rose will find\n\tMust find love's prick and Rosalind.\n\tThis is the very false gallop of verses: why do you\n\tinfect yourself with them?\n\nROSALIND\tPeace, you dull fool! I found them on a tree.\n\nTOUCHSTONE\tTruly, the tree yields bad fruit.\n\nROSALIND\tI'll graff it with you, and then I shall graff it\n\twith a medlar: then it will be the earliest fruit\n\ti' the country; for you'll be rotten ere you be half\n\tripe, and that's the right virtue of the medlar.\n\nTOUCHSTONE\tYou have said; but whether wisely or no, let the\n\tforest judge.\n\n\t[Enter CELIA, with a writing]\n\nROSALIND\tPeace! Here comes my sister, reading: stand aside.\n\nCELIA\t[Reads]\n\n\tWhy should this a desert be?\n\tFor it is unpeopled? No:\n\tTongues I'll hang on every tree,\n\tThat shall civil sayings show:\n\tSome, how brief the life of man\n\tRuns his erring pilgrimage,\n\tThat the stretching of a span\n\tBuckles in his sum of age;\n\tSome, of violated vows\n\t'Twixt the souls of friend and friend:\n\tBut upon the fairest boughs,\n\tOr at every sentence end,\n\tWill I Rosalinda write,\n\tTeaching all that read to know\n\tThe quintessence of every sprite\n\tHeaven would in little show.\n\tTherefore Heaven Nature charged\n\tThat one body should be fill'd\n\tWith all graces wide-enlarged:\n\tNature presently distill'd\n\tHelen's cheek, but not her heart,\n\tCleopatra's majesty,\n\tAtalanta's better part,\n\tSad Lucretia's modesty.\n\tThus Rosalind of many parts\n\tBy heavenly synod was devised,\n\tOf many faces, eyes and hearts,\n\tTo have the touches dearest prized.\n\tHeaven would that she these gifts should have,\n\tAnd I to live and die her slave.\n\nROSALIND\tO most gentle pulpiter! what tedious homily of love\n\thave you wearied your parishioners withal, and never\n\tcried 'Have patience, good people!'\n\nCELIA\tHow now! back, friends! Shepherd, go off a little.\n\tGo with him, sirrah.\n\nTOUCHSTONE\tCome, shepherd, let us make an honourable retreat;\n\tthough not with bag and baggage, yet with scrip and scrippage.\n\n\t[Exeunt CORIN and TOUCHSTONE]\n\nCELIA\tDidst thou hear these verses?\n\nROSALIND\tO, yes, I heard them all, and more too; for some of\n\tthem had in them more feet than the verses would bear.\n\nCELIA\tThat's no matter: the feet might bear the verses.\n\nROSALIND\tAy, but the feet were lame and could not bear\n\tthemselves without the verse and therefore stood\n\tlamely in the verse.\n\nCELIA\tBut didst thou hear without wondering how thy name\n\tshould be hanged and carved upon these trees?\n\nROSALIND\tI was seven of the nine days out of the wonder\n\tbefore you came; for look here what I found on a\n\tpalm-tree. I was never so be-rhymed since\n\tPythagoras' time, that I was an Irish rat, which I\n\tcan hardly remember.\n\nCELIA\tTrow you who hath done this?\n\nROSALIND\tIs it a man?\n\nCELIA\tAnd a chain, that you once wore, about his neck.\n\tChange you colour?\n\nROSALIND\tI prithee, who?\n\nCELIA\tO Lord, Lord! it is a hard matter for friends to\n\tmeet; but mountains may be removed with earthquakes\n\tand so encounter.\n\nROSALIND\tNay, but who is it?\n\nCELIA\tIs it possible?\n\nROSALIND\tNay, I prithee now with most petitionary vehemence,\n\ttell me who it is.\n\nCELIA\tO wonderful, wonderful, and most wonderful\n\twonderful! and yet again wonderful, and after that,\n\tout of all hooping!\n\nROSALIND\tGood my complexion! dost thou think, though I am\n\tcaparisoned like a man, I have a doublet and hose in\n\tmy disposition? One inch of delay more is a\n\tSouth-sea of discovery; I prithee, tell me who is it\n\tquickly, and speak apace. I would thou couldst\n\tstammer, that thou mightst pour this concealed man\n\tout of thy mouth, as wine comes out of a narrow-\n\tmouthed bottle, either too much at once, or none at\n\tall. I prithee, take the cork out of thy mouth that\n\tmay drink thy tidings.\n\nCELIA\tSo you may put a man in your belly.\n\nROSALIND\tIs he of God's making? What manner of man? Is his\n\thead worth a hat, or his chin worth a beard?\n\nCELIA\tNay, he hath but a little beard.\n\nROSALIND\tWhy, God will send more, if the man will be\n\tthankful: let me stay the growth of his beard, if\n\tthou delay me not the knowledge of his chin.\n\nCELIA\tIt is young Orlando, that tripped up the wrestler's\n\theels and your heart both in an instant.\n\nROSALIND\tNay, but the devil take mocking: speak, sad brow and\n\ttrue maid.\n\nCELIA\tI' faith, coz, 'tis he.\n\nROSALIND\tOrlando?\n\nCELIA\tOrlando.\n\nROSALIND\tAlas the day! what shall I do with my doublet and\n\those? What did he when thou sawest him? What said\n\the? How looked he? Wherein went he? What makes\n\thim here? Did he ask for me? Where remains he?\n\tHow parted he with thee? and when shalt thou see\n\thim again? Answer me in one word.\n\nCELIA\tYou must borrow me Gargantua's mouth first: 'tis a\n\tword too great for any mouth of this age's size. To\n\tsay ay and no to these particulars is more than to\n\tanswer in a catechism.\n\nROSALIND\tBut doth he know that I am in this forest and in\n\tman's apparel? Looks he as freshly as he did the\n\tday he wrestled?\n\nCELIA\tIt is as easy to count atomies as to resolve the\n\tpropositions of a lover; but take a taste of my\n\tfinding him, and relish it with good observance.\n\tI found him under a tree, like a dropped acorn.\n\nROSALIND\tIt may well be called Jove's tree, when it drops\n\tforth such fruit.\n\nCELIA\tGive me audience, good madam.\n\nROSALIND\tProceed.\n\nCELIA\tThere lay he, stretched along, like a wounded knight.\n\nROSALIND\tThough it be pity to see such a sight, it well\n\tbecomes the ground.\n\nCELIA\tCry 'holla' to thy tongue, I prithee; it curvets\n\tunseasonably. He was furnished like a hunter.\n\nROSALIND\tO, ominous! he comes to kill my heart.\n\nCELIA\tI would sing my song without a burden: thou bringest\n\tme out of tune.\n\nROSALIND\tDo you not know I am a woman? when I think, I must\n\tspeak. Sweet, say on.\n\nCELIA\tYou bring me out. Soft! comes he not here?\n\n\t[Enter ORLANDO and JAQUES]\n\nROSALIND\t'Tis he: slink by, and note him.\n\nJAQUES\tI thank you for your company; but, good faith, I had\n\tas lief have been myself alone.\n\nORLANDO\tAnd so had I; but yet, for fashion sake, I thank you\n\ttoo for your society.\n\nJAQUES\tGod be wi' you: let's meet as little as we can.\n\nORLANDO\tI do desire we may be better strangers.\n\nJAQUES\tI pray you, mar no more trees with writing\n\tlove-songs in their barks.\n\nORLANDO\tI pray you, mar no more of my verses with reading\n\tthem ill-favouredly.\n\nJAQUES\tRosalind is your love's name?\n\nORLANDO\tYes, just.\n\nJAQUES\tI do not like her name.\n\nORLANDO\tThere was no thought of pleasing you when she was\n\tchristened.\n\nJAQUES\tWhat stature is she of?\n\nORLANDO\tJust as high as my heart.\n\nJAQUES\tYou are full of pretty answers. Have you not been\n\tacquainted with goldsmiths' wives, and conned them\n\tout of rings?\n\nORLANDO\tNot so; but I answer you right painted cloth, from\n\twhence you have studied your questions.\n\nJAQUES\tYou have a nimble wit: I think 'twas made of\n\tAtalanta's heels. Will you sit down with me? and\n\twe two will rail against our mistress the world and\n\tall our misery.\n\nORLANDO\tI will chide no breather in the world but myself,\n\tagainst whom I know most faults.\n\nJAQUES\tThe worst fault you have is to be in love.\n\nORLANDO\t'Tis a fault I will not change for your best virtue.\n\tI am weary of you.\n\nJAQUES\tBy my troth, I was seeking for a fool when I found\n\tyou.\n\nORLANDO\tHe is drowned in the brook: look but in, and you\n\tshall see him.\n\nJAQUES\tThere I shall see mine own figure.\n\nORLANDO\tWhich I take to be either a fool or a cipher.\n\nJAQUES\tI'll tarry no longer with you: farewell, good\n\tSignior Love.\n\nORLANDO\tI am glad of your departure: adieu, good Monsieur\n\tMelancholy.\n\n\t[Exit JAQUES]\n\nROSALIND\t[Aside to CELIA]  I will speak to him, like a saucy\n\tlackey and under that habit play the knave with him.\n\tDo you hear, forester?\n\nORLANDO\tVery well: what would you?\n\nROSALIND\tI pray you, what is't o'clock?\n\nORLANDO\tYou should ask me what time o' day: there's no clock\n\tin the forest.\n\nROSALIND\tThen there is no true lover in the forest; else\n\tsighing every minute and groaning every hour would\n\tdetect the lazy foot of Time as well as a clock.\n\nORLANDO\tAnd why not the swift foot of Time? had not that\n\tbeen as proper?\n\nROSALIND\tBy no means, sir: Time travels in divers paces with\n\tdivers persons. I'll tell you who Time ambles\n\twithal, who Time trots withal, who Time gallops\n\twithal and who he stands still withal.\n\nORLANDO\tI prithee, who doth he trot withal?\n\nROSALIND\tMarry, he trots hard with a young maid between the\n\tcontract of her marriage and the day it is\n\tsolemnized: if the interim be but a se'nnight,\n\tTime's pace is so hard that it seems the length of\n\tseven year.\n\nORLANDO\tWho ambles Time withal?\n\nROSALIND\tWith a priest that lacks Latin and a rich man that\n\thath not the gout, for the one sleeps easily because\n\the cannot study, and the other lives merrily because\n\the feels no pain, the one lacking the burden of lean\n\tand wasteful learning, the other knowing no burden\n\tof heavy tedious penury; these Time ambles withal.\n\nORLANDO\tWho doth he gallop withal?\n\nROSALIND\tWith a thief to the gallows, for though he go as\n\tsoftly as foot can fall, he thinks himself too soon there.\n\nORLANDO\tWho stays it still withal?\n\nROSALIND\tWith lawyers in the vacation, for they sleep between\n\tterm and term and then they perceive not how Time moves.\n\nORLANDO\tWhere dwell you, pretty youth?\n\nROSALIND\tWith this shepherdess, my sister; here in the\n\tskirts of the forest, like fringe upon a petticoat.\n\nORLANDO\tAre you native of this place?\n\nROSALIND\tAs the cony that you see dwell where she is kindled.\n\nORLANDO\tYour accent is something finer than you could\n\tpurchase in so removed a dwelling.\n\nROSALIND\tI have been told so of many: but indeed an old\n\treligious uncle of mine taught me to speak, who was\n\tin his youth an inland man; one that knew courtship\n\ttoo well, for there he fell in love. I have heard\n\thim read many lectures against it, and I thank God\n\tI am not a woman, to be touched with so many\n\tgiddy offences as he hath generally taxed their\n\twhole sex withal.\n\nORLANDO\tCan you remember any of the principal evils that he\n\tlaid to the charge of women?\n\nROSALIND\tThere were none principal; they were all like one\n\tanother as half-pence are, every one fault seeming\n\tmonstrous till his fellow fault came to match it.\n\nORLANDO\tI prithee, recount some of them.\n\nROSALIND\tNo, I will not cast away my physic but on those that\n\tare sick. There is a man haunts the forest, that\n\tabuses our young plants with carving 'Rosalind' on\n\ttheir barks; hangs odes upon hawthorns and elegies\n\ton brambles, all, forsooth, deifying the name of\n\tRosalind: if I could meet that fancy-monger I would\n\tgive him some good counsel, for he seems to have the\n\tquotidian of love upon him.\n\nORLANDO\tI am he that is so love-shaked: I pray you tell me\n\tyour remedy.\n\nROSALIND\tThere is none of my uncle's marks upon you: he\n\ttaught me how to know a man in love; in which cage\n\tof rushes I am sure you are not prisoner.\n\nORLANDO\tWhat were his marks?\n\nROSALIND\tA lean cheek, which you have not, a blue eye and\n\tsunken, which you have not, an unquestionable\n\tspirit, which you have not, a beard neglected,\n\twhich you have not; but I pardon you for that, for\n\tsimply your having in beard is a younger brother's\n\trevenue: then your hose should be ungartered, your\n\tbonnet unbanded, your sleeve unbuttoned, your shoe\n\tuntied and every thing about you demonstrating a\n\tcareless desolation; but you are no such man; you\n\tare rather point-device in your accoutrements as\n\tloving yourself than seeming the lover of any other.\n\nORLANDO\tFair youth, I would I could make thee believe I love.\n\nROSALIND\tMe believe it! you may as soon make her that you\n\tlove believe it; which, I warrant, she is apter to\n\tdo than to confess she does: that is one of the\n\tpoints in the which women still give the lie to\n\ttheir consciences. But, in good sooth, are you he\n\tthat hangs the verses on the trees, wherein Rosalind\n\tis so admired?\n\nORLANDO\tI swear to thee, youth, by the white hand of\n\tRosalind, I am that he, that unfortunate he.\n\nROSALIND\tBut are you so much in love as your rhymes speak?\n\nORLANDO\tNeither rhyme nor reason can express how much.\n\nROSALIND\tLove is merely a madness, and, I tell you, deserves\n\tas well a dark house and a whip as madmen do: and\n\tthe reason why they are not so punished and cured\n\tis, that the lunacy is so ordinary that the whippers\n\tare in love too. Yet I profess curing it by counsel.\n\nORLANDO\tDid you ever cure any so?\n\nROSALIND\tYes, one, and in this manner. He was to imagine me\n\this love, his mistress; and I set him every day to\n\twoo me: at which time would I, being but a moonish\n\tyouth, grieve, be effeminate, changeable, longing\n\tand liking, proud, fantastical, apish, shallow,\n\tinconstant, full of tears, full of smiles, for every\n\tpassion something and for no passion truly any\n\tthing, as boys and women are for the most part\n\tcattle of this colour; would now like him, now loathe\n\thim; then entertain him, then forswear him; now weep\n\tfor him, then spit at him; that I drave my suitor\n\tfrom his mad humour of love to a living humour of\n\tmadness; which was, to forswear the full stream of\n\tthe world, and to live in a nook merely monastic.\n\tAnd thus I cured him; and this way will I take upon\n\tme to wash your liver as clean as a sound sheep's\n\theart, that there shall not be one spot of love in't.\n\nORLANDO\tI would not be cured, youth.\n\nROSALIND\tI would cure you, if you would but call me Rosalind\n\tand come every day to my cote and woo me.\n\nORLANDO\tNow, by the faith of my love, I will: tell me\n\twhere it is.\n\nROSALIND\tGo with me to it and I'll show it you and by the way\n\tyou shall tell me where in the forest you live.\n\tWill you go?\n\nORLANDO\tWith all my heart, good youth.\n\nROSALIND\tNay you must call me Rosalind. Come, sister, will you go?\n\n\t[Exeunt]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT III\n\n\n\nSCENE III\tThe forest.\n\n\n\t[Enter TOUCHSTONE and AUDREY; JAQUES behind]\n\nTOUCHSTONE\tCome apace, good Audrey: I will fetch up your\n\tgoats, Audrey. And how, Audrey? am I the man yet?\n\tdoth my simple feature content you?\n\nAUDREY\tYour features! Lord warrant us! what features!\n\nTOUCHSTONE\tI am here with thee and thy goats, as the most\n\tcapricious poet, honest Ovid, was among the Goths.\n\nJAQUES\t[Aside]  O knowledge ill-inhabited, worse than Jove\n\tin a thatched house!\n\nTOUCHSTONE\tWhen a man's verses cannot be understood, nor a\n\tman's good wit seconded with the forward child\n\tUnderstanding, it strikes a man more dead than a\n\tgreat reckoning in a little room. Truly, I would\n\tthe gods had made thee poetical.\n\nAUDREY\tI do not know what 'poetical' is: is it honest in\n\tdeed and word? is it a true thing?\n\nTOUCHSTONE\tNo, truly; for the truest poetry is the most\n\tfeigning; and lovers are given to poetry, and what\n\tthey swear in poetry may be said as lovers they do feign.\n\nAUDREY\tDo you wish then that the gods had made me poetical?\n\nTOUCHSTONE\tI do, truly; for thou swearest to me thou art\n\thonest: now, if thou wert a poet, I might have some\n\thope thou didst feign.\n\nAUDREY\tWould you not have me honest?\n\nTOUCHSTONE\tNo, truly, unless thou wert hard-favoured; for\n\thonesty coupled to beauty is to have honey a sauce to sugar.\n\nJAQUES\t[Aside]  A material fool!\n\nAUDREY\t Well, I am not fair; and therefore I pray the gods\n\tmake me honest.\n\nTOUCHSTONE\tTruly, and to cast away honesty upon a foul slut\n\twere to put good meat into an unclean dish.\n\nAUDREY\tI am not a slut, though I thank the gods I am foul.\n\nTOUCHSTONE\tWell, praised be the gods for thy foulness!\n\tsluttishness may come hereafter. But be it as it may\n\tbe, I will marry thee, and to that end I have been\n\twith Sir Oliver Martext, the vicar of the next\n\tvillage, who hath promised to meet me in this place\n\tof the forest and to couple us.\n\nJAQUES\t[Aside]  I would fain see this meeting.\n\nAUDREY\tWell, the gods give us joy!\n\nTOUCHSTONE\tAmen. A man may, if he were of a fearful heart,\n\tstagger in this attempt; for here we have no temple\n\tbut the wood, no assembly but horn-beasts. But what\n\tthough? Courage! As horns are odious, they are\n\tnecessary. It is said, 'many a man knows no end of\n\this goods:' right; many a man has good horns, and\n\tknows no end of them. Well, that is the dowry of\n\this wife; 'tis none of his own getting. Horns?\n\tEven so. Poor men alone? No, no; the noblest deer\n\thath them as huge as the rascal. Is the single man\n\ttherefore blessed? No: as a walled town is more\n\tworthier than a village, so is the forehead of a\n\tmarried man more honourable than the bare brow of a\n\tbachelor; and by how much defence is better than no\n\tskill, by so much is a horn more precious than to\n\twant. Here comes Sir Oliver.\n\n\t[Enter SIR OLIVER MARTEXT]\n\n\tSir Oliver Martext, you are well met: will you\n\tdispatch us here under this tree, or shall we go\n\twith you to your chapel?\n\nSIR OLIVER MARTEXT\tIs there none here to give the woman?\n\nTOUCHSTONE\tI will not take her on gift of any man.\n\nSIR OLIVER MARTEXT\tTruly, she must be given, or the marriage is not lawful.\n\nJAQUES\t[Advancing]\n\n\tProceed, proceed\tI'll give her.\n\nTOUCHSTONE\tGood even, good Master What-ye-call't: how do you,\n\tsir? You are very well met: God 'ild you for your\n\tlast company: I am very glad to see you: even a\n\ttoy in hand here, sir: nay, pray be covered.\n\nJAQUES\tWill you be married, motley?\n\nTOUCHSTONE\tAs the ox hath his bow, sir, the horse his curb and\n\tthe falcon her bells, so man hath his desires; and\n\tas pigeons bill, so wedlock would be nibbling.\n\nJAQUES\tAnd will you, being a man of your breeding, be\n\tmarried under a bush like a beggar? Get you to\n\tchurch, and have a good priest that can tell you\n\twhat marriage is: this fellow will but join you\n\ttogether as they join wainscot; then one of you will\n\tprove a shrunk panel and, like green timber, warp, warp.\n\nTOUCHSTONE\t[Aside]  I am not in the mind but I were better to be\n\tmarried of him than of another: for he is not like\n\tto marry me well; and not being well married, it\n\twill be a good excuse for me hereafter to leave my wife.\n\nJAQUES\tGo thou with me, and let me counsel thee.\n\nTOUCHSTONE\t'Come, sweet Audrey:\n\tWe must be married, or we must live in bawdry.\n\tFarewell, good Master Oliver: not,--\n\tO sweet Oliver,\n\tO brave Oliver,\n\tLeave me not behind thee: but,--\n\tWind away,\n\tBegone, I say,\n\tI will not to wedding with thee.\n\n\t[Exeunt JAQUES, TOUCHSTONE and AUDREY]\n\nSIR OLIVER MARTEXT\t'Tis no matter: ne'er a fantastical knave of them\n\tall shall flout me out of my calling.\n\n\t[Exit]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT III\n\n\n\nSCENE IV\tThe forest.\n\n\n\t[Enter ROSALIND and CELIA]\n\nROSALIND\tNever talk to me; I will weep.\n\nCELIA\tDo, I prithee; but yet have the grace to consider\n\tthat tears do not become a man.\n\nROSALIND\tBut have I not cause to weep?\n\nCELIA\tAs good cause as one would desire; therefore weep.\n\nROSALIND\tHis very hair is of the dissembling colour.\n\nCELIA\tSomething browner than Judas's marry, his kisses are\n\tJudas's own children.\n\nROSALIND\tI' faith, his hair is of a good colour.\n\nCELIA\tAn excellent colour: your chestnut was ever the only colour.\n\nROSALIND\tAnd his kissing is as full of sanctity as the touch\n\tof holy bread.\n\nCELIA\tHe hath bought a pair of cast lips of Diana: a nun\n\tof winter's sisterhood kisses not more religiously;\n\tthe very ice of chastity is in them.\n\nROSALIND\tBut why did he swear he would come this morning, and\n\tcomes not?\n\nCELIA\tNay, certainly, there is no truth in him.\n\nROSALIND\tDo you think so?\n\nCELIA\tYes; I think he is not a pick-purse nor a\n\thorse-stealer, but for his verity in love, I do\n\tthink him as concave as a covered goblet or a\n\tworm-eaten nut.\n\nROSALIND\tNot true in love?\n\nCELIA\tYes, when he is in; but I think he is not in.\n\nROSALIND\tYou have heard him swear downright he was.\n\nCELIA\t'Was' is not 'is:' besides, the oath of a lover is\n\tno stronger than the word of a tapster; they are\n\tboth the confirmer of false reckonings. He attends\n\there in the forest on the duke your father.\n\nROSALIND\tI met the duke yesterday and had much question with\n\thim: he asked me of what parentage I was; I told\n\thim, of as good as he; so he laughed and let me go.\n\tBut what talk we of fathers, when there is such a\n\tman as Orlando?\n\nCELIA\tO, that's a brave man! he writes brave verses,\n\tspeaks brave words, swears brave oaths and breaks\n\tthem bravely, quite traverse, athwart the heart of\n\this lover; as a puisny tilter, that spurs his horse\n\tbut on one side, breaks his staff like a noble\n\tgoose: but all's brave that youth mounts and folly\n\tguides. Who comes here?\n\n\t[Enter CORIN]\n\nCORIN\tMistress and master, you have oft inquired\n\tAfter the shepherd that complain'd of love,\n\tWho you saw sitting by me on the turf,\n\tPraising the proud disdainful shepherdess\n\tThat was his mistress.\n\nCELIA\tWell, and what of him?\n\nCORIN\tIf you will see a pageant truly play'd,\n\tBetween the pale complexion of true love\n\tAnd the red glow of scorn and proud disdain,\n\tGo hence a little and I shall conduct you,\n\tIf you will mark it.\n\nROSALIND\tO, come, let us remove:\n\tThe sight of lovers feedeth those in love.\n\tBring us to this sight, and you shall say\n\tI'll prove a busy actor in their play.\n\n\t[Exeunt]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT III\n\n\n\nSCENE V\tAnother part of the forest.\n\n\n\t[Enter SILVIUS and PHEBE]\n\nSILVIUS\tSweet Phebe, do not scorn me; do not, Phebe;\n\tSay that you love me not, but say not so\n\tIn bitterness. The common executioner,\n\tWhose heart the accustom'd sight of death makes hard,\n\tFalls not the axe upon the humbled neck\n\tBut first begs pardon: will you sterner be\n\tThan he that dies and lives by bloody drops?\n\n\t[Enter ROSALIND, CELIA, and CORIN, behind]\n\nPHEBE\tI would not be thy executioner:\n\tI fly thee, for I would not injure thee.\n\tThou tell'st me there is murder in mine eye:\n\t'Tis pretty, sure, and very probable,\n\tThat eyes, that are the frail'st and softest things,\n\tWho shut their coward gates on atomies,\n\tShould be call'd tyrants, butchers, murderers!\n\tNow I do frown on thee with all my heart;\n\tAnd if mine eyes can wound, now let them kill thee:\n\tNow counterfeit to swoon; why now fall down;\n\tOr if thou canst not, O, for shame, for shame,\n\tLie not, to say mine eyes are murderers!\n\tNow show the wound mine eye hath made in thee:\n\tScratch thee but with a pin, and there remains\n\tSome scar of it; lean but upon a rush,\n\tThe cicatrice and capable impressure\n\tThy palm some moment keeps; but now mine eyes,\n\tWhich I have darted at thee, hurt thee not,\n\tNor, I am sure, there is no force in eyes\n\tThat can do hurt.\n\nSILVIUS\t                  O dear Phebe,\n\tIf ever,--as that ever may be near,--\n\tYou meet in some fresh cheek the power of fancy,\n\tThen shall you know the wounds invisible\n\tThat love's keen arrows make.\n\nPHEBE\tBut till that time\n\tCome not thou near me: and when that time comes,\n\tAfflict me with thy mocks, pity me not;\n\tAs till that time I shall not pity thee.\n\nROSALIND\tAnd why, I pray you? Who might be your mother,\n\tThat you insult, exult, and all at once,\n\tOver the wretched? What though you have no beauty,--\n\tAs, by my faith, I see no more in you\n\tThan without candle may go dark to bed--\n\tMust you be therefore proud and pitiless?\n\tWhy, what means this? Why do you look on me?\n\tI see no more in you than in the ordinary\n\tOf nature's sale-work. 'Od's my little life,\n\tI think she means to tangle my eyes too!\n\tNo, faith, proud mistress, hope not after it:\n\t'Tis not your inky brows, your black silk hair,\n\tYour bugle eyeballs, nor your cheek of cream,\n\tThat can entame my spirits to your worship.\n\tYou foolish shepherd, wherefore do you follow her,\n\tLike foggy south puffing with wind and rain?\n\tYou are a thousand times a properer man\n\tThan she a woman: 'tis such fools as you\n\tThat makes the world full of ill-favour'd children:\n\t'Tis not her glass, but you, that flatters her;\n\tAnd out of you she sees herself more proper\n\tThan any of her lineaments can show her.\n\tBut, mistress, know yourself: down on your knees,\n\tAnd thank heaven, fasting, for a good man's love:\n\tFor I must tell you friendly in your ear,\n\tSell when you can: you are not for all markets:\n\tCry the man mercy; love him; take his offer:\n\tFoul is most foul, being foul to be a scoffer.\n\tSo take her to thee, shepherd: fare you well.\n\nPHEBE\tSweet youth, I pray you, chide a year together:\n\tI had rather hear you chide than this man woo.\n\nROSALIND\tHe's fallen in love with your foulness and she'll\n\tfall in love with my anger. If it be so, as fast as\n\tshe answers thee with frowning looks, I'll sauce her\n\twith bitter words. Why look you so upon me?\n\nPHEBE\tFor no ill will I bear you.\n\nROSALIND\tI pray you, do not fall in love with me,\n\tFor I am falser than vows made in wine:\n\tBesides, I like you not. If you will know my house,\n\t'Tis at the tuft of olives here hard by.\n\tWill you go, sister? Shepherd, ply her hard.\n\tCome, sister. Shepherdess, look on him better,\n\tAnd be not proud: though all the world could see,\n\tNone could be so abused in sight as he.\n\tCome, to our flock.\n\n\t[Exeunt ROSALIND, CELIA and CORIN]\n\nPHEBE\tDead Shepherd, now I find thy saw of might,\n\t'Who ever loved that loved not at first sight?'\n\nSILVIUS\tSweet Phebe,--\n\nPHEBE\t                  Ha, what say'st thou, Silvius?\n\nSILVIUS\tSweet Phebe, pity me.\n\nPHEBE\tWhy, I am sorry for thee, gentle Silvius.\n\nSILVIUS\tWherever sorrow is, relief would be:\n\tIf you do sorrow at my grief in love,\n\tBy giving love your sorrow and my grief\n\tWere both extermined.\n\nPHEBE\tThou hast my love: is not that neighbourly?\n\nSILVIUS\tI would have you.\n\nPHEBE\t                  Why, that were covetousness.\n\tSilvius, the time was that I hated thee,\n\tAnd yet it is not that I bear thee love;\n\tBut since that thou canst talk of love so well,\n\tThy company, which erst was irksome to me,\n\tI will endure, and I'll employ thee too:\n\tBut do not look for further recompense\n\tThan thine own gladness that thou art employ'd.\n\nSILVIUS\tSo holy and so perfect is my love,\n\tAnd I in such a poverty of grace,\n\tThat I shall think it a most plenteous crop\n\tTo glean the broken ears after the man\n\tThat the main harvest reaps: loose now and then\n\tA scatter'd smile, and that I'll live upon.\n\nPHEBE\tKnow'st now the youth that spoke to me erewhile?\n\nSILVIUS\tNot very well, but I have met him oft;\n\tAnd he hath bought the cottage and the bounds\n\tThat the old carlot once was master of.\n\nPHEBE\tThink not I love him, though I ask for him:\n\t'Tis but a peevish boy; yet he talks well;\n\tBut what care I for words? yet words do well\n\tWhen he that speaks them pleases those that hear.\n\tIt is a pretty youth: not very pretty:\n\tBut, sure, he's proud, and yet his pride becomes him:\n\tHe'll make a proper man: the best thing in him\n\tIs his complexion; and faster than his tongue\n\tDid make offence his eye did heal it up.\n\tHe is not very tall; yet for his years he's tall:\n\tHis leg is but so so; and yet 'tis well:\n\tThere was a pretty redness in his lip,\n\tA little riper and more lusty red\n\tThan that mix'd in his cheek; 'twas just the difference\n\tBetween the constant red and mingled damask.\n\tThere be some women, Silvius, had they mark'd him\n\tIn parcels as I did, would have gone near\n\tTo fall in love with him; but, for my part,\n\tI love him not nor hate him not; and yet\n\tI have more cause to hate him than to love him:\n\tFor what had he to do to chide at me?\n\tHe said mine eyes were black and my hair black:\n\tAnd, now I am remember'd, scorn'd at me:\n\tI marvel why I answer'd not again:\n\tBut that's all one; omittance is no quittance.\n\tI'll write to him a very taunting letter,\n\tAnd thou shalt bear it: wilt thou, Silvius?\n\nSILVIUS\tPhebe, with all my heart.\n\nPHEBE\tI'll write it straight;\n\tThe matter's in my head and in my heart:\n\tI will be bitter with him and passing short.\n\tGo with me, Silvius.\n\n\t[Exeunt]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT IV\n\n\n\nSCENE I\tThe forest.\n\n\n\t[Enter ROSALIND, CELIA, and JAQUES]\n\nJAQUES\tI prithee, pretty youth, let me be better acquainted\n\twith thee.\n\nROSALIND\tThey say you are a melancholy fellow.\n\nJAQUES\tI am so; I do love it better than laughing.\n\nROSALIND\tThose that are in extremity of either are abominable\n\tfellows and betray themselves to every modern\n\tcensure worse than drunkards.\n\nJAQUES\tWhy, 'tis good to be sad and say nothing.\n\nROSALIND\tWhy then, 'tis good to be a post.\n\nJAQUES\tI have neither the scholar's melancholy, which is\n\temulation, nor the musician's, which is fantastical,\n\tnor the courtier's, which is proud, nor the\n\tsoldier's, which is ambitious, nor the lawyer's,\n\twhich is politic, nor the lady's, which is nice, nor\n\tthe lover's, which is all these: but it is a\n\tmelancholy of mine own, compounded of many simples,\n\textracted from many objects, and indeed the sundry's\n\tcontemplation of my travels, in which my often\n\trumination wraps me m a most humorous sadness.\n\nROSALIND\tA traveller! By my faith, you have great reason to\n\tbe sad: I fear you have sold your own lands to see\n\tother men's; then, to have seen much and to have\n\tnothing, is to have rich eyes and poor hands.\n\nJAQUES\tYes, I have gained my experience.\n\nROSALIND\tAnd your experience makes you sad: I had rather have\n\ta fool to make me merry than experience to make me\n\tsad; and to travel for it too!\n\n\t[Enter ORLANDO]\n\nORLANDO\tGood day and happiness, dear Rosalind!\n\nJAQUES\tNay, then, God be wi' you, an you talk in blank verse.\n\n\t[Exit]\n\nROSALIND\tFarewell, Monsieur Traveller: look you lisp and\n\twear strange suits, disable all the benefits of your\n\town country, be out of love with your nativity and\n\talmost chide God for making you that countenance you\n\tare, or I will scarce think you have swam in a\n\tgondola. Why, how now, Orlando! where have you been\n\tall this while? You a lover! An you serve me such\n\tanother trick, never come in my sight more.\n\nORLANDO\tMy fair Rosalind, I come within an hour of my promise.\n\nROSALIND\tBreak an hour's promise in love! He that will\n\tdivide a minute into a thousand parts and break but\n\ta part of the thousandth part of a minute in the\n\taffairs of love, it may be said of him that Cupid\n\thath clapped him o' the shoulder, but I'll warrant\n\thim heart-whole.\n\nORLANDO\tPardon me, dear Rosalind.\n\nROSALIND\tNay, an you be so tardy, come no more in my sight: I\n\thad as lief be wooed of a snail.\n\nORLANDO\tOf a snail?\n\nROSALIND\tAy, of a snail; for though he comes slowly, he\n\tcarries his house on his head; a better jointure,\n\tI think, than you make a woman: besides he brings\n\this destiny with him.\n\nORLANDO\tWhat's that?\n\nROSALIND\tWhy, horns, which such as you are fain to be\n\tbeholding to your wives for: but he comes armed in\n\this fortune and prevents the slander of his wife.\n\nORLANDO\tVirtue is no horn-maker; and my Rosalind is virtuous.\n\nROSALIND\tAnd I am your Rosalind.\n\nCELIA\tIt pleases him to call you so; but he hath a\n\tRosalind of a better leer than you.\n\nROSALIND\tCome, woo me, woo me, for now I am in a holiday\n\thumour and like enough to consent. What would you\n\tsay to me now, an I were your very very Rosalind?\n\nORLANDO\tI would kiss before I spoke.\n\nROSALIND\tNay, you were better speak first, and when you were\n\tgravelled for lack of matter, you might take\n\toccasion to kiss. Very good orators, when they are\n\tout, they will spit; and for lovers lacking--God\n\twarn us!--matter, the cleanliest shift is to kiss.\n\nORLANDO\tHow if the kiss be denied?\n\nROSALIND\tThen she puts you to entreaty, and there begins new matter.\n\nORLANDO\tWho could be out, being before his beloved mistress?\n\nROSALIND\tMarry, that should you, if I were your mistress, or\n\tI should think my honesty ranker than my wit.\n\nORLANDO\tWhat, of my suit?\n\nROSALIND\tNot out of your apparel, and yet out of your suit.\n\tAm not I your Rosalind?\n\nORLANDO\tI take some joy to say you are, because I would be\n\ttalking of her.\n\nROSALIND\tWell in her person I say I will not have you.\n\nORLANDO\tThen in mine own person I die.\n\nROSALIND\tNo, faith, die by attorney. The poor world is\n\talmost six thousand years old, and in all this time\n\tthere was not any man died in his own person,\n\tvidelicit, in a love-cause. Troilus had his brains\n\tdashed out with a Grecian club; yet he did what he\n\tcould to die before, and he is one of the patterns\n\tof love. Leander, he would have lived many a fair\n\tyear, though Hero had turned nun, if it had not been\n\tfor a hot midsummer night; for, good youth, he went\n\tbut forth to wash him in the Hellespont and being\n\ttaken with the cramp was drowned and the foolish\n\tcoroners of that age found it was 'Hero of Sestos.'\n\tBut these are all lies: men have died from time to\n\ttime and worms have eaten them, but not for love.\n\nORLANDO\tI would not have my right Rosalind of this mind,\n\tfor, I protest, her frown might kill me.\n\nROSALIND\tBy this hand, it will not kill a fly. But come, now\n\tI will be your Rosalind in a more coming-on\n\tdisposition, and ask me what you will. I will grant\n\tit.\n\nORLANDO\tThen love me, Rosalind.\n\nROSALIND\tYes, faith, will I, Fridays and Saturdays and all.\n\nORLANDO\tAnd wilt thou have me?\n\nROSALIND\tAy, and twenty such.\n\nORLANDO\tWhat sayest thou?\n\nROSALIND\tAre you not good?\n\nORLANDO\tI hope so.\n\nROSALIND\tWhy then, can one desire too much of a good thing?\n\tCome, sister, you shall be the priest and marry us.\n\tGive me your hand, Orlando. What do you say, sister?\n\nORLANDO\tPray thee, marry us.\n\nCELIA\tI cannot say the words.\n\nROSALIND\tYou must begin, 'Will you, Orlando--'\n\nCELIA\tGo to. Will you, Orlando, have to wife this Rosalind?\n\nORLANDO\tI will.\n\nROSALIND\tAy, but when?\n\nORLANDO\tWhy now; as fast as she can marry us.\n\nROSALIND\tThen you must say 'I take thee, Rosalind, for wife.'\n\nORLANDO\tI take thee, Rosalind, for wife.\n\nROSALIND\tI might ask you for your commission; but I do take\n\tthee, Orlando, for my husband: there's a girl goes\n\tbefore the priest; and certainly a woman's thought\n\truns before her actions.\n\nORLANDO\tSo do all thoughts; they are winged.\n\nROSALIND\tNow tell me how long you would have her after you\n\thave possessed her.\n\nORLANDO\tFor ever and a day.\n\nROSALIND\tSay 'a day,' without the 'ever.' No, no, Orlando;\n\tmen are April when they woo, December when they wed:\n\tmaids are May when they are maids, but the sky\n\tchanges when they are wives. I will be more jealous\n\tof thee than a Barbary cock-pigeon over his hen,\n\tmore clamorous than a parrot against rain, more\n\tnew-fangled than an ape, more giddy in my desires\n\tthan a monkey: I will weep for nothing, like Diana\n\tin the fountain, and I will do that when you are\n\tdisposed to be merry; I will laugh like a hyen, and\n\tthat when thou art inclined to sleep.\n\nORLANDO\tBut will my Rosalind do so?\n\nROSALIND\tBy my life, she will do as I do.\n\nORLANDO\tO, but she is wise.\n\nROSALIND\tOr else she could not have the wit to do this: the\n\twiser, the waywarder: make the doors upon a woman's\n\twit and it will out at the casement; shut that and\n\t'twill out at the key-hole; stop that, 'twill fly\n\twith the smoke out at the chimney.\n\nORLANDO\tA man that had a wife with such a wit, he might say\n\t'Wit, whither wilt?'\n\nROSALIND\tNay, you might keep that cheque for it till you met\n\tyour wife's wit going to your neighbour's bed.\n\nORLANDO\tAnd what wit could wit have to excuse that?\n\nROSALIND\tMarry, to say she came to seek you there. You shall\n\tnever take her without her answer, unless you take\n\ther without her tongue. O, that woman that cannot\n\tmake her fault her husband's occasion, let her\n\tnever nurse her child herself, for she will breed\n\tit like a fool!\n\nORLANDO\tFor these two hours, Rosalind, I will leave thee.\n\nROSALIND\tAlas! dear love, I cannot lack thee two hours.\n\nORLANDO\tI must attend the duke at dinner: by two o'clock I\n\twill be with thee again.\n\nROSALIND\tAy, go your ways, go your ways; I knew what you\n\twould prove: my friends told me as much, and I\n\tthought no less: that flattering tongue of yours\n\twon me: 'tis but one cast away, and so, come,\n\tdeath! Two o'clock is your hour?\n\nORLANDO\tAy, sweet Rosalind.\n\nROSALIND\tBy my troth, and in good earnest, and so God mend\n\tme, and by all pretty oaths that are not dangerous,\n\tif you break one jot of your promise or come one\n\tminute behind your hour, I will think you the most\n\tpathetical break-promise and the most hollow lover\n\tand the most unworthy of her you call Rosalind that\n\tmay be chosen out of the gross band of the\n\tunfaithful: therefore beware my censure and keep\n\tyour promise.\n\nORLANDO\tWith no less religion than if thou wert indeed my\n\tRosalind: so adieu.\n\nROSALIND\tWell, Time is the old justice that examines all such\n\toffenders, and let Time try: adieu.\n\n\t[Exit ORLANDO]\n\nCELIA\tYou have simply misused our sex in your love-prate:\n\twe must have your doublet and hose plucked over your\n\thead, and show the world what the bird hath done to\n\ther own nest.\n\nROSALIND\tO coz, coz, coz, my pretty little coz, that thou\n\tdidst know how many fathom deep I am in love! But\n\tit cannot be sounded: my affection hath an unknown\n\tbottom, like the bay of Portugal.\n\nCELIA\tOr rather, bottomless, that as fast as you pour\n\taffection in, it runs out.\n\nROSALIND\tNo, that same wicked bastard of Venus that was begot\n\tof thought, conceived of spleen and born of madness,\n\tthat blind rascally boy that abuses every one's eyes\n\tbecause his own are out, let him be judge how deep I\n\tam in love. I'll tell thee, Aliena, I cannot be out\n\tof the sight of Orlando: I'll go find a shadow and\n\tsigh till he come.\n\nCELIA\tAnd I'll sleep.\n\n\t[Exeunt]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT IV\n\n\n\nSCENE II\tThe forest.\n\n\n\t[Enter JAQUES, Lords, and Foresters]\n\nJAQUES\tWhich is he that killed the deer?\n\nA Lord\tSir, it was I.\n\nJAQUES\tLet's present him to the duke, like a Roman\n\tconqueror; and it would do well to set the deer's\n\thorns upon his head, for a branch of victory. Have\n\tyou no song, forester, for this purpose?\n\nForester\tYes, sir.\n\nJAQUES\tSing it: 'tis no matter how it be in tune, so it\n\tmake noise enough.\n\t\n\tSONG.\nForester\tWhat shall he have that kill'd the deer?\n\tHis leather skin and horns to wear.\n\tThen sing him home;\n\n\t[The rest shall bear this burden]\n\n\tTake thou no scorn to wear the horn;\n\tIt was a crest ere thou wast born:\n\tThy father's father wore it,\n\tAnd thy father bore it:\n\tThe horn, the horn, the lusty horn\n\tIs not a thing to laugh to scorn.\n\n\t[Exeunt]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT IV\n\n\n\nSCENE III\tThe forest.\n\n\n\t[Enter ROSALIND and CELIA]\n\nROSALIND\tHow say you now? Is it not past two o'clock? and\n\there much Orlando!\n\nCELIA\tI warrant you, with pure love and troubled brain, he\n\thath ta'en his bow and arrows and is gone forth to\n\tsleep. Look, who comes here.\n\n\t[Enter SILVIUS]\n\nSILVIUS\tMy errand is to you, fair youth;\n\tMy gentle Phebe bid me give you this:\n\tI know not the contents; but, as I guess\n\tBy the stern brow and waspish action\n\tWhich she did use as she was writing of it,\n\tIt bears an angry tenor: pardon me:\n\tI am but as a guiltless messenger.\n\nROSALIND\tPatience herself would startle at this letter\n\tAnd play the swaggerer; bear this, bear all:\n\tShe says I am not fair, that I lack manners;\n\tShe calls me proud, and that she could not love me,\n\tWere man as rare as phoenix. 'Od's my will!\n\tHer love is not the hare that I do hunt:\n\tWhy writes she so to me? Well, shepherd, well,\n\tThis is a letter of your own device.\n\nSILVIUS\tNo, I protest, I know not the contents:\n\tPhebe did write it.\n\nROSALIND\tCome, come, you are a fool\n\tAnd turn'd into the extremity of love.\n\tI saw her hand: she has a leathern hand.\n\tA freestone-colour'd hand; I verily did think\n\tThat her old gloves were on, but 'twas her hands:\n\tShe has a huswife's hand; but that's no matter:\n\tI say she never did invent this letter;\n\tThis is a man's invention and his hand.\n\nSILVIUS\tSure, it is hers.\n\nROSALIND\tWhy, 'tis a boisterous and a cruel style.\n\tA style for-challengers; why, she defies me,\n\tLike Turk to Christian: women's gentle brain\n\tCould not drop forth such giant-rude invention\n\tSuch Ethiope words, blacker in their effect\n\tThan in their countenance. Will you hear the letter?\n\nSILVIUS\tSo please you, for I never heard it yet;\n\tYet heard too much of Phebe's cruelty.\n\nROSALIND\tShe Phebes me: mark how the tyrant writes.\n\n\t[Reads]\n\n\tArt thou god to shepherd turn'd,\n\tThat a maiden's heart hath burn'd?\n\tCan a woman rail thus?\n\nSILVIUS\tCall you this railing?\n\nROSALIND\t[Reads]\n\n\tWhy, thy godhead laid apart,\n\tWarr'st thou with a woman's heart?\n\tDid you ever hear such railing?\n\tWhiles the eye of man did woo me,\n\tThat could do no vengeance to me.\n\tMeaning me a beast.\n\tIf the scorn of your bright eyne\n\tHave power to raise such love in mine,\n\tAlack, in me what strange effect\n\tWould they work in mild aspect!\n\tWhiles you chid me, I did love;\n\tHow then might your prayers move!\n\tHe that brings this love to thee\n\tLittle knows this love in me:\n\tAnd by him seal up thy mind;\n\tWhether that thy youth and kind\n\tWill the faithful offer take\n\tOf me and all that I can make;\n\tOr else by him my love deny,\n\tAnd then I'll study how to die.\n\nSILVIUS\tCall you this chiding?\n\nCELIA\tAlas, poor shepherd!\n\nROSALIND\tDo you pity him? no, he deserves no pity. Wilt\n\tthou love such a woman? What, to make thee an\n\tinstrument and play false strains upon thee! not to\n\tbe endured! Well, go your way to her, for I see\n\tlove hath made thee a tame snake, and say this to\n\ther: that if she love me, I charge her to love\n\tthee; if she will not, I will never have her unless\n\tthou entreat for her. If you be a true lover,\n\thence, and not a word; for here comes more company.\n\n\t[Exit SILVIUS]\n\n\t[Enter OLIVER]\n\nOLIVER\tGood morrow, fair ones: pray you, if you know,\n\tWhere in the purlieus of this forest stands\n\tA sheep-cote fenced about with olive trees?\n\nCELIA\tWest of this place, down in the neighbour bottom:\n\tThe rank of osiers by the murmuring stream\n\tLeft on your right hand brings you to the place.\n\tBut at this hour the house doth keep itself;\n\tThere's none within.\n\nOLIVER\tIf that an eye may profit by a tongue,\n\tThen should I know you by description;\n\tSuch garments and such years: 'The boy is fair,\n\tOf female favour, and bestows himself\n\tLike a ripe sister: the woman low\n\tAnd browner than her brother.' Are not you\n\tThe owner of the house I did inquire for?\n\nCELIA\tIt is no boast, being ask'd, to say we are.\n\nOLIVER\tOrlando doth commend him to you both,\n\tAnd to that youth he calls his Rosalind\n\tHe sends this bloody napkin. Are you he?\n\nROSALIND\tI am: what must we understand by this?\n\nOLIVER\tSome of my shame; if you will know of me\n\tWhat man I am, and how, and why, and where\n\tThis handkercher was stain'd.\n\nCELIA\tI pray you, tell it.\n\nOLIVER\tWhen last the young Orlando parted from you\n\tHe left a promise to return again\n\tWithin an hour, and pacing through the forest,\n\tChewing the food of sweet and bitter fancy,\n\tLo, what befell! he threw his eye aside,\n\tAnd mark what object did present itself:\n\tUnder an oak, whose boughs were moss'd with age\n\tAnd high top bald with dry antiquity,\n\tA wretched ragged man, o'ergrown with hair,\n\tLay sleeping on his back: about his neck\n\tA green and gilded snake had wreathed itself,\n\tWho with her head nimble in threats approach'd\n\tThe opening of his mouth; but suddenly,\n\tSeeing Orlando, it unlink'd itself,\n\tAnd with indented glides did slip away\n\tInto a bush: under which bush's shade\n\tA lioness, with udders all drawn dry,\n\tLay couching, head on ground, with catlike watch,\n\tWhen that the sleeping man should stir; for 'tis\n\tThe royal disposition of that beast\n\tTo prey on nothing that doth seem as dead:\n\tThis seen, Orlando did approach the man\n\tAnd found it was his brother, his elder brother.\n\nCELIA\tO, I have heard him speak of that same brother;\n\tAnd he did render him the most unnatural\n\tThat lived amongst men.\n\nOLIVER\tAnd well he might so do,\n\tFor well I know he was unnatural.\n\nROSALIND\tBut, to Orlando: did he leave him there,\n\tFood to the suck'd and hungry lioness?\n\nOLIVER\tTwice did he turn his back and purposed so;\n\tBut kindness, nobler ever than revenge,\n\tAnd nature, stronger than his just occasion,\n\tMade him give battle to the lioness,\n\tWho quickly fell before him: in which hurtling\n\tFrom miserable slumber I awaked.\n\nCELIA\tAre you his brother?\n\nROSALIND\tWast you he rescued?\n\nCELIA\tWas't you that did so oft contrive to kill him?\n\nOLIVER\t'Twas I; but 'tis not I\tI do not shame\n\tTo tell you what I was, since my conversion\n\tSo sweetly tastes, being the thing I am.\n\nROSALIND\tBut, for the bloody napkin?\n\nOLIVER\tBy and by.\n\tWhen from the first to last betwixt us two\n\tTears our recountments had most kindly bathed,\n\tAs how I came into that desert place:--\n\tIn brief, he led me to the gentle duke,\n\tWho gave me fresh array and entertainment,\n\tCommitting me unto my brother's love;\n\tWho led me instantly unto his cave,\n\tThere stripp'd himself, and here upon his arm\n\tThe lioness had torn some flesh away,\n\tWhich all this while had bled; and now he fainted\n\tAnd cried, in fainting, upon Rosalind.\n\tBrief, I recover'd him, bound up his wound;\n\tAnd, after some small space, being strong at heart,\n\tHe sent me hither, stranger as I am,\n\tTo tell this story, that you might excuse\n\tHis broken promise, and to give this napkin\n\tDyed in his blood unto the shepherd youth\n\tThat he in sport doth call his Rosalind.\n\n\t[ROSALIND swoons]\n\nCELIA\tWhy, how now, Ganymede! sweet Ganymede!\n\nOLIVER\tMany will swoon when they do look on blood.\n\nCELIA\tThere is more in it. Cousin Ganymede!\n\nOLIVER\tLook, he recovers.\n\nROSALIND\tI would I were at home.\n\nCELIA\tWe'll lead you thither.\n\tI pray you, will you take him by the arm?\n\nOLIVER\tBe of good cheer, youth: you a man! you lack a\n\tman's heart.\n\nROSALIND\tI do so, I confess it. Ah, sirrah, a body would\n\tthink this was well counterfeited! I pray you, tell\n\tyour brother how well I counterfeited. Heigh-ho!\n\nOLIVER\tThis was not counterfeit: there is too great\n\ttestimony in your complexion that it was a passion\n\tof earnest.\n\nROSALIND\tCounterfeit, I assure you.\n\nOLIVER\tWell then, take a good heart and counterfeit to be a man.\n\nROSALIND\tSo I do: but, i' faith, I should have been a woman by right.\n\nCELIA\tCome, you look paler and paler: pray you, draw\n\thomewards. Good sir, go with us.\n\nOLIVER\tThat will I, for I must bear answer back\n\tHow you excuse my brother, Rosalind.\n\nROSALIND\tI shall devise something: but, I pray you, commend\n\tmy counterfeiting to him. Will you go?\n\n\t[Exeunt]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT V\n\n\n\nSCENE I\tThe forest.\n\n\n\t[Enter TOUCHSTONE and AUDREY]\n\nTOUCHSTONE\tWe shall find a time, Audrey; patience, gentle Audrey.\n\nAUDREY\tFaith, the priest was good enough, for all the old\n\tgentleman's saying.\n\nTOUCHSTONE\tA most wicked Sir Oliver, Audrey, a most vile\n\tMartext. But, Audrey, there is a youth here in the\n\tforest lays claim to you.\n\nAUDREY\tAy, I know who 'tis; he hath no interest in me in\n\tthe world: here comes the man you mean.\n\nTOUCHSTONE\tIt is meat and drink to me to see a clown: by my\n\ttroth, we that have good wits have much to answer\n\tfor; we shall be flouting; we cannot hold.\n\n\t[Enter WILLIAM]\n\nWILLIAM\tGood even, Audrey.\n\nAUDREY\tGod ye good even, William.\n\nWILLIAM\tAnd good even to you, sir.\n\nTOUCHSTONE\tGood even, gentle friend. Cover thy head, cover thy\n\thead; nay, prithee, be covered. How old are you, friend?\n\nWILLIAM\tFive and twenty, sir.\n\nTOUCHSTONE\tA ripe age. Is thy name William?\n\nWILLIAM\tWilliam, sir.\n\nTOUCHSTONE\tA fair name. Wast born i' the forest here?\n\nWILLIAM\tAy, sir, I thank God.\n\nTOUCHSTONE\t'Thank God;' a good answer. Art rich?\n\nWILLIAM\tFaith, sir, so so.\n\nTOUCHSTONE\t'So so' is good, very good, very excellent good; and\n\tyet it is not; it is but so so. Art thou wise?\n\nWILLIAM\tAy, sir, I have a pretty wit.\n\nTOUCHSTONE\tWhy, thou sayest well. I do now remember a saying,\n\t'The fool doth think he is wise, but the wise man\n\tknows himself to be a fool.' The heathen\n\tphilosopher, when he had a desire to eat a grape,\n\twould open his lips when he put it into his mouth;\n\tmeaning thereby that grapes were made to eat and\n\tlips to open. You do love this maid?\n\nWILLIAM\tI do, sir.\n\nTOUCHSTONE\tGive me your hand. Art thou learned?\n\nWILLIAM\tNo, sir.\n\nTOUCHSTONE\tThen learn this of me: to have, is to have; for it\n\tis a figure in rhetoric that drink, being poured out\n\tof a cup into a glass, by filling the one doth empty\n\tthe other; for all your writers do consent that ipse\n\tis he: now, you are not ipse, for I am he.\n\nWILLIAM\tWhich he, sir?\n\nTOUCHSTONE\tHe, sir, that must marry this woman. Therefore, you\n\tclown, abandon,--which is in the vulgar leave,--the\n\tsociety,--which in the boorish is company,--of this\n\tfemale,--which in the common is woman; which\n\ttogether is, abandon the society of this female, or,\n\tclown, thou perishest; or, to thy better\n\tunderstanding, diest; or, to wit I kill thee, make\n\tthee away, translate thy life into death, thy\n\tliberty into bondage: I will deal in poison with\n\tthee, or in bastinado, or in steel; I will bandy\n\twith thee in faction; I will o'errun thee with\n\tpolicy; I will kill thee a hundred and fifty ways:\n\ttherefore tremble and depart.\n\nAUDREY\tDo, good William.\n\nWILLIAM\tGod rest you merry, sir.\n\n\t[Exit]\n\n\t[Enter CORIN]\n\nCORIN\tOur master and mistress seeks you; come, away, away!\n\nTOUCHSTONE\tTrip, Audrey! trip, Audrey! I attend, I attend.\n\n\t[Exeunt]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT V\n\n\n\nSCENE II\tThe forest.\n\n\n\t[Enter ORLANDO and OLIVER]\n\nORLANDO\tIs't possible that on so little acquaintance you\n\tshould like her? that but seeing you should love\n\ther? and loving woo? and, wooing, she should\n\tgrant? and will you persever to enjoy her?\n\nOLIVER\tNeither call the giddiness of it in question, the\n\tpoverty of her, the small acquaintance, my sudden\n\twooing, nor her sudden consenting; but say with me,\n\tI love Aliena; say with her that she loves me;\n\tconsent with both that we may enjoy each other: it\n\tshall be to your good; for my father's house and all\n\tthe revenue that was old Sir Rowland's will I\n\testate upon you, and here live and die a shepherd.\n\nORLANDO\tYou have my consent. Let your wedding be to-morrow:\n\tthither will I invite the duke and all's contented\n\tfollowers. Go you and prepare Aliena; for look\n\tyou, here comes my Rosalind.\n\n\t[Enter ROSALIND]\n\nROSALIND\tGod save you, brother.\n\nOLIVER\tAnd you, fair sister.\n\n\t[Exit]\n\nROSALIND\tO, my dear Orlando, how it grieves me to see thee\n\twear thy heart in a scarf!\n\nORLANDO\tIt is my arm.\n\nROSALIND\tI thought thy heart had been wounded with the claws\n\tof a lion.\n\nORLANDO\tWounded it is, but with the eyes of a lady.\n\nROSALIND\tDid your brother tell you how I counterfeited to\n\tswoon when he showed me your handkerchief?\n\nORLANDO\tAy, and greater wonders than that.\n\nROSALIND\tO, I know where you are: nay, 'tis true: there was\n\tnever any thing so sudden but the fight of two rams\n\tand Caesar's thrasonical brag of 'I came, saw, and\n\tovercame:' for your brother and my sister no sooner\n\tmet but they looked, no sooner looked but they\n\tloved, no sooner loved but they sighed, no sooner\n\tsighed but they asked one another the reason, no\n\tsooner knew the reason but they sought the remedy;\n\tand in these degrees have they made a pair of stairs\n\tto marriage which they will climb incontinent, or\n\telse be incontinent before marriage: they are in\n\tthe very wrath of love and they will together; clubs\n\tcannot part them.\n\nORLANDO\tThey shall be married to-morrow, and I will bid the\n\tduke to the nuptial. But, O, how bitter a thing it\n\tis to look into happiness through another man's\n\teyes! By so much the more shall I to-morrow be at\n\tthe height of heart-heaviness, by how much I shall\n\tthink my brother happy in having what he wishes for.\n\nROSALIND\tWhy then, to-morrow I cannot serve your turn for Rosalind?\n\nORLANDO\tI can live no longer by thinking.\n\nROSALIND\tI will weary you then no longer with idle talking.\n\tKnow of me then, for now I speak to some purpose,\n\tthat I know you are a gentleman of good conceit: I\n\tspeak not this that you should bear a good opinion\n\tof my knowledge, insomuch I say I know you are;\n\tneither do I labour for a greater esteem than may in\n\tsome little measure draw a belief from you, to do\n\tyourself good and not to grace me. Believe then, if\n\tyou please, that I can do strange things: I have,\n\tsince I was three year old, conversed with a\n\tmagician, most profound in his art and yet not\n\tdamnable. If you do love Rosalind so near the heart\n\tas your gesture cries it out, when your brother\n\tmarries Aliena, shall you marry her: I know into\n\twhat straits of fortune she is driven; and it is\n\tnot impossible to me, if it appear not inconvenient\n\tto you, to set her before your eyes tomorrow human\n\tas she is and without any danger.\n\nORLANDO\tSpeakest thou in sober meanings?\n\nROSALIND\tBy my life, I do; which I tender dearly, though I\n\tsay I am a magician. Therefore, put you in your\n\tbest array: bid your friends; for if you will be\n\tmarried to-morrow, you shall, and to Rosalind, if you will.\n\n\t[Enter SILVIUS and PHEBE]\n\n\tLook, here comes a lover of mine and a lover of hers.\n\nPHEBE\tYouth, you have done me much ungentleness,\n\tTo show the letter that I writ to you.\n\nROSALIND\tI care not if I have: it is my study\n\tTo seem despiteful and ungentle to you:\n\tYou are there followed by a faithful shepherd;\n\tLook upon him, love him; he worships you.\n\nPHEBE\tGood shepherd, tell this youth what 'tis to love.\n\nSILVIUS\tIt is to be all made of sighs and tears;\n\tAnd so am I for Phebe.\n\nPHEBE\tAnd I for Ganymede.\n\nORLANDO\tAnd I for Rosalind.\n\nROSALIND\tAnd I for no woman.\n\nSILVIUS\tIt is to be all made of faith and service;\n\tAnd so am I for Phebe.\n\nPHEBE\tAnd I for Ganymede.\n\nORLANDO\tAnd I for Rosalind.\n\nROSALIND\tAnd I for no woman.\n\nSILVIUS\tIt is to be all made of fantasy,\n\tAll made of passion and all made of wishes,\n\tAll adoration, duty, and observance,\n\tAll humbleness, all patience and impatience,\n\tAll purity, all trial, all observance;\n\tAnd so am I for Phebe.\n\nPHEBE\tAnd so am I for Ganymede.\n\nORLANDO\tAnd so am I for Rosalind.\n\nROSALIND\tAnd so am I for no woman.\n\nPHEBE\tIf this be so, why blame you me to love you?\n\nSILVIUS\tIf this be so, why blame you me to love you?\n\nORLANDO\tIf this be so, why blame you me to love you?\n\nROSALIND\tWho do you speak to, 'Why blame you me to love you?'\n\nORLANDO\tTo her that is not here, nor doth not hear.\n\nROSALIND\tPray you, no more of this; 'tis like the howling\n\tof Irish wolves against the moon.\n\n\t[To SILVIUS]\n\n\tI will help you, if I can:\n\n\t[To PHEBE]\n\n\tI would love you, if I could. To-morrow meet me all together.\n\n\t[To PHEBE]\n\n\tI will marry you, if ever I marry woman, and I'll be\n\tmarried to-morrow:\n\n\t[To ORLANDO]\n\n\tI will satisfy you, if ever I satisfied man, and you\n\tshall be married to-morrow:\n\n\t[To SILVIUS]\n\n\tI will content you, if what pleases you contents\n\tyou, and you shall be married to-morrow.\n\n\t[To ORLANDO]\n\n\tAs you love Rosalind, meet:\n\n\t[To SILVIUS]\n\n\tas you love Phebe, meet: and as I love no woman,\n\tI'll meet. So fare you well: I have left you commands.\n\nSILVIUS\tI'll not fail, if I live.\n\nPHEBE\tNor I.\n\nORLANDO\tNor I.\n\n\t[Exeunt]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT V\n\n\n\nSCENE III\tThe forest.\n\n\n\t[Enter TOUCHSTONE and AUDREY]\n\nTOUCHSTONE\tTo-morrow is the joyful day, Audrey; to-morrow will\n\twe be married.\n\nAUDREY\tI do desire it with all my heart; and I hope it is\n\tno dishonest desire to desire to be a woman of the\n\tworld. Here comes two of the banished duke's pages.\n\n\t[Enter two Pages]\n\nFirst Page\tWell met, honest gentleman.\n\nTOUCHSTONE\tBy my troth, well met. Come, sit, sit, and a song.\n\nSecond Page\tWe are for you: sit i' the middle.\n\nFirst Page\tShall we clap into't roundly, without hawking or\n\tspitting or saying we are hoarse, which are the only\n\tprologues to a bad voice?\n\nSecond Page\tI'faith, i'faith; and both in a tune, like two\n\tgipsies on a horse.\n\t\n\tSONG.\n\tIt was a lover and his lass,\n\tWith a hey, and a ho, and a hey nonino,\n\tThat o'er the green corn-field did pass\n\tIn the spring time, the only pretty ring time,\n\tWhen birds do sing, hey ding a ding, ding:\n\tSweet lovers love the spring.\n\n\tBetween the acres of the rye,\n\tWith a hey, and a ho, and a hey nonino\n\tThese pretty country folks would lie,\n\tIn spring time, &c.\n\n\tThis carol they began that hour,\n\tWith a hey, and a ho, and a hey nonino,\n\tHow that a life was but a flower\n\tIn spring time, &c.\n\n\tAnd therefore take the present time,\n\tWith a hey, and a ho, and a hey nonino;\n\tFor love is crowned with the prime\n\tIn spring time, &c.\n\nTOUCHSTONE\tTruly, young gentlemen, though there was no great\n\tmatter in the ditty, yet the note was very\n\tuntuneable.\n\nFirst Page\tYou are deceived, sir: we kept time, we lost not our time.\n\nTOUCHSTONE\tBy my troth, yes; I count it but time lost to hear\n\tsuch a foolish song. God be wi' you; and God mend\n\tyour voices! Come, Audrey.\n\n\t[Exeunt]\n\n\n\n\n\tAS YOU LIKE IT\n\n\nACT V\n\n\n\nSCENE IV\tThe forest.\n\n\n\t[Enter DUKE SENIOR, AMIENS, JAQUES, ORLANDO, OLIVER,\n\tand CELIA]\n\nDUKE SENIOR\tDost thou believe, Orlando, that the boy\n\tCan do all this that he hath promised?\n\nORLANDO\tI sometimes do believe, and sometimes do not;\n\tAs those that fear they hope, and know they fear.\n\n\t[Enter ROSALIND, SILVIUS, and PHEBE]\n\nROSALIND\tPatience once more, whiles our compact is urged:\n\tYou say, if I bring in your Rosalind,\n\tYou will bestow her on Orlando here?\n\nDUKE SENIOR\tThat would I, had I kingdoms to give with her.\n\nROSALIND\tAnd you say, you will have her, when I bring her?\n\nORLANDO\tThat would I, were I of all kingdoms king.\n\nROSALIND\tYou say, you'll marry me, if I be willing?\n\nPHEBE\tThat will I, should I die the hour after.\n\nROSALIND\tBut if you do refuse to marry me,\n\tYou'll give yourself to this most faithful shepherd?\n\nPHEBE\tSo is the bargain.\n\nROSALIND\tYou say, that you'll have Phebe, if she will?\n\nSILVIUS\tThough to have her and death were both one thing.\n\nROSALIND\tI have promised to make all this matter even.\n\tKeep you your word, O duke, to give your daughter;\n\tYou yours, Orlando, to receive his daughter:\n\tKeep your word, Phebe, that you'll marry me,\n\tOr else refusing me, to wed this shepherd:\n\tKeep your word, Silvius, that you'll marry her.\n\tIf she refuse me: and from hence I go,\n\tTo make these doubts all even.\n\n\t[Exeunt ROSALIND and CELIA]\n\nDUKE SENIOR\tI do remember in this shepherd boy\n\tSome lively touches of my daughter's favour.\n\nORLANDO\tMy lord, the first time that I ever saw him\n\tMethought he was a brother to your daughter:\n\tBut, my good lord, this boy is forest-born,\n\tAnd hath been tutor'd in the rudiments\n\tOf many desperate studies by his uncle,\n\tWhom he reports to be a great magician,\n\tObscured in the circle of this forest.\n\n\t[Enter TOUCHSTONE and AUDREY]\n\nJAQUES\tThere is, sure, another flood toward, and these\n\tcouples are coming to the ark. Here comes a pair of\n\tvery strange beasts, which in all tongues are called fools.\n\nTOUCHSTONE\tSalutation and greeting to you all!\n\nJAQUES\tGood my lord, bid him welcome: this is the\n\tmotley-minded gentleman that I have so often met in\n\tthe forest: he hath been a courtier, he swears.\n\nTOUCHSTONE\tIf any man doubt that, let him put me to my\n\tpurgation. I have trod a measure; I have flattered\n\ta lady; I have been politic with my friend, smooth\n\twith mine enemy; I have undone three tailors; I have\n\thad four quarrels, and like to have fought one.\n\nJAQUES\tAnd how was that ta'en up?\n\nTOUCHSTONE\tFaith, we met, and found the quarrel was upon the\n\tseventh cause.\n\nJAQUES\tHow seventh cause? Good my lord, like this fellow.\n\nDUKE SENIOR\tI like him very well.\n\nTOUCHSTONE\tGod 'ild you, sir; I desire you of the like. I\n\tpress in here, sir, amongst the rest of the country\n\tcopulatives, to swear and to forswear: according as\n\tmarriage binds and blood breaks: a poor virgin,\n\tsir, an ill-favoured thing, sir, but mine own; a poor\n\thumour of mine, sir, to take that that no man else\n\twill: rich honesty dwells like a miser, sir, in a\n\tpoor house; as your pearl in your foul oyster.\n\nDUKE SENIOR\tBy my faith, he is very swift and sententious.\n\nTOUCHSTONE\tAccording to the fool's bolt, sir, and such dulcet diseases.\n\nJAQUES\tBut, for the seventh cause; how did you find the\n\tquarrel on the seventh cause?\n\nTOUCHSTONE\tUpon a lie seven times removed:--bear your body more\n\tseeming, Audrey:--as thus, sir. I did dislike the\n\tcut of a certain courtier's beard: he sent me word,\n\tif I said his beard was not cut well, he was in the\n\tmind it was: this is called the Retort Courteous.\n\tIf I sent him word again 'it was not well cut,' he\n\twould send me word, he cut it to please himself:\n\tthis is called the Quip Modest. If again 'it was\n\tnot well cut,' he disabled my judgment: this is\n\tcalled the Reply Churlish. If again 'it was not\n\twell cut,' he would answer, I spake not true: this\n\tis called the Reproof Valiant. If again 'it was not\n\twell cut,' he would say I lied: this is called the\n\tCounter-cheque Quarrelsome: and so to the Lie\n\tCircumstantial and the Lie Direct.\n\nJAQUES\tAnd how oft did you say his beard was not well cut?\n\nTOUCHSTONE\tI durst go no further than the Lie Circumstantial,\n\tnor he durst not give me the Lie Direct; and so we\n\tmeasured swords and parted.\n\nJAQUES\tCan you nominate in order now the degrees of the lie?\n\nTOUCHSTONE\tO sir, we quarrel in print, by the book; as you have\n\tbooks for good manners: I will name you the degrees.\n\tThe first, the Retort Courteous; the second, the\n\tQuip Modest; the third, the Reply Churlish; the\n\tfourth, the Reproof Valiant; the fifth, the\n\tCountercheque Quarrelsome; the sixth, the Lie with\n\tCircumstance; the seventh, the Lie Direct. All\n\tthese you may avoid but the Lie Direct; and you may\n\tavoid that too, with an If. I knew when seven\n\tjustices could not take up a quarrel, but when the\n\tparties were met themselves, one of them thought but\n\tof an If, as, 'If you said so, then I said so;' and\n\tthey shook hands and swore brothers. Your If is the\n\tonly peacemaker; much virtue in If.\n\nJAQUES\tIs not this a rare fellow, my lord? he's as good at\n\tany thing and yet a fool.\n\nDUKE SENIOR\tHe uses his folly like a stalking-horse and under\n\tthe presentation of that he shoots his wit.\n\n\t[Enter HYMEN, ROSALIND, and CELIA]\n\n\t[Still Music]\n\nHYMEN\t        Then is there mirth in heaven,\n\tWhen earthly things made even\n\tAtone together.\n\tGood duke, receive thy daughter\n\tHymen from heaven brought her,\n\tYea, brought her hither,\n\tThat thou mightst join her hand with his\n\tWhose heart within his bosom is.\n\nROSALIND\t[To DUKE SENIOR]  To you I give myself, for I am yours.\n\n\t[To ORLANDO]\n\n\tTo you I give myself, for I am yours.\n\nDUKE SENIOR\tIf there be truth in sight, you are my daughter.\n\nORLANDO\tIf there be truth in sight, you are my Rosalind.\n\nPHEBE\tIf sight and shape be true,\n\tWhy then, my love adieu!\n\nROSALIND\tI'll have no father, if you be not he:\n\tI'll have no husband, if you be not he:\n\tNor ne'er wed woman, if you be not she.\n\nHYMEN\t        Peace, ho! I bar confusion:\n\t'Tis I must make conclusion\n\tOf these most strange events:\n\tHere's eight that must take hands\n\tTo join in Hymen's bands,\n\tIf truth holds true contents.\n\tYou and you no cross shall part:\n\tYou and you are heart in heart\n\tYou to his love must accord,\n\tOr have a woman to your lord:\n\tYou and you are sure together,\n\tAs the winter to foul weather.\n\tWhiles a wedlock-hymn we sing,\n\tFeed yourselves with questioning;\n\tThat reason wonder may diminish,\n\tHow thus we met, and these things finish.\n\t\n\tSONG.\n\tWedding is great Juno's crown:\n\tO blessed bond of board and bed!\n\t'Tis Hymen peoples every town;\n\tHigh wedlock then be honoured:\n\tHonour, high honour and renown,\n\tTo Hymen, god of every town!\n\nDUKE SENIOR\tO my dear niece, welcome thou art to me!\n\tEven daughter, welcome, in no less degree.\n\nPHEBE\tI will not eat my word, now thou art mine;\n\tThy faith my fancy to thee doth combine.\n\n\t[Enter JAQUES DE BOYS]\n\nJAQUES DE BOYS\tLet me have audience for a word or two:\n\tI am the second son of old Sir Rowland,\n\tThat bring these tidings to this fair assembly.\n\tDuke Frederick, hearing how that every day\n\tMen of great worth resorted to this forest,\n\tAddress'd a mighty power; which were on foot,\n\tIn his own conduct, purposely to take\n\tHis brother here and put him to the sword:\n\tAnd to the skirts of this wild wood he came;\n\tWhere meeting with an old religious man,\n\tAfter some question with him, was converted\n\tBoth from his enterprise and from the world,\n\tHis crown bequeathing to his banish'd brother,\n\tAnd all their lands restored to them again\n\tThat were with him exiled. This to be true,\n\tI do engage my life.\n\nDUKE SENIOR\tWelcome, young man;\n\tThou offer'st fairly to thy brothers' wedding:\n\tTo one his lands withheld, and to the other\n\tA land itself at large, a potent dukedom.\n\tFirst, in this forest, let us do those ends\n\tThat here were well begun and well begot:\n\tAnd after, every of this happy number\n\tThat have endured shrewd days and nights with us\n\tShall share the good of our returned fortune,\n\tAccording to the measure of their states.\n\tMeantime, forget this new-fall'n dignity\n\tAnd fall into our rustic revelry.\n\tPlay, music! And you, brides and bridegrooms all,\n\tWith measure heap'd in joy, to the measures fall.\n\nJAQUES\tSir, by your patience. If I heard you rightly,\n\tThe duke hath put on a religious life\n\tAnd thrown into neglect the pompous court?\n\nJAQUES DE BOYS\tHe hath.\n\nJAQUES\tTo him will I : out of these convertites\n\tThere is much matter to be heard and learn'd.\n\n\t[To DUKE SENIOR]\n\n\tYou to your former honour I bequeath;\n\tYour patience and your virtue well deserves it:\n\n\t[To ORLANDO]\n\n\tYou to a love that your true faith doth merit:\n\n\t[To OLIVER]\n\n\tYou to your land and love and great allies:\n\n\t[To SILVIUS]\n\n\tYou to a long and well-deserved bed:\n\n\t[To TOUCHSTONE]\n\n\tAnd you to wrangling; for thy loving voyage\n\tIs but for two months victuall'd. So, to your pleasures:\n\tI am for other than for dancing measures.\n\nDUKE SENIOR\tStay, Jaques, stay.\n\nJAQUES\tTo see no pastime I\twhat you would have\n\tI'll stay to know at your abandon'd cave.\n\n\t[Exit]\n\nDUKE SENIOR\tProceed, proceed: we will begin these rites,\n\tAs we do trust they'll end, in true delights.\n\n\t[A dance]\n\n\n\n\n\tAS YOU LIKE IT\n\n\tEPILOGUE\n\n\nROSALIND\tIt is not the fashion to see the lady the epilogue;\n\tbut it is no more unhandsome than to see the lord\n\tthe prologue. If it be true that good wine needs\n\tno bush, 'tis true that a good play needs no\n\tepilogue; yet to good wine they do use good bushes,\n\tand good plays prove the better by the help of good\n\tepilogues. What a case am I in then, that am\n\tneither a good epilogue nor cannot insinuate with\n\tyou in the behalf of a good play! I am not\n\tfurnished like a beggar, therefore to beg will not\n\tbecome me: my way is to conjure you; and I'll begin\n\twith the women. I charge you, O women, for the love\n\tyou bear to men, to like as much of this play as\n\tplease you: and I charge you, O men, for the love\n\tyou bear to women--as I perceive by your simpering,\n\tnone of you hates them--that between you and the\n\twomen the play may please. If I were a woman I\n\twould kiss as many of you as had beards that pleased\n\tme, complexions that liked me and breaths that I\n\tdefied not: and, I am sure, as many as have good\n\tbeards or good faces or sweet breaths will, for my\n\tkind offer, when I make curtsy, bid me farewell.\n\n\t[Exeunt]\n)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 29,
      "time" : "Took: 1 second 415 milliseconds, at 2016-12-1 17:10"
    } ]
  }, {
    "metadata" : {
      "id" : "B63454514AF841A7824D0A78CCE324C6"
    },
    "cell_type" : "markdown",
    "source" : "> **NOTE:** We called the `RDD.count` method, whereas most Scala collections have a `size` method."
  }, {
    "metadata" : {
      "id" : "6A7FE239825A4DAE86368FAF6E09A142"
    },
    "cell_type" : "markdown",
    "source" : "Now for our next step in the calculation. First, \"tokenize\" the contents into words by splitting on non-alphanumeric characters, meaning all runs of whitespace (including the newlines), punctuation, etc.\n\nNext, the fully-qualified path is verbose and the same prefix is repeated for all the files, so let's extract just the last element of it, the unique file name.\n\nThen form new tuples with the words and file names.\n\n> **Note:** This \"tokenization\" approach is very crude. It improperly handles contractions, like `it's` and hyphenated words like `world-changing`. When you kill Google, be sure to use a real _natural language processing_ (NLP) tokenization technique."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "E072D355D0FF43B58F08848DEAC6109C"
    },
    "cell_type" : "code",
    "source" : "val wordFileNameOnes = fileContents.flatMap { location_contents_tuple2 => // i.e., (file_path, \"all the words in the file\")\n    val words = location_contents_tuple2._2.split(\"\"\"\\W+\"\"\")              // mytuple._2 => give me the 2nd element\n    val fileName = location_contents_tuple2._1.split(pathSeparator).last  // mytuple._1 => give me the 1st element\n    words.map(word => ((word, fileName), 1))        // create a new tuple to return. Note how we structured it!\n}\nwordFileNameOnes",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "wordFileNameOnes: org.apache.spark.rdd.RDD[((String, String), Int)] = MapPartitionsRDD[12] at flatMap at <console>:75\nres48: org.apache.spark.rdd.RDD[((String, String), Int)] = MapPartitionsRDD[12] at flatMap at <console>:75\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "MapPartitionsRDD[12] at flatMap at &lt;console&gt;:75"
      },
      "output_type" : "execute_result",
      "execution_count" : 30,
      "time" : "Took: 1 second 256 milliseconds, at 2016-12-1 17:12"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B9A6AE4D94A443BDA467B4D9EBBE43FC"
    },
    "cell_type" : "code",
    "source" : "wordFileNameOnes.count",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res50: Long = 173336\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "173336"
      },
      "output_type" : "execute_result",
      "execution_count" : 31,
      "time" : "Took: 1 second 216 milliseconds, at 2016-12-1 17:12"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "DB9A436FE9DD48C18E0C1B37B6E73999"
    },
    "cell_type" : "code",
    "source" : "wordFileNameOnes.take(10).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "((,asyoulikeit),1)\n((AS,asyoulikeit),1)\n((YOU,asyoulikeit),1)\n((LIKE,asyoulikeit),1)\n((IT,asyoulikeit),1)\n((DRAMATIS,asyoulikeit),1)\n((PERSONAE,asyoulikeit),1)\n((DUKE,asyoulikeit),1)\n((SENIOR,asyoulikeit),1)\n((living,asyoulikeit),1)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 32,
      "time" : "Took: 1 second 37 milliseconds, at 2016-12-1 17:13"
    } ]
  }, {
    "metadata" : {
      "id" : "2E98B66DEE2140378F9FA7377ADF1A9A"
    },
    "cell_type" : "markdown",
    "source" : "I find this hard to read and shortly I'll show you a much more elegant, alternative syntax.\n\nLet's understand the difference between `map` and `flatMap`. If I called `fileContents.map`, it would return exactly _one_ new record for each record in _fileContents_. What I actually want instead are new records for each word-fileName combination, a significantly larger number (but the data in each record will be much smaller). \n\nUsing `fileContents.flatMap` gives me what I want. Instead of returning one output record for each input record, a `flatMap` returns a _collection_ of new records, zero or more, for _each_ input record. These collections are then _flattened_ into one big collection, another `RDD` in this case."
  }, {
    "metadata" : {
      "id" : "FB33105E2CF641E7AE3BB637A5A0AA82"
    },
    "cell_type" : "markdown",
    "source" : "What should `flatMap` actually do with each record? I pass a _function_ to define what to do. I'm using an unnamed or _anonymous_ function. The syntax is `argument_list => body`:\n\n```scala\nlocation_contents_tuple2 => \n    val words = ...\n    ...\n}\n```\n\nI have a single argument, the record, which I named `location_contents_tuple2`, a verbose way to say that it's a two-element tuple with an input file's location and contents. I don't require a type parameter after `location_contents_tuple2`, because it's inferred by Scala. The `=>` \"arrow\" separates the argument list from the body, which appears on the next few lines.\n\nWhen a function takes more than one argument or you add explicit type _annotations_ (e.g., `: (String,Int,Double)`), then you need parentheses. Here are three examples:\n\n```scala\n(some_tuple3: (String,Int,Double)) => ...\n(arg1, arg2, arg3) => ...\n(arg1: String, arg2: Int, arg3: Double) => ...\n```\nWe're letting Scala infer the argument type in our case, `(String,String)`."
  }, {
    "metadata" : {
      "id" : "1053B25F426A40558F2F51C474EC8998"
    },
    "cell_type" : "markdown",
    "source" : "Wait, I said we're passing a function as an argument to `flatMap`. If so, why am I using braces `{...}` around this function argument instead of parentheses `(...)` like you would normally expect when passing arguments to a method like `flatMap`? \n\nIt's because Scala lets us substitute braces instead of parentheses so we have the familiar block-like syntax `{...}` we know and love for `if` and `for` expressions. I could use either braces or parentheses here. The convention in the Scala community is to use braces for a multi-line anonymous function and to use parentheses for a single expression when it fits on the same line."
  }, {
    "metadata" : {
      "id" : "E6C1137A823349E082F92E38C1F3FACF"
    },
    "cell_type" : "markdown",
    "source" : "Now, for each `location_contents_tuple2`, I access the _first_ element using the `_1` method and the _second_ element using `_2`.\n\nThe file `contents` is in the second element. I split it by calling Java's `String.split` method, which takes a _regular expression_ string. Here I specify a regular expression for one or more, non-alphanumeric characters. `String.split` returns an `Array[String]` of the words. \n\n```scala\nval words = location_contents_tuple2._2.split(\"\"\"\\W+\"\"\")\n```\n\nFor the first tuple element, I extract the file name at the end of the location path. This isn't necessary, but it makes the output more readable if I remove the long, common prefix from the path. \n\n```scala\nval fileName = location_contents_tuple2._1.split(pathSeparator).last\n```"
  }, {
    "metadata" : {
      "id" : "CEF8F60B111D4EE8B4F08C0DAF4E3701"
    },
    "cell_type" : "markdown",
    "source" : "Finally, still inside the anonymous function passed to `flatMap`, I use Scala's `Array.map` (_not_ `RDD.map`) to transform each `word` into a tuple of the form `((word, fileName), 1)`.\n\n```scala\nwords.map(word => ((word, fileName), 1))\n```\n\nWhy did I embed a tuple of `(word, fileName)` inside the \"outer\" tuple with a `1` as the second element? Why not just write a three-element tuple, `(word, fileName, 1)`? It's because I'll use the `(word, fileName)` as a _key_ in the next step, where I'll find all unique word-fileName combinations (using the equivalent of a `group by` statement). So, using the nested `(word, fileName)` as my _key_ is most convenient. The `1` _value_ is a \"seed\" count, which I'll use to count the occurrences of the unique `(word, fileName)` pairs."
  }, {
    "metadata" : {
      "id" : "CB365E8B50C44DC88A0A4FB973D1AF0D"
    },
    "cell_type" : "markdown",
    "source" : "> **Notes:**\n> * For historical reasons, tuple indices start at 1, not 0. Arrays and other Scala collections index from 0 (like in Java).\n> * I said previously that _method_ arguments have to be declared with types. That's usually _not_ required for _function_ arguments, as here.\n> * Another benefit of triple-quoted strings that makes them nice for regular expressions is that you don't have to escape regular expression metacharacters, like `\\W`. If I used a single-quoted string, I would have to write it as `\"\\\\W+\"`. Your choice..."
  }, {
    "metadata" : {
      "id" : "08AA193D2F2043FA831DD736760C6CB8"
    },
    "cell_type" : "markdown",
    "source" : "Let's count the number of records we have and look at a few of the lines. We'll use the `RDD.take` method to grab the first 10 lines, then loop over them and print them."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "41FF9807CE0B4FB59C59DEEA48A7E8A2"
    },
    "cell_type" : "code",
    "source" : "wordFileNameOnes.count",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res54: Long = 173336\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "173336"
      },
      "output_type" : "execute_result",
      "execution_count" : 33,
      "time" : "Took: 1 second 251 milliseconds, at 2016-12-1 17:15"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "AA2C8482A4874A2584B6DE64D387FE7D"
    },
    "cell_type" : "code",
    "source" : "wordFileNameOnes.take(10).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "((,asyoulikeit),1)\n((AS,asyoulikeit),1)\n((YOU,asyoulikeit),1)\n((LIKE,asyoulikeit),1)\n((IT,asyoulikeit),1)\n((DRAMATIS,asyoulikeit),1)\n((PERSONAE,asyoulikeit),1)\n((DUKE,asyoulikeit),1)\n((SENIOR,asyoulikeit),1)\n((living,asyoulikeit),1)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 34,
      "time" : "Took: 973 milliseconds, at 2016-12-1 17:15"
    } ]
  }, {
    "metadata" : {
      "id" : "8BA9250ABA92441FA406F42C09C867AD"
    },
    "cell_type" : "markdown",
    "source" : "We asked for results, so we forced Spark to run a job to compute results. Spark pipelines, like `iiFirstPass1` are _lazy_; nothing is computed until we ask for results. \n\nWhen you're learning, it's useful to print some data to better understand what's happening. Just be aware of the extra overhead of running lots of Spark jobs.\n\nThe first record shown has \"\" (blank) as the word:\n\n```\n((,asyoulikeit),1)\n```\n\nAlso, some words have all capital letters:\n\n```\n((DRAMATIS,asyoulikeit),1)\n```\n\n(You can see where these capitalized words occur if you look in the original files.) Later on, We'll filter out the blank-word records and use lower case for all words."
  }, {
    "metadata" : {
      "id" : "82C274F9C74448B7817C504E07F920E3"
    },
    "cell_type" : "markdown",
    "source" : "Now, let's join all the unique `(word,fileName)` pairs together. "
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "8DD3365A4AA2402A9D2556F995961C00"
    },
    "cell_type" : "code",
    "source" : "val uniques = wordFileNameOnes.reduceByKey((count1, count2) => count1 + count2)\nuniques",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "uniques: org.apache.spark.rdd.RDD[((String, String), Int)] = ShuffledRDD[13] at reduceByKey at <console>:77\nres58: org.apache.spark.rdd.RDD[((String, String), Int)] = ShuffledRDD[13] at reduceByKey at <console>:77\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "ShuffledRDD[13] at reduceByKey at &lt;console&gt;:77"
      },
      "output_type" : "execute_result",
      "execution_count" : 35,
      "time" : "Took: 859 milliseconds, at 2016-12-1 17:16"
    } ]
  }, {
    "metadata" : {
      "id" : "340390D700F34A198E099DF39FBBC74D"
    },
    "cell_type" : "markdown",
    "source" : "In SQL you would use `GROUP BY` for this (including SQL queries you might write with Spark's [DataFrame](http://spark.apache.org/docs/latest/sql-programming-guide.html) API). However, in the `RDD` API, this is too expensive for our needs, because we don't care about the groups themselves, the long list of repeated `(word,fileName)` pairs. We only care about how many elements are in each group, that is their _size_. That's the purpose of the `1` in the tuples and the use of `RDD.reduceByKey`. It brings together all records with the same key, the unique `(word,fileName)` pairs, and then applies the anonymous function to \"reduce\" the values, the `1`s. I simply sum them up to compute the group counts.\n\nNote that the anonymous function `reduceByKey` expects must take two arguments, so I need parentheses around the argument list. Since this function fits on the same line, I used parentheses for `reduceByKey`, instead of braces.\n\n> **Note:** All the `*ByKey` methods operate on two-element tuples and treat the first element as the key, by default."
  }, {
    "metadata" : {
      "id" : "93409D472EBF4C07BD74EA733D4D6296"
    },
    "cell_type" : "markdown",
    "source" : "How many are there? Let's see a few:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "17D9B46320474C17BD71A9EDA0F717E9"
    },
    "cell_type" : "code",
    "source" : "uniques.count",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res60: Long = 27276\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "27276"
      },
      "output_type" : "execute_result",
      "execution_count" : 36,
      "time" : "Took: 1 second 478 milliseconds, at 2016-12-1 17:16"
    } ]
  }, {
    "metadata" : {
      "id" : "DC87537AD03041868BF85C6645D4B72D"
    },
    "cell_type" : "markdown",
    "source" : "As you would expect from a `GROUP BY`-like statement, the number of records is smaller than before. There are about 1/6 as many records now, meaning that on average, each `(word,fileName)` combination appears 6 times."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "15493734ED804BC484BF3DF21DEBDF6F"
    },
    "cell_type" : "code",
    "source" : "uniques.take(30).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "((dexterity,merrywivesofwindsor),1)\n((crest,asyoulikeit),1)\n((whole,comedyoferrors),2)\n((lamb,muchadoaboutnothing),2)\n((force,muchadoaboutnothing),2)\n((letter,merrywivesofwindsor),19)\n((blunt,tamingoftheshrew),3)\n((bestow,asyoulikeit),1)\n((rear,midsummersnightsdream),1)\n((crossing,tamingoftheshrew),1)\n((wronged,merrywivesofwindsor),4)\n((S,tamingoftheshrew),10)\n((HIPPOLYTA,midsummersnightsdream),19)\n((revolve,twelfthnight),1)\n((er,merrywivesofwindsor),11)\n((renown,asyoulikeit),1)\n((cubiculo,twelfthnight),1)\n((All,twelfthnight),3)\n((power,loveslabourslost),8)\n((Albeit,asyoulikeit),1)\n((lips,tamingoftheshrew),3)\n((upshot,twelfthnight),1)\n((approach,midsummersnightsdream),4)\n((mean,muchadoaboutnothing),5)\n((embossed,asyoulikeit),1)\n((varnish,loveslabourslost),2)\n((Apollo,midsummersnightsdream),1)\n((spangled,midsummersnightsdream),1)\n((gentlemen,comedyoferrors),1)\n((Rebuke,loveslabourslost),1)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 37,
      "time" : "Took: 937 milliseconds, at 2016-12-1 17:16"
    } ]
  }, {
    "metadata" : {
      "id" : "883847887BD84C2C8AFF71A63A87638F"
    },
    "cell_type" : "markdown",
    "source" : "For _inverted index_, we want our final keys to be the words themselves, so let's restructure the tuples from `((word,fileName),count)` to `(word,(fileName,count))`. Now, I'll still output two-element, key-value tuples, but the `word` will be the key and the `(fileName,count)` tuple will be the value."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B945394B877C4C1D8C601E446D5A856B"
    },
    "cell_type" : "code",
    "source" : "val words = uniques.map { word_file_count_tup3 => \n    (word_file_count_tup3._1._1, (word_file_count_tup3._1._2, word_file_count_tup3._2)) \n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "words: org.apache.spark.rdd.RDD[(String, (String, Int))] = MapPartitionsRDD[14] at map at <console>:79\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 38,
      "time" : "Took: 965 milliseconds, at 2016-12-1 17:28"
    } ]
  }, {
    "metadata" : {
      "id" : "D2412BFCCAE942448B2F0F2A83755325"
    },
    "cell_type" : "markdown",
    "source" : "The nested tuple methods, e.g., `_1._2`, are hard to read, making the logic somewhat obscure. We'll see a beautiful and elegant alternative shortly."
  }, {
    "metadata" : {
      "id" : "8017FCDB61244ABF982FEBD7EDE2FE30"
    },
    "cell_type" : "markdown",
    "source" : "Now I'll use an actual `group by` operation, because I now need to retain the groups. Calling `RDD.groupByKey` uses the first tuple element, now just the `words`, to bring together all occurrences of the unique words. Next, I'll sort the result by word, ascending alphabetically."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "3A55E6B49D8E4E1D85F8DE4B3715F750"
    },
    "cell_type" : "code",
    "source" : "val wordGroups = words.groupByKey.sortByKey(ascending = true)\nwordGroups",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "wordGroups: org.apache.spark.rdd.RDD[(String, Iterable[(String, Int)])] = ShuffledRDD[18] at sortByKey at <console>:81\nres65: org.apache.spark.rdd.RDD[(String, Iterable[(String, Int)])] = ShuffledRDD[18] at sortByKey at <console>:81\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "ShuffledRDD[18] at sortByKey at &lt;console&gt;:81"
      },
      "output_type" : "execute_result",
      "execution_count" : 39,
      "time" : "Took: 1 second 106 milliseconds, at 2016-12-1 17:29"
    } ]
  }, {
    "metadata" : {
      "id" : "EF406143D451401B938CC7CBC3102B54"
    },
    "cell_type" : "markdown",
    "source" : "Note that each group is actually a Scala [Iterable](http://www.scala-lang.org/api/current/index.html#scala.collection.Iterable), i.e., an abstraction for some sort of collection. (It's actually a Spark-defined, private collection type called a `CompactBuffer`.)"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0591CBBB7ED04BC18313CC4B8DD11F22"
    },
    "cell_type" : "code",
    "source" : "wordGroups.count",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res67: Long = 11951\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "11951"
      },
      "output_type" : "execute_result",
      "execution_count" : 40,
      "time" : "Took: 1 second 471 milliseconds, at 2016-12-1 17:29"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0238CC44E40444DDB43D53ACCBBA6513"
    },
    "cell_type" : "code",
    "source" : "wordGroups.take(30).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "(,CompactBuffer((tamingoftheshrew,1), (asyoulikeit,1), (merrywivesofwindsor,1), (comedyoferrors,1), (midsummersnightsdream,1), (twelfthnight,1), (loveslabourslost,1), (muchadoaboutnothing,1)))\n(A,CompactBuffer((loveslabourslost,78), (midsummersnightsdream,39), (muchadoaboutnothing,31), (merrywivesofwindsor,38), (comedyoferrors,42), (asyoulikeit,34), (twelfthnight,47), (tamingoftheshrew,59)))\n(ABOUT,CompactBuffer((muchadoaboutnothing,18)))\n(ACT,CompactBuffer((asyoulikeit,22), (comedyoferrors,11), (tamingoftheshrew,12), (loveslabourslost,9), (muchadoaboutnothing,17), (twelfthnight,18), (merrywivesofwindsor,23), (midsummersnightsdream,9)))\n(ADAM,CompactBuffer((asyoulikeit,16)))\n(ADO,CompactBuffer((muchadoaboutnothing,18)))\n(ADRIANA,CompactBuffer((comedyoferrors,85)))\n(ADRIANO,CompactBuffer((loveslabourslost,111)))\n(AEGEON,CompactBuffer((comedyoferrors,20)))\n(AEMELIA,CompactBuffer((comedyoferrors,16)))\n(AEMILIA,CompactBuffer((comedyoferrors,3)))\n(AEacides,CompactBuffer((tamingoftheshrew,1)))\n(AEgeon,CompactBuffer((comedyoferrors,7)))\n(AEgle,CompactBuffer((midsummersnightsdream,1)))\n(AEmilia,CompactBuffer((comedyoferrors,4)))\n(AEsculapius,CompactBuffer((merrywivesofwindsor,1)))\n(AGUECHEEK,CompactBuffer((twelfthnight,2)))\n(ALL,CompactBuffer((midsummersnightsdream,2), (tamingoftheshrew,2)))\n(AMIENS,CompactBuffer((asyoulikeit,16)))\n(ANDREW,CompactBuffer((twelfthnight,104)))\n(ANGELO,CompactBuffer((comedyoferrors,36)))\n(ANN,CompactBuffer((merrywivesofwindsor,1)))\n(ANNE,CompactBuffer((merrywivesofwindsor,27)))\n(ANTIPHOLUS,CompactBuffer((comedyoferrors,195)))\n(ANTONIO,CompactBuffer((muchadoaboutnothing,32), (twelfthnight,32)))\n(ARMADO,CompactBuffer((loveslabourslost,111)))\n(AS,CompactBuffer((asyoulikeit,24)))\n(AUDREY,CompactBuffer((asyoulikeit,18)))\n(Abate,CompactBuffer((midsummersnightsdream,1), (loveslabourslost,1)))\n(Abbess,CompactBuffer((comedyoferrors,2)))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 41,
      "time" : "Took: 1 second 34 milliseconds, at 2016-12-1 17:29"
    } ]
  }, {
    "metadata" : {
      "id" : "2A2C2E4A954A40718D3E9059EAE0D08C"
    },
    "cell_type" : "markdown",
    "source" : "Finally, let's clean up these `CompactBuffers`. Let's convert each to a Scala [Vector](http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Vector) (a collection with _O(1)_ performance for most operations), then sort it _descending_ by count, so the locations that mention the corresponding word the _most_ appear _first_ in the list. (Think about how you would want a search tool to work...) \n\nNote we're using `Vector.sortBy`, not an `RDD` sorting method. It takes a function that accepts each collection element and returns something used to sort the collection. By returning `(-fileNameCountTuple2._2, fileNameCountTuple2)`, I effectively say, \"sort by the counts _descending_ first, then sort by the file names.\" Why does `-fileNameCountTuple2._2` cause counts to be sorted descending, because I'm returning the negative of the value, so larger counts will be less than smaller counts, e.g., `-3 < -2`.\n\nFinally, I take the resulting `Vector` and make a comma-separated string with the elements, using the helper method `mkString`.\n\nWhat's `RDD.mapValues`? I could use `RDD.map`, but I'm not changing the keys (the words), so rather than have to deal with the tuple with both elements, `mapValues` just passes in the value part of the tuple and reconstructs new `(key,value)` tuples with the new value that my function returns. So, `mapValues` is more convenient to use than `map` when I have two-element tuples and I'm not modifying the keys."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "016D0589F20E40B58212D382F9A2FEC8"
    },
    "cell_type" : "code",
    "source" : "val iiFirstPass2 = wordGroups.mapValues { iterable => \n    val vect = iterable.toVector.sortBy { file_count_tup2 => \n        (-file_count_tup2._2, file_count_tup2._1)\n    }\n    vect.mkString(\",\")\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "iiFirstPass2: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[19] at mapValues at <console>:83\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 42,
      "time" : "Took: 945 milliseconds, at 2016-12-1 17:30"
    } ]
  }, {
    "metadata" : {
      "id" : "7C7007C29F564BBB852779540111D12D"
    },
    "cell_type" : "markdown",
    "source" : "We're done! The number of records is the same as for `wordGroups` (do you understand why?), so let's just see see some of the records."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9F721446ECFC4A5A8A82ECC97D49BF17"
    },
    "cell_type" : "code",
    "source" : "iiFirstPass2.take(30).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "(,(asyoulikeit,1),(comedyoferrors,1),(loveslabourslost,1),(merrywivesofwindsor,1),(midsummersnightsdream,1),(muchadoaboutnothing,1),(tamingoftheshrew,1),(twelfthnight,1))\n(A,(loveslabourslost,78),(tamingoftheshrew,59),(twelfthnight,47),(comedyoferrors,42),(midsummersnightsdream,39),(merrywivesofwindsor,38),(asyoulikeit,34),(muchadoaboutnothing,31))\n(ABOUT,(muchadoaboutnothing,18))\n(ACT,(merrywivesofwindsor,23),(asyoulikeit,22),(twelfthnight,18),(muchadoaboutnothing,17),(tamingoftheshrew,12),(comedyoferrors,11),(loveslabourslost,9),(midsummersnightsdream,9))\n(ADAM,(asyoulikeit,16))\n(ADO,(muchadoaboutnothing,18))\n(ADRIANA,(comedyoferrors,85))\n(ADRIANO,(loveslabourslost,111))\n(AEGEON,(comedyoferrors,20))\n(AEMELIA,(comedyoferrors,16))\n(AEMILIA,(comedyoferrors,3))\n(AEacides,(tamingoftheshrew,1))\n(AEgeon,(comedyoferrors,7))\n(AEgle,(midsummersnightsdream,1))\n(AEmilia,(comedyoferrors,4))\n(AEsculapius,(merrywivesofwindsor,1))\n(AGUECHEEK,(twelfthnight,2))\n(ALL,(midsummersnightsdream,2),(tamingoftheshrew,2))\n(AMIENS,(asyoulikeit,16))\n(ANDREW,(twelfthnight,104))\n(ANGELO,(comedyoferrors,36))\n(ANN,(merrywivesofwindsor,1))\n(ANNE,(merrywivesofwindsor,27))\n(ANTIPHOLUS,(comedyoferrors,195))\n(ANTONIO,(muchadoaboutnothing,32),(twelfthnight,32))\n(ARMADO,(loveslabourslost,111))\n(AS,(asyoulikeit,24))\n(AUDREY,(asyoulikeit,18))\n(Abate,(loveslabourslost,1),(midsummersnightsdream,1))\n(Abbess,(comedyoferrors,2))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 43,
      "time" : "Took: 1 second 165 milliseconds, at 2016-12-1 17:30"
    } ]
  }, {
    "metadata" : {
      "id" : "6FA89C6B99FA4A658F42A726DB7BBF9D"
    },
    "cell_type" : "markdown",
    "source" : "Okay. Looks reasonable. \n\nNext, I'll refine the code using a very powerful feature, _pattern matching_, which both makes the code more concise and easier to understand. It's my *favorite* feature of Scala."
  }, {
    "metadata" : {
      "id" : "D54E35935C124319897560C95FED8D8D"
    },
    "cell_type" : "markdown",
    "source" : "Before I do that, try a few refinements on your own.\n\n**Exercises:**\n\nTry the following exercises in the next cell, which is a copy of `iiFirstPast`:\n\n* Add a filter statement to remove the first entry for the blank word \"\". You could do this one of two ways, using another \"step\" with [RDD.filter](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD) (search the [Scaladoc page]((http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD) for the `filter` method), _or_ using the similar Scala collections method, [scala.collection.Seq.filter](http://www.scala-lang.org/api/current/index.html#scala.collection.Seq). Both versions take a _predicate_ function, one that returns `true` if the record should be _retained_ and `false` otherwise. Do you think one choice is better than the other? Why? Or, are they basically the same? Reasons might include code comprehension and performance of one over the other.\n* Convert all words to lower case. Calling `toLowerCase` on a string is all you need. Where's a good place to insert this logic?\n\nI'll implement both changes in subsequent refinements below."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "F8DFDE55DFC542758E4869AB319A3B81"
    },
    "cell_type" : "code",
    "source" : "val iiFirstPass2 = sc.wholeTextFiles(shakespeare.toString).\n    flatMap { location_contents_tuple2 => \n        val words = location_contents_tuple2._2.split(\"\"\"\\W+\"\"\")\n        val fileName = location_contents_tuple2._1.split(pathSeparator).last\n        words.map(word => ((word, fileName), 1))\n    }.\n    reduceByKey((count1, count2) => count1 + count2).\n    map { word_file_count_tup3 => \n        (word_file_count_tup3._1._1, (word_file_count_tup3._1._2, word_file_count_tup3._2)) \n    }.\n    groupByKey.\n    sortByKey(ascending = true).\n    mapValues { iterable => \n        val vect = iterable.toVector.sortBy { file_count_tup2 => \n            (-file_count_tup2._2, file_count_tup2._1)\n        }\n        vect.mkString(\",\")\n    }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "iiFirstPass2: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[29] at mapValues at <console>:93\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 44,
      "time" : "Took: 1 second 407 milliseconds, at 2016-12-1 17:31"
    } ]
  }, {
    "metadata" : {
      "id" : "6EA7FC67FF83467BAEA808BD865A6EF5"
    },
    "cell_type" : "markdown",
    "source" : "Let's try it!"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "99F32FA708704775B8E7F05E3F9C2255"
    },
    "cell_type" : "code",
    "source" : "iiFirstPass2.take(30).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "(,(asyoulikeit,1),(comedyoferrors,1),(loveslabourslost,1),(merrywivesofwindsor,1),(midsummersnightsdream,1),(muchadoaboutnothing,1),(tamingoftheshrew,1),(twelfthnight,1))\n(A,(loveslabourslost,78),(tamingoftheshrew,59),(twelfthnight,47),(comedyoferrors,42),(midsummersnightsdream,39),(merrywivesofwindsor,38),(asyoulikeit,34),(muchadoaboutnothing,31))\n(ABOUT,(muchadoaboutnothing,18))\n(ACT,(merrywivesofwindsor,23),(asyoulikeit,22),(twelfthnight,18),(muchadoaboutnothing,17),(tamingoftheshrew,12),(comedyoferrors,11),(loveslabourslost,9),(midsummersnightsdream,9))\n(ADAM,(asyoulikeit,16))\n(ADO,(muchadoaboutnothing,18))\n(ADRIANA,(comedyoferrors,85))\n(ADRIANO,(loveslabourslost,111))\n(AEGEON,(comedyoferrors,20))\n(AEMELIA,(comedyoferrors,16))\n(AEMILIA,(comedyoferrors,3))\n(AEacides,(tamingoftheshrew,1))\n(AEgeon,(comedyoferrors,7))\n(AEgle,(midsummersnightsdream,1))\n(AEmilia,(comedyoferrors,4))\n(AEsculapius,(merrywivesofwindsor,1))\n(AGUECHEEK,(twelfthnight,2))\n(ALL,(midsummersnightsdream,2),(tamingoftheshrew,2))\n(AMIENS,(asyoulikeit,16))\n(ANDREW,(twelfthnight,104))\n(ANGELO,(comedyoferrors,36))\n(ANN,(merrywivesofwindsor,1))\n(ANNE,(merrywivesofwindsor,27))\n(ANTIPHOLUS,(comedyoferrors,195))\n(ANTONIO,(muchadoaboutnothing,32),(twelfthnight,32))\n(ARMADO,(loveslabourslost,111))\n(AS,(asyoulikeit,24))\n(AUDREY,(asyoulikeit,18))\n(Abate,(loveslabourslost,1),(midsummersnightsdream,1))\n(Abbess,(comedyoferrors,2))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 45,
      "time" : "Took: 1 second 164 milliseconds, at 2016-12-1 17:31"
    } ]
  }, {
    "metadata" : {
      "id" : "BC161EB30C3B4F4EA5E341E88523BE8C"
    },
    "cell_type" : "markdown",
    "source" : "## Pattern Matching\nWe've studied a real program and we've learned quite a bit of Scala. Let's improve it with my favorite Scala feature, _pattern matching_.\n\nHere's the \"first pass\" version again for easy reference."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "DA1A70091E8E4407A223F8AB9E2F1E62"
    },
    "cell_type" : "code",
    "source" : "val iiFirstPass3 = sc.wholeTextFiles(shakespeare.toString).\n    flatMap { location_contents_tuple2 => \n        val words = location_contents_tuple2._2.split(\"\"\"\\W+\"\"\")\n        val fileName = location_contents_tuple2._1.split(pathSeparator).last\n        words.map(word => ((word, fileName), 1))\n    }.\n    reduceByKey((count1, count2) => count1 + count2).\n    map { word_file_count_tup3 => \n        (word_file_count_tup3._1._1, (word_file_count_tup3._1._2, word_file_count_tup3._2)) \n    }.\n    groupByKey.\n    sortByKey(ascending = true).\n    mapValues { iterable => \n        val vect = iterable.toVector.sortBy { file_count_tup2 => \n            (-file_count_tup2._2, file_count_tup2._1)\n        }\n        vect.mkString(\",\")\n    }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "iiFirstPass3: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[39] at mapValues at <console>:93\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 46,
      "time" : "Took: 1 second 732 milliseconds, at 2016-12-1 17:32"
    } ]
  }, {
    "metadata" : {
      "id" : "B776C7F5F9E04F5B8D15EEEA2B1CDAC2"
    },
    "cell_type" : "markdown",
    "source" : "Now here is a new implementation that uses _pattern matching_. \n\nI've also made two other additions, the solutions to the last exercises, which remove empty words \"\" and fix mixed capitalization, using the following additions:\n* `filter(word => word.size > 0)` to remove the empty words. (In Spark and Scala collections, `filter` has the positive sense; what should be retained?) It's indicated by the comment `// #1`.\n* `word.toLowerCase` to convert all words to lower case uniformly, so that words like HAMLET, Hamlet, and hamlet in the original texts are treated as the same, since we're counting word occurrences. See comment `// #2`."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4AC1B06955A74550AF9304053604DEEC"
    },
    "cell_type" : "code",
    "source" : "val iiPatternMatching = sc.wholeTextFiles(shakespeare.toString).\n  flatMap {\n        case (location, contents) => \n            val words = contents.split(\"\"\"\\W+\"\"\").\n                filter(word => word.size > 0)                      // #1\n            val fileName = location.split(pathSeparator).last\n            words.map(word => ((word.toLowerCase, fileName), 1))   // #2\n    }.\n    reduceByKey((count1, count2) => count1 + count2).\n    map { \n        case ((word, fileName), count) => (word, (fileName, count)) \n    }.\n    groupByKey.\n    sortByKey(ascending = true).\n    mapValues { iterable => \n        val vect = iterable.toVector.sortBy { \n            case (fileName, count) => (-count, fileName) \n        }\n        vect.mkString(\",\")\n    }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "iiPatternMatching: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[49] at mapValues at <console>:95\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 47,
      "time" : "Took: 1 second 448 milliseconds, at 2016-12-1 17:32"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B62E8C2FDBFD46B49A3A1FFC7CFA02AC"
    },
    "cell_type" : "code",
    "source" : "iiPatternMatching.take(10).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "(a,(loveslabourslost,507),(merrywivesofwindsor,494),(muchadoaboutnothing,492),(asyoulikeit,461),(tamingoftheshrew,445),(twelfthnight,416),(midsummersnightsdream,281),(comedyoferrors,254))\n(abandon,(asyoulikeit,4),(tamingoftheshrew,1),(twelfthnight,1))\n(abate,(loveslabourslost,1),(midsummersnightsdream,1),(tamingoftheshrew,1))\n(abatement,(twelfthnight,1))\n(abbess,(comedyoferrors,8))\n(abbey,(comedyoferrors,9))\n(abbominable,(loveslabourslost,1))\n(abbreviated,(loveslabourslost,1))\n(abed,(asyoulikeit,1),(twelfthnight,1))\n(abetting,(comedyoferrors,1))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 48,
      "time" : "Took: 1 second 236 milliseconds, at 2016-12-1 17:32"
    } ]
  }, {
    "metadata" : {
      "id" : "667841BDEC2144649AB392459097729A"
    },
    "cell_type" : "markdown",
    "source" : "There are more things we can do with pattern matching. We'll return to it below."
  }, {
    "metadata" : {
      "id" : "8881B4F7C5914C4380FCE7C450174D29"
    },
    "cell_type" : "markdown",
    "source" : "Let's understand this code. First, compare how I did the filtering for empty words and conversion to lower case with your exercise solutions above. Inside the function passed to `flatMap`, I filtered for empty words immediately after splitting the contents into words and I converted to lower case as I constructed the new tuples. My choice reduces the number of output records from `flatMap` by at most one record per input line, which shouldn't have a significant impact on performance. Filtering itself adds some extra overhead. \n\nAlso, the way Spark implements steps like `map`, `flatMap`, `filter`, it would incur about the same overhead if I added an `RDD.filter` step instead. Note that we could also do the filtering later in the pipeline, after `groupByKey`, for example. So, whichever approach you implemented above is probably fine. You could do performance profiling of the different approaches, but you may not notice a significance difference until you use very large input data sets."
  }, {
    "metadata" : {
      "id" : "ED3DB6B5E11C456D802DCB3C78D9BCE0"
    },
    "cell_type" : "markdown",
    "source" : "The function I pass to `flatMap` now looks like this:\n\n```scala\nflatMap { \n    case (location, contents) => \n        val words = contents.split(\"\"\"\\W+\"\"\").\n            filter(word => word.size > 0)                      // #1\n        val fileName = location.split(pathSeparator).last\n        words.map(word => ((word.toLowerCase, fileName), 1))   // #2\n}.\n```\n\nCompare it to the previous version (ignoring the enhancements for blank words and capitalization, marked with the \\#1 and \\#2 comments):\n\n```scala\nflatMap { location_contents_tuple2 => \n    val words = location_contents_tuple2._2.split(\"\"\"\\W+\"\"\")\n    val fileName = location_contents_tuple2._1.split(pathSeparator).last\n    words.map(word => ((word, fileName), 1))\n}.\n```    \n\nInstead of `location_contents_tuple2` a variable name for the whole tuple, I wrote `case (location, contents)`. The `case` keyword says I want to _pattern match_ on the object passed to the function. If it's a two-element tuple (and I know it always will be in this case), then _extract_ the first element and assign it to a variable named `location` and extract the second element and assign it to a variable named `contents`.\n\nNow, instead of accessing the location and content with the slighly obscure and verbose `location_contents_tuple2._1` and `location_contents_tuple2._2`, respectively, I use meaningful names, `location` and `contents`. The code becomes more concise and more readable. \n\nThis special function syntax is called a _partial function_. It's partial in the sense that it might only handle some inputs, not all possible inputs, which would make it _total_. Partial functions have the form:\n```scala\n{                             // Opening curly brace (you can't use parentheses here)\n  case pattern1 => body1      // First pattern and body. For multi-line bodies, put on next lines.\n  case pattern2 => body2      // Second pattern and body (optional).\n  ...                         // Optional additional patterns.\n}                             // Closing curly brace.\n```\nEach record will be tested against the patterns, in order, until a match is found. In our case, we know the format will be a two-element tuple, so `case (location, contents)` matches perfectly and only one `case` clause is required. If I fail to match any of the patterns, an exception is thrown."
  }, {
    "metadata" : {
      "id" : "F6C55F95192341F6844A0B38FB7FAA49"
    },
    "cell_type" : "markdown",
    "source" : "The `reduceByKey` step is unchanged:\n\n```scala\nreduceByKey((count1, count2) => count1 + count2).\n```\n\nTo be clear, this isn't a pattern-matching expression; there is no `case` keyword. It's just a \"regular\" function that takes two arguments, for the two things I'm adding."
  }, {
    "metadata" : {
      "id" : "2F1C2C9070EA40978BEBDA56AB35E0C2"
    },
    "cell_type" : "markdown",
    "source" : "My favorite improvement is the next line:\n\n```scala\nmap { \n    case ((word, fileName), count) => (word, (fileName, count)) \n}.\n```\n\nCompare it to the previous, obscure version:\n\n```\nmap { word_file_count_tup3 => \n    (word_file_count_tup3._1._1, (word_file_count_tup3._1._2, word_file_count_tup3._2)) \n}.\n```\n\nThe new implementation makes it clear what I'm doing; just shifting parentheses! That's all it takes to go from the `(word, fileName)` keys with `count` values to `word` keys and `(fileName, count)` values. Note that pattern matching works just fine with nested structures, like `((word, fileName), count)`.\n\nI hope you can appreciate how elegant and concise this expression is! Note how I thought of the next transformation I needed to do in preparation for the final group-by, to switch from `((word, fileName), count)` to `(word, (fileName, count))` and _I just wrote it down exactly as I pictured it!_\n\nCode like this makes writing Scala Spark code a sublime experience for me. I hope it will for you, too ;)"
  }, {
    "metadata" : {
      "id" : "7CE480B558D4474487CFA6D9C9998E65"
    },
    "cell_type" : "markdown",
    "source" : "The next two expressions are unchanged:\n\n```scala\ngroupByKey.\nsortByKey(ascending = true).\n```"
  }, {
    "metadata" : {
      "id" : "37961770ADD046038ED932DA56C9352A"
    },
    "cell_type" : "markdown",
    "source" : "The final `mapValues` now uses pattern matching to sort the `Vector` in each record:\n\n```scala\nmapValues { iterable => \n    val vect = iterable.toVector.sortBy { \n        case (fileName, count) => (-count, fileName) \n    }\n    vect.mkString(\",\")\n}\n```\n\nCompared to the original version, it's again easier to read:\n\n```scala\nmapValues { iterable => \n    val vect = iterable.toVector.sortBy { file_count_tup2 => \n        (-file_count_tup2._2, file_count_tup2._1)\n    }\n    vect.mkString(\",\")\n}\n```\n\nThe function I pass to `sortBy` returns a tuple used for sorting, with `-count` to force _descending_ numerical sort (biggest first) and `fileName` to secondarily sort by the file name, for equivalent counts. I could ignore file name order and just return `-count` (not a tuple). However, if you need more repeatable output in a distributed system like Spark, say for example to use in unit test validation, then the secondary sorting by file name is handy."
  }, {
    "metadata" : {
      "id" : "C132921850FE48A28107BF629F5AC29F"
    },
    "cell_type" : "markdown",
    "source" : "Compare this code to `iiFirstPass3`. It is much clearer to write just the constituents and the literal representations of their nested structures in parentheses, rather than using tuple variable with accessors, like `_1` and `_2`."
  }, {
    "metadata" : {
      "id" : "AEFCD90AF8BF4D9C8944AAAC966D885D"
    },
    "cell_type" : "markdown",
    "source" : "Let's verify we still get reasonable results. Let's also transition to Spark's [DataFrame](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.DataFrame) API for its convenient display options. `DataFrames` are part of [Spark SQL](http://spark.apache.org/docs/latest/sql-programming-guide.html). We'll start by creating an instance of [SparkSession](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.SparkSession) that we need to access these features. In Spark 1.6.X, you would create a [SQLContext](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.SQLContext) instead. The comments show the pre-2.X way to create a `SQLContext`, which is still available, but deprecated."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "ABB91A9A1526418A8BDAFA19CD2DD5FB"
    },
    "cell_type" : "code",
    "source" : "// Spark 1.6:\n// import org.apache.spark.sql.SQLContext\n// val sqlContext = new SQLContext(sc)\n// Here's the new way, where we create a SparkSession instead, conventionally named \"spark\".\nimport org.apache.spark.sql.SparkSession\nval spark = SparkSession.builder().getOrCreate()",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.sql.SparkSession\nspark: org.apache.spark.sql.SparkSession = org.apache.spark.sql.SparkSession@6e99223a\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 52,
      "time" : "Took: 968 milliseconds, at 2016-12-1 17:36"
    } ]
  }, {
    "metadata" : {
      "id" : "DF19D2277A81408F831B7715AC5A62CD"
    },
    "cell_type" : "markdown",
    "source" : "Now convert the `RDD` to a `DataFrame` with `spark.createDataFrame`, then use `toDF` (convert to another `DataFrame`?) with new names for each \"column\". (If you want to back port this code to Spark 1.6.X, either rename `spark` to `sqlContext`, the conventional name for a `SQLContext` instance, or just use the name `spark` for the instance.)"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "5E1532F5A88042F685A3E759E749B2E1"
    },
    "cell_type" : "code",
    "source" : "val iiPatternMatchingDF = spark.createDataFrame(iiPatternMatching).toDF(\"word\", \"locations_counts\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "iiPatternMatchingDF: org.apache.spark.sql.DataFrame = [word: string, locations_counts: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 53,
      "time" : "Took: 1 second 118 milliseconds, at 2016-12-1 17:40"
    } ]
  }, {
    "metadata" : {
      "id" : "D047BDFA0EC64794865588169B7BB8D4"
    },
    "cell_type" : "markdown",
    "source" : "If we ask for the value of a DataFrame, Spark Notebook renders it with a paged, table view."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "92EAFF4259D84EAD8076DFE88562A1ED"
    },
    "cell_type" : "code",
    "source" : "iiPatternMatchingDF",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res87: org.apache.spark.sql.DataFrame = [word: string, locations_counts: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon208cd4dff6fcb1b8c83757f1bc04db73&quot;,&quot;partitionIndexId&quot;:&quot;anon14d4563bed3cf3f92271be75f19367fd&quot;,&quot;numPartitions&quot;:417,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;word&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;locations_counts&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 54,
      "time" : "Took: 3 seconds 152 milliseconds, at 2016-12-1 17:40"
    } ]
  }, {
    "metadata" : {
      "id" : "F727F2C7B2F947E483DFC84BE7E9C429"
    },
    "cell_type" : "markdown",
    "source" : "You could also use the `show` command, especially when using the `spark-shell`. It has two optional arguments:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "C401CCFF8B244318A035975A6AFC41B6"
    },
    "cell_type" : "code",
    "source" : "iiPatternMatchingDF.show(truncate=false, numRows=5)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n|word     |locations_counts                                                                                                                                                                       |\n+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n|a        |(loveslabourslost,507),(merrywivesofwindsor,494),(muchadoaboutnothing,492),(asyoulikeit,461),(tamingoftheshrew,445),(twelfthnight,416),(midsummersnightsdream,281),(comedyoferrors,254)|\n|abandon  |(asyoulikeit,4),(tamingoftheshrew,1),(twelfthnight,1)                                                                                                                                  |\n|abate    |(loveslabourslost,1),(midsummersnightsdream,1),(tamingoftheshrew,1)                                                                                                                    |\n|abatement|(twelfthnight,1)                                                                                                                                                                       |\n|abbess   |(comedyoferrors,8)                                                                                                                                                                     |\n+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\nonly showing top 5 rows\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 55,
      "time" : "Took: 1 second 296 milliseconds, at 2016-12-1 17:40"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "8155E017145448248295E0EDB873D20D"
    },
    "cell_type" : "code",
    "source" : "iiPatternMatchingDF.printSchema",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "root\n |-- word: string (nullable = true)\n |-- locations_counts: string (nullable = true)\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 56,
      "time" : "Took: 925 milliseconds, at 2016-12-1 17:40"
    } ]
  }, {
    "metadata" : {
      "id" : "C224719DD3084F0A9D81A85E693E40D1"
    },
    "cell_type" : "markdown",
    "source" : "## Our Final Version: Supporting SQL Queries\nTo play with some more Spark, let's write SQL queries to explore the resulting data. \n\nTo do this, let's first refine the output. Instead of creating a string for the list of `(location,count)` pairs, which is opaque to our SQL schema (i.e., just a string), let's \"unzip\" the collection into two arrays, one for the `locations` and one for the `counts`. That way, if we ask for the first element of each array, we'll have nicely separate fields that work better with Spark SQL queries.\n\n\"Zipping\" and \"unzipping\" work like a mechanical zipper. If I have a collection of tuples, say `List[(String, Int)]`, I convert this single collection of \"zippered\" values into two collections (in a tuple) of single values, `(List[String], List[Int])`. Zipping is the inverse operation.\n\nHere is our final implementation, `ii1` rewritten with this change."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "120CBF8222CD4483BB8DD4EBDC7A3ED5"
    },
    "cell_type" : "code",
    "source" : "val ii = sc.wholeTextFiles(shakespeare.toString).\n    flatMap {\n        case (location, contents) => \n            val words = contents.split(\"\"\"\\W+\"\"\").\n                filter(word => word.size > 0)                      // #1\n            val fileName = location.split(pathSeparator).last\n            words.map(word => ((word.toLowerCase, fileName), 1))   // #2\n    }.\n    reduceByKey((count1, count2) => count1 + count2).\n    map { \n        case ((word, fileName), count) => (word, (fileName, count)) \n    }.\n    groupByKey.\n    sortByKey(ascending = true).\n    map {                         // Must use map now, because we'll format new records. \n      case (word, iterable) =>    // Hence, pattern match on the whole input record.\n\n        val vect = iterable.toVector.sortBy { \n            case (fileName, count) => (-count, fileName) \n        }\n\n        // Use `Vector.unzip`, which returns a single, two element tuple, where each\n        // element is a collection, one for the locations and one for the counts. \n        // I use pattern matching to extract these two collections into variables.\n        val (locations, counts) = vect.unzip  \n        \n        // Lastly, I'll compute the total count across all locations and return \n        // a new record with all four fields. The `reduceLeft` method takes a function\n        // that knows how to \"reduce\" the collection down to a final value, working \n        // from the left.\n        val totalCount = counts.reduceLeft((n1,n2) => n1+n2)\n        \n        (word, totalCount, locations, counts)\n    }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "ii: org.apache.spark.rdd.RDD[(String, Int, scala.collection.immutable.Vector[String], scala.collection.immutable.Vector[Int])] = MapPartitionsRDD[73] at map at <console>:98\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 57,
      "time" : "Took: 1 second 930 milliseconds, at 2016-12-1 17:41"
    } ]
  }, {
    "metadata" : {
      "id" : "DE48F43EDC0B4FE983B358F999D1F00F"
    },
    "cell_type" : "markdown",
    "source" : "We've changed the ending `mapValues` call to a `map` call, because we'll construct entirely new records, not just new values with the same keys. Hence the full records, two-element tuples are passed in, rather than just the values, so we'll pattern match on the tuple:\n\n\n```scala\n    map {                         // Must use map now, because we'll format new records.\n      case (word, iterable) =>    // Hence, pattern match on the whole input record.\n\n        val vect = iterable.toVector.sortBy { \n            case (fileName, count) => (-count, fileName) \n        }\n```\n\n\nWe have a `Vector[String, Int]` of two-element tuples `(fileName, count)`. We use `Vector.unzip` to create a single, two element tuple, where each element is now a collection, one for the locations and one for the counts. The type is `(Vector[String], Vector[Int])`.\n\nWe can also use pattern matching with assignment! We immediately decompose the two-element tuple:\n\n```scala\n        // I use pattern matching to extract these two collections into variables.\n        val (locations, counts) = vect.unzip  \n```\n\nFinally, it's convenient to know how many locations and counts we have, so we'll compute another new column for the their count and format a four-element tuple as the final output.\n\n```scala\n        // Lastly, I'll compute the total count across all locations and return \n        // a new record with all four fields. The `reduceLeft` method takes a function\n        // that knows how to \"reduce\" the collection down to a final value, working \n        // from the left.\n        val totalCount = counts.reduceLeft((n1,n2) => n1+n2)\n\n        (word, totalCount, locations, counts)\n    }\n```    "
  }, {
    "metadata" : {
      "id" : "1B97941817A049CAA7F89263D1D8BFE6"
    },
    "cell_type" : "markdown",
    "source" : "Okay! Now let's create a [DataFrame](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.DataFrame) with this data. The `toDF` method just returns the same `DataFrame`, but with appropriate names for the columns, instead of the synthesized names that `createDataFrame` generates (e.g., `_c1`, `_c2`, etc.)\n\nCaching the `DataFrame` in memory prevents Spark from recomputing `ii` from the input files _every time_ I write a query!\n\nFinally, to use SQL, I need to \"register\" a temporary table."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "ACACA5AC5DF9489CA03EFE559847B9D5"
    },
    "cell_type" : "code",
    "source" : "val iiDF = spark.createDataFrame(ii).toDF(\"word\", \"total_count\", \"locations\", \"counts\")\niiDF.cache\niiDF.createOrReplaceTempView (\"inverted_index\")  // Use registerTempTable for Spark 1.6.X",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "iiDF: org.apache.spark.sql.DataFrame = [word: string, total_count: int ... 2 more fields]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 59,
      "time" : "Took: 1 second 431 milliseconds, at 2016-12-1 17:41"
    } ]
  }, {
    "metadata" : {
      "id" : "B3E7EFA85D784E519ABA70036450AB3F"
    },
    "cell_type" : "markdown",
    "source" : "Let's remind ourselves of the schema:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A0FF2B70D76043318104BAD9ECF67BF5"
    },
    "cell_type" : "code",
    "source" : "iiDF.printSchema",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "root\n |-- word: string (nullable = true)\n |-- total_count: integer (nullable = false)\n |-- locations: array (nullable = true)\n |    |-- element: string (containsNull = true)\n |-- counts: array (nullable = true)\n |    |-- element: integer (containsNull = false)\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 60,
      "time" : "Took: 1 second 148 milliseconds, at 2016-12-1 17:42"
    } ]
  }, {
    "metadata" : {
      "id" : "DD372976F9D44EC48FEB02697BF7AE74"
    },
    "cell_type" : "markdown",
    "source" : "The following SQL query extracts the top location by count for each word, as well as the total count across all locations for the word. The Spark SQL dialect supports Hive SQL syntax for extracting elements from arrays, maps, and structs ([details](https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF#LanguageManualUDF-CollectionFunctions)). Here I access the first element (index zero) from each array. "
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B5A8A092E0C84E4E87112E0181CE38B5"
    },
    "cell_type" : "code",
    "source" : ":sql SELECT word, total_count, locations[0] AS top_location, counts[0] AS top_count \nFROM inverted_index \n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import notebook.front.widgets.Sql\nimport notebook.front.widgets.Sql._\nres100: notebook.front.widgets.Sql = <Sql widget>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anond2fc78069cc1b1a88dba50a38a93371a&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p><p data-bind=\"text: value\">\n      <script data-this=\"{&quot;valueId&quot;:&quot;anonf9ad365771b9c2e58480d92d9421d174&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/ req(\n              ['observable', 'knockout'],\n              function (O, ko) {\n                ko.applyBindings({\n                    value: O.makeObservable(valueId)\n                  },\n                  this\n                );\n              }\n            );\n        /*]]>*/</script>\n    </p>"
      },
      "output_type" : "execute_result",
      "execution_count" : 61,
      "time" : "Took: 1 second 267 milliseconds, at 2016-12-1 17:42"
    } ]
  }, {
    "metadata" : {
      "id" : "6C6F9CAE64B6461883CB25DCA0575F3F"
    },
    "cell_type" : "markdown",
    "source" : "Unfortunately, a current Spark Notebook bug prevents us from seeing the result of the query, so let's use the Scala API to run it. Note that we'll use a triple-quoted string to make it easy to write the query across several lines. Since we assign the result to a variable, in order to see the table output, we ask for the value of `topLocations` after the assignment."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "7AF28C5FA07B4F2794DB32A75B04B703"
    },
    "cell_type" : "code",
    "source" : "val topLocations = spark.sql(\"\"\"\nSELECT word, total_count, locations[0] AS top_location, counts[0] AS top_count \nFROM inverted_index \n\"\"\")\ntopLocations",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "topLocations: org.apache.spark.sql.DataFrame = [word: string, total_count: int ... 2 more fields]\nres104: org.apache.spark.sql.DataFrame = [word: string, total_count: int ... 2 more fields]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon43180a38422690889909c652e7ea722e&quot;,&quot;partitionIndexId&quot;:&quot;anonb91bb966cf36ad56af95ba75f32fac94&quot;,&quot;numPartitions&quot;:417,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;word&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;total_count&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:false,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;top_location&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;top_count&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 63,
      "time" : "Took: 1 second 360 milliseconds, at 2016-12-1 17:42"
    } ]
  }, {
    "metadata" : {
      "id" : "C24DF412925D422F963BA25EF2B0676F"
    },
    "cell_type" : "markdown",
    "source" : "A _natural language processing_ (NLP) expert might tell you that _love_, _loved_, _loves_, etc. are really the same word, because they are different conjugations of the verb _to love_ and _love_ is a noun, too. Similarly, should _gloves_ (plural) and _glove_ (singular) be handled differently?\n\nWhat we really should do is extract the _stems_ of these words and use those instead. NLP toolkits handle this _stemming_ for you."
  }, {
    "metadata" : {
      "id" : "489DD9FF400A4109BF9B637B99269313"
    },
    "cell_type" : "markdown",
    "source" : "**Exercises:** \n\nSee the <a href=\"#ExerciseSolutions\">Appendix</a> for the solutions to the first two exercises.\n\n* The `glove`, `gloves`, `whate` and `whatever` aren't really the `love` and `hate` we wanted ;) How might you change the query so be more specific.\n* Modify the query to return the top two locations and counts.\n* Before moving on, try writing other queries. Edit the query in the following cell:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9EE20BF733134708B2531403E13C20C4"
    },
    "cell_type" : "code",
    "source" : "val sql1 = spark.sql(\"\"\"\n    SELECT * FROM inverted_index\n\"\"\")\nsql1.show(10, false)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+-----------+-----------+------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------+\n|word       |total_count|locations                                                                                                                                       |counts                                  |\n+-----------+-----------+------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------+\n|a          |3350       |[loveslabourslost, merrywivesofwindsor, muchadoaboutnothing, asyoulikeit, tamingoftheshrew, twelfthnight, midsummersnightsdream, comedyoferrors]|[507, 494, 492, 461, 445, 416, 281, 254]|\n|abandon    |6          |[asyoulikeit, tamingoftheshrew, twelfthnight]                                                                                                   |[4, 1, 1]                               |\n|abate      |3          |[loveslabourslost, midsummersnightsdream, tamingoftheshrew]                                                                                     |[1, 1, 1]                               |\n|abatement  |1          |[twelfthnight]                                                                                                                                  |[1]                                     |\n|abbess     |8          |[comedyoferrors]                                                                                                                                |[8]                                     |\n|abbey      |9          |[comedyoferrors]                                                                                                                                |[9]                                     |\n|abbominable|1          |[loveslabourslost]                                                                                                                              |[1]                                     |\n|abbreviated|1          |[loveslabourslost]                                                                                                                              |[1]                                     |\n|abed       |2          |[asyoulikeit, twelfthnight]                                                                                                                     |[1, 1]                                  |\n|abetting   |1          |[comedyoferrors]                                                                                                                                |[1]                                     |\n+-----------+-----------+------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------+\nonly showing top 10 rows\n\nsql1: org.apache.spark.sql.DataFrame = [word: string, total_count: int ... 2 more fields]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 64,
      "time" : "Took: 1 second 404 milliseconds, at 2016-12-1 17:42"
    } ]
  }, {
    "metadata" : {
      "id" : "19CA443F73DC490A9373828770C659E9"
    },
    "cell_type" : "markdown",
    "source" : "#### Removing the \"Stop Words\"\nDid you notice that one record we saw above was for the word \"a\". Not very useful if you're using this data for text searching, _sentiment mining_, etc. So called _stop words_, like _a_, _an_, _the_, _he_, _she_, _it_, etc., could also be removed.\n\nRecall the `filter` logic I added to remove \"\", `word => word.size > 0`. I could replace it with `word => keep(word)`, where `keep` is a method that does any additional filtering I want, like removing stop words.\n\n**Exercise:**\n\n* Implement the `keep(word: String):Boolean` method and change the `filter` function to use it. Have `keep` return `false` for a small, hard-coded list of stop words (make up your own list or search for one). (See the <a href=\"#ExerciseSolutions\">Appendix</a> for the solution.)"
  }, {
    "metadata" : {
      "id" : "53E07BA2AC3842E98DD0F66A5CF845EB"
    },
    "cell_type" : "markdown",
    "source" : "## More on Pattern Matching Syntax\nWe've only scratched the surface of pattern matching. Let's explore it some more.\n\nHere's another anonymous function using pattern matching that extends the previous function we passed to `flatMap`:\n\n```scala\n{\n    case (location, \"\") => \n        Array.empty[((String, String), Int)]  // Return an empty array\n    case (location, contents) => \n        val words = contents.split(\"\"\"\\W+\"\"\")\n        val fileName = location.split(pathSep).last\n        words.map(word => ((word, fileName), 1))\n}.\n```\n\nYou can have multiple `case` clauses, some of which might match on specific literal values (\"\" in this case) and others which are more general. The first case clause handles files with no content. The second clause is the same as before.\n\nPattern matching is _eager_. The first successful match in the order as written will win. If you reversed the order here, the `case (location, \"\")` would never match and the compiler would throw an \"unreachable code\" warning for it.\n\nNote that you don't have to put the lines after the `=>` inside braces, `{...}` (although you can). The `=>` and `case` keywords (or the final `}`) are sufficient to mark these blocks. Also, for a single-expression block, like the one for the first case clause, you can put the expression on the same line after the `=>` if you want (and it fits). \n\nFinally, if none of the case clauses matches, then a [MatchError](http://www.scala-lang.org/api/current/index.html#scala.MatchError) exception is thrown. In our case, we _always_ know we'll have two-element tuples, so the examples so far are fine. \n\nHere's a final contrived example to illustrate what's possible, using a sequence of objects of different types:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A22422DA7F56403F83517E1DAD19D2A3"
    },
    "cell_type" : "code",
    "source" : "val stuff = Seq(1, 3.14159, 2L, 4.4F, (\"one\", 1), (404F, \"boo\"), ((11, 12), 21, 31), \"hello\")\n\nstuff.foreach {\n    case i: Int               => println(s\"Found an Int:   $i\")\n    case l: Long              => println(s\"Found a Long:   $l\")\n    case f: Float             => println(s\"Found a Float:  $f\")\n    case d: Double            => println(s\"Found a Double: $d\")\n    case (x1, x2) => \n        println(s\"Found a two-element tuple with elements of arbitrary type: ($x1, $x2)\")\n    case ((x1a, x1b), _, x3) => \n        println(s\"Found a three-element tuple with 1st and 3th elements: ($x1a, $x1b) and $x3\")\n    case default              => println(s\"Found something else: $default\")\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Found an Int:   1\nFound a Double: 3.14159\nFound a Long:   2\nFound a Float:  4.4\nFound a two-element tuple with elements of arbitrary type: (one, 1)\nFound a two-element tuple with elements of arbitrary type: (404.0, boo)\nFound a three-element tuple with 1st and 3th elements: (11, 12) and 31\nFound something else: hello\nstuff: Seq[Any] = List(1, 3.14159, 2, 4.4, (one,1), (404.0,boo), ((11,12),21,31), hello)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 65,
      "time" : "Took: 1 second 398 milliseconds, at 2016-12-1 17:43"
    } ]
  }, {
    "metadata" : {
      "id" : "8BB870235FCB4763898579F65A6B293E"
    },
    "cell_type" : "markdown",
    "source" : "A few notes.\n* A literal like `1` is inferred to be `Int`, while `3.14159` is inferred to be `Double`. Add `L` or `F`, respectively, to infer `Long` or `Float` instead.\n* Note how we mixed specific type checking, e.g., `i: Int`, with more loosely-typed expressions, e.g., `(x1, x2)`, which expects a two-element tuple, but the element types are unconstrained.\n* All the words `i`, `l`, `f`, `d`, `x1`, `x2`, `x3`, and `default` are arbitrary variable names. Yes `default` is not a keyword, but an arbitrary choice for a variable name. We could use anything we want.\n* The last `default` clause specifies a variable with no type information. Hence, it matches _anything_, which is why this clause must appear last. This is the idiom to use when you aren't sure about the types of things you're matching against and you want to avoid a possible [MatchError](http://www.scala-lang.org/api/current/index.html#scala.MatchError).\n* If you want to match that something _exists_, but you don't need to bind it to a variable, then use `_`, as in the three-element tuple example.\n* The three-element tuple example also demonstrates that arbitrary nesting of expressions is supported, where the first element is expected to be a two-element tuple.\n\nAll the anonymous functions we've seen that use these pattern matching clauses have this format:\n\n```scala\n{ \n    case firstCase => ...\n    case secondCase => ...\n    ... \n}```\n\nThis format has a special name. It's called a _partial function_. All that means is that we only \"promise\" to accept arguments that match at least one of our `case` clauses, not any possible input. \n\nThe other kind of anonymous function we've seen is a _total function_, to be precise. \n\nRecall we said that for total functions you can use either `(...)` or `{...}` around them, depending on the \"look\" you want. For _partial functions_, you _must_ use `{...}`."
  }, {
    "metadata" : {
      "id" : "3987C83C80DB4EC18399001B6148F0E4"
    },
    "cell_type" : "markdown",
    "source" : "Also, recall that we used pattern matching with assignment:\n\n```scala\nval (locations, counts) = vect.unzip  \n```\n[Vector.unzip](http://www.scala-lang.org/api/current/#scala.collection.immutable.Vector) returns a two-element tuple, where each element is a collection. We matched on that tuple and assigned each piece to a variable. Here's another contrived example, with nested tuple elements:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "F0BEF4E415EA47088CA07F8BDFD44E5D"
    },
    "cell_type" : "code",
    "source" : "val (a, (b, (c1, c2), d)) = (\"A\", (\"B\", (\"C1\", \"C2\"), \"D\"))\nprintln(s\" $a, $b, $c1, $c2, $d\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : " A, B, C1, C2, D\na: String = A\nb: String = B\nc1: String = C1\nc2: String = C2\nd: String = D\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 66,
      "time" : "Took: 1 second 334 milliseconds, at 2016-12-1 17:55"
    } ]
  }, {
    "metadata" : {
      "id" : "1EB1D204C073428E8226BDB65A013FF5"
    },
    "cell_type" : "markdown",
    "source" : "Try adding an `\"E\"` element to the tuple on the right-hand side, without changing the left-hand side. What happens? Try removing the `\"D\"` and `\"E\"` elements. What happens now?"
  }, {
    "metadata" : {
      "id" : "28CECBF1777C42E296EFB0CE1C6F858D"
    },
    "cell_type" : "markdown",
    "source" : "We'll come back to one last example of pattern matching when we discuss _case classes_."
  }, {
    "metadata" : {
      "id" : "DF36806F348A4FC0B7EA0E17824ACFCC"
    },
    "cell_type" : "markdown",
    "source" : "# \"Scala for Spark 102\"\nWe've covered a lot already in this notebook, focusing on the most important topics you need to know about Scala for daily use. Let's call them the \"Scala for Spark 101\" material.\n\nAt this point, I suggest you create a new notebook and play with Spark using what you've learned so far, then come back to this point if you run into something we didn't cover already. Chances are you're ready to learn the next bits of useful Scala, the \"102\" material."
  }, {
    "metadata" : {
      "id" : "F3356D8DF39442A6BED7894FC07F5D23"
    },
    "cell_type" : "markdown",
    "source" : "## What Runs Where?\nConsider Spark code like the following:\n```scala\nmyRDD.map { \n  case ((word, fileName), count) => (word, (fileName, count)) \n}\n```\nIt's completely unobvious where this code actually _runs_. In a typical compiled Scala program or the Scala interpreter, it would all run in the process of the program or interpreter. That's also true when you use local mode for Spark, but _not_ when you run in a cluster.\n\nLocally and in a cluster situation, your _driver_ program (including the Spark shell) runs the `myRDD.map` code immediately, which constructs a directed, acyclic graph (DAG) of processing steps to run _later_, when you ask for results. In other words, Spark is lazy and only runs the computation on demand. So, what happens to the function passed to `map` in this case? \n\nSpark serializes the function so it can be transmitted to nodes on the cluster for execution. Even in local mode it serializes the code, even though it will be executed in the same JVM process as your driver.\n\nUsually, all this is transparent to you, but sometimes you'll write a function that can't be serialized and you'll get a `NotSerializable` exception. Spark tries to tell you what part of the function isn't serializable, but usually your function references something outside, like a field in an enclosing class, and that pulls in data structures that can't be serialized. I won't discuss this issue further here, but you can search for longer explanations and workarounds."
  }, {
    "metadata" : {
      "id" : "BD1881613BF4402DA92CDC11B060B93A"
    },
    "cell_type" : "markdown",
    "source" : "## Scala's Object Model\nScala is a _hybrid_, object-oriented and functional programming language. The philosophy of Scala is that you exploit object orientation for encapsulation of details, i.e., _modularity_, but use functional programming for its logical precision when implementing those details. Most of what we've seen so far falls into the functional programming camp. Much of data manipulation and analysis is really Mathematics. Functional programming tries to stay close to how functions and values work in Mathematics.\n\nHowever, when writing non-trivial Spark programs, it's occasionally useful to exploit the object-oriented features."
  }, {
    "metadata" : {
      "id" : "4855076A7BC54D6C97D33A64EEFA0965"
    },
    "cell_type" : "markdown",
    "source" : "### Classes vs. Instances\nScala uses the same distinction between classes and instances that you find in Java. Classes are like _templates_ used to create instances. \n\nWe've talked about the _types_ of things, like `word` is a `String` and `totalCount` is an `Int`. A class defines a _type_ in the same sense.\n\nHere is an example class that we might use to represent the inverted index records we just created:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "E669C6B01CFE4ECCA6697FE314017013"
    },
    "cell_type" : "code",
    "source" : "class IIRecord1(\n    word: String, \n    total_count: Int, \n    locations: Array[String], \n    counts: Array[Int]) {\n    \n    /** CSV formatted string, but use [a,b,c] for the arrays */\n    override def toString: String = {\n        val locStr = locations.mkString(\"[\", \",\", \"]\")  // i.e., \"[a,b,c]\"\n        val cntStr = counts.mkString(\"[\", \",\", \"]\")  // i.e., \"[1,2,3]\"\n        s\"$word,$total_count,$locStr,$cntStr\"\n    }\n}\n\nnew IIRecord1(\"hello\", 3, Array(\"one\", \"two\"), Array(1, 2))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined class IIRecord1\nres112: IIRecord1 = hello,3,[one,two],[1,2]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "hello,3,[one,two],[1,2]"
      },
      "output_type" : "execute_result",
      "execution_count" : 67,
      "time" : "Took: 694 milliseconds, at 2016-12-1 17:56"
    } ]
  }, {
    "metadata" : {
      "id" : "258FF28F533148E9828A26183A19E9F4"
    },
    "cell_type" : "markdown",
    "source" : "When defining a class, the argument list after the class name is the argument list for the _primary constructor_. You can define secondary constructors, too, but it's not very common, in part for reasons we'll see shortly.\n\nNote that when you override a method that's defined in a parent class, like Java's `Object.toString`, Scala requires you to add the `override` keyword.\n\nWe created an _instance_ of `IIRecord1` using `new`, just like in Java.\n\nFinally, as a side note, we've been using `Ints` (integers) all along for the various counts, but really for \"big data\", we should probably use `Longs`."
  }, {
    "metadata" : {
      "id" : "1DAC760FBC7A4F239981F119549B58E4"
    },
    "cell_type" : "markdown",
    "source" : "### Objects\n\nI've been careful to use the word _instance_ for things we create from classes. That's because Scala has built-in support for the [Singleton Design Pattern](https://en.wikipedia.org/wiki/Singleton_pattern), i.e., when we only want one instance of a class. We use the `object` keyword. \n\nFor example, in Java, you define a class with a `static void main(String[] arguments)` method as your entry point into your program. In Scala, you use an `object` to hold `main`, as follows:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "238A29DAC4E54899BDF1E9154BA020C0"
    },
    "cell_type" : "code",
    "source" : "object MySparkJob {\n\n    val greeting = \"Hello Spark!\"\n    \n    def main(arguments: Array[String]) = {\n        println(greeting)\n        \n        // Create your SparkContext or SparkSession, etc., etc.\n    }\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined object MySparkJob\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 68,
      "time" : "Took: 1 second 131 milliseconds, at 2016-12-1 17:56"
    } ]
  }, {
    "metadata" : {
      "id" : "378CA4822C7A461A80EAE453340AA1B9"
    },
    "cell_type" : "markdown",
    "source" : "Just as for classes, the name of the object can be anything you want. There is no `static` keyword in Scala. Instead of adding `static` methods and fields to classes as in Java, you put them in objects instead, as here.\n\n> **NOTE:** Because the Scala compiler must generate valid JVM byte code, these definitions are converted into the equivalent, Java-like static definitions in the output byte code."
  }, {
    "metadata" : {
      "id" : "5AC7D2875B4C44F299F1ECF6E6A4674B"
    },
    "cell_type" : "markdown",
    "source" : "### Case Classes\nTuples are handy for representing records and for decomposing them with pattern matching. However, it would be nice if the fields were _named_, as well as _typed_. A good use for a class, like our `IIRecord1` above, us to represent this structure and give us named fields. Let's now refine that class definition to exploit some extra, very useful features in Scala.\n\nConsider the following definition of a _case class_ that represents our final record type."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "BFC725674989451788C183FD136D5FBC"
    },
    "cell_type" : "code",
    "source" : "case class IIRecord(\n    word: String, \n    total_count: Int = 0, \n    locations: Array[String] = Array.empty, \n    counts: Array[Int] = Array.empty) {\n\n    /** \n     * Different than our CSV output above, but see toCSV.\n     * Array.toString is useless, so format these ourselves. \n     */\n    override def toString: String = \n        s\"\"\"IIRecord($word, $total_count, $locStr, $cntStr)\"\"\"\n    \n    /** CSV-formatted string, but use [a,b,c] for the arrays */\n    def toCSV: String = \n        s\"$word,$total_count,$locStr,$cntStr\"\n        \n    /** Return a JSON-formatted string for the instance. */\n    def toJSONString: String = \n        s\"\"\"{\n        |  \"word\":        \"$word\", \n        |  \"total_count\": $total_count, \n        |  \"locations\":   ${toJSONArrayString(locations)},\n        |  \"counts\"       ${toArrayString(counts, \", \")}\n        |}\n        |\"\"\".stripMargin\n\n    private def locStr = toArrayString(locations)\n    private def cntStr = toArrayString(counts)\n\n    // \"[_]\" means we don't care what type of elements; we're just\n    // calling toString on them!\n    private def toArrayString(array: Array[_], delim: String = \",\"): String = \n        array.mkString(\"[\", delim, \"]\")  // i.e., \"[a,b,c]\"\n\n    private def toJSONArrayString(array: Array[String]): String =\n        toArrayString(array.map(quote), \", \")\n    \n    private def quote(word: String): String = \"\\\"\" + word + \"\\\"\"  \n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined class IIRecord\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 69,
      "time" : "Took: 1 second 416 milliseconds, at 2016-12-1 17:56"
    } ]
  }, {
    "metadata" : {
      "id" : "E6F90E87F0FE4F0789FE3CBB009F2C84"
    },
    "cell_type" : "markdown",
    "source" : "I said that defining secondary constructors is not very common. In part, it's because I used a convenient feature, the ability to define default values for arguments to methods, including the primary constructor. The default values mean that I can create instances without providing all the arguments explicitly, as long as there is a default value defined, and similarly for calling methods. Consider these two examples:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "D933A899DBEA4CFD886EA159A598CD23"
    },
    "cell_type" : "code",
    "source" : "val hello = new IIRecord(\"hello\")\nval world = new IIRecord(\"world!\", 3, Array(\"one\", \"two\"), Array(1, 2))\n\nprintln(\"\\n`toString` output:\")\nprintln(hello)\nprintln(world)\n\nprintln(\"\\n`toJSONString` output:\")\nprintln(hello.toJSONString)\nprintln(world.toJSONString)\n\nprintln(\"\\n`toCSV` output:\")\nprintln(hello.toCSV)\nprintln(world.toCSV)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "\n`toString` output:\nIIRecord(hello, 0, [], [])\nIIRecord(world!, 3, [one,two], [1,2])\n\n`toJSONString` output:\n{\n  \"word\":        \"hello\", \n  \"total_count\": 0, \n  \"locations\":   [],\n  \"counts\"       []\n}\n\n{\n  \"word\":        \"world!\", \n  \"total_count\": 3, \n  \"locations\":   [\"one\", \"two\"],\n  \"counts\"       [1, 2]\n}\n\n\n`toCSV` output:\nhello,0,[],[]\nworld!,3,[one,two],[1,2]\nhello: IIRecord = IIRecord(hello, 0, [], [])\nworld: IIRecord = IIRecord(world!, 3, [one,two], [1,2])\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 70,
      "time" : "Took: 1 second 603 milliseconds, at 2016-12-1 17:57"
    } ]
  }, {
    "metadata" : {
      "id" : "2EFE1FD2D6D5447886C2AD89CF017711"
    },
    "cell_type" : "markdown",
    "source" : "I added `toJSONString` to illustrate adding _public_ methods, the default visibility, and _private_ methods to a class definition. By the way, when there are no methods or non-field variables to define, I can omit the body complete; no empty `{}` required.\n\nRecall that the `override` keyword is required when redefining `toString`."
  }, {
    "metadata" : {
      "id" : "28D18FCD76A64DD592DD8BA3970CCFD5"
    },
    "cell_type" : "markdown",
    "source" : "Okay, what about that `case` keyword? It tells the compiler to do several useful things for us, eliminating a lot of boilerplate that we would have to write for ourselves with other languages, especially Java:\n\n1. Treat each constructor argument as an immutable (`val`) private field of the instance.\n1. Generate a public reader method for the field with the same name (e.g., `word`).\n1. Generate _correct_ implementations of the `equals` and `hashCode` methods, which people often implement incorrectly, as well as a default `toString` method. You can use your own definitions by adding them explicitly to the body. We did this for `toString`, to format the arrays in a nicer way than the default `Array[_].toString` method.\n1. Generate an `object IIRecord`, i.e., with the same name. The object is called the _companion object_.\n1. Generate a \"factory\" method in the companion object that takes the same argument list and instantiates an instance.\n1. Generate helper methods in the companion object that support pattern matching.\n\nPoints 1 and 2 make each argument behave as if they are public, read-only fields of the instance, but they are actually implemented as described.\n\nPoint 3 is important for correct behavior. Case class instances are often used as keys in [Maps](http://www.scala-lang.org/api/current/index.html#scala.collection.Map) and [Sets](http://www.scala-lang.org/api/current/index.html#scala.collection.Set), Spark RDD and DataFrame methods, etc. In fact, you should _only_ use your case classes or Scala's built-in types with well-defined `hashCode` and `equals` methods (like `Int` and other number types, `String`, tuples, etc.) as keys.\n\nFor point 4, the _companion object_ is generated automatically by the compiler. It adds the \"factory\" method discussed in point 5, and methods that support pattern matching, point 6. You can explicitly define these methods and others yourself, as well as fields to hold state. The compiler will still insert these other methods. However, see <a href=\"#Ambiguities\">Ambiguities with Companion Objects</a>. The bottom line is that you shouldn't define case classes in notebooks like this with extra methods in the companion object, due to parsing ambiguities.\n\nPoint 5 means you actually rarely use `new` when creating instances. That is, the following are effectively equivalent:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4CFDB66B3462418F89967C3FF58F8222"
    },
    "cell_type" : "code",
    "source" : "val hello1 = new IIRecord(\"hello1\")\nval hello2 = IIRecord(\"hello2\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "hello1: IIRecord = IIRecord(hello1, 0, [], [])\nhello2: IIRecord = IIRecord(hello2, 0, [], [])\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 71,
      "time" : "Took: 825 milliseconds, at 2016-12-1 18:0"
    } ]
  }, {
    "metadata" : {
      "id" : "7472F705871D4CC38546FB8C4D416AAE"
    },
    "cell_type" : "markdown",
    "source" : "What actually happens in the second case, without `new`? The \"factory\" method is actually called `apply`. In Scala, whenever you put an argument list after any _instance_, including these `objects`, as in the `hello2` case, Scala looks for an `apply` method to call. The arguments have to match the argument list for apply (number of arguments, types of arguments, accounting for default argument values, etc.). Hence, the `hello2` declaration is really this:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "88DDD90C19B64C1C80C037DEEAA3E895"
    },
    "cell_type" : "code",
    "source" : "val hello2b = IIRecord.apply(\"hello2b\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "hello2b: IIRecord = IIRecord(hello2b, 0, [], [])\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 72,
      "time" : "Took: 676 milliseconds, at 2016-12-1 18:0"
    } ]
  }, {
    "metadata" : {
      "id" : "8FDF18BD8DA74C0D8CABD6EA3B96584A"
    },
    "cell_type" : "markdown",
    "source" : "You can exploit this feature, too, in your other classes. We talked about word stemming above. Suppose you write a stemming library and declare an object for as the entry point. Here, I'll just do something simple; assume a trailing \"s\" means the word is a plural and remove it (a bad assumption...):"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "E44A24511FC94B8F87974F7A3665FE7C"
    },
    "cell_type" : "code",
    "source" : "object stem {\n    def apply(word: String): String = word.replaceFirst(\"s$\", \"\") // insert real implementation!\n}\n\nprintln(stem(\"dog\"))\nprintln(stem(\"dogs\"))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "dog\ndog\ndefined object stem\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 73,
      "time" : "Took: 1 second 96 milliseconds, at 2016-12-1 18:0"
    } ]
  }, {
    "metadata" : {
      "id" : "AFF82895E4174B9B8840C286B55E9942"
    },
    "cell_type" : "markdown",
    "source" : "Note how it looks like I'm calling a function or method named `stem`. Scala allows object and class names to start with a lower case letter."
  }, {
    "metadata" : {
      "id" : "7F9B448BBC2F47E6821CA916459FD59C"
    },
    "cell_type" : "markdown",
    "source" : "Finally, point 6 means we can use our custom case classes in pattern matching expressions. I won't go into the methods actually implemented in the companion object and how they support pattern matching. I'll just use the \"magic\" in the following example that \"parses\" or previously-defined `hello` and `world` instances."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1691048959-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "E5528BE4892B47AFBBA677D7A6E011E8"
    },
    "cell_type" : "code",
    "source" : "Seq(hello, world).map {\n    case IIRecord(word, 0, _, _) => s\"$word with no occurrences.\"\n    case IIRecord(word, cnt, locs, cnts) => \n        s\"$word occurs $cnt times: ${locs.zip(cnts).mkString(\", \")}\"\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res122: Seq[String] = List(hello with no occurrences., world! occurs 3 times: (one,1), (two,2))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon431cbb667a408872aaa38af66b1ee405&quot;,&quot;dataInit&quot;:[],&quot;genId&quot;:&quot;1691048959&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tabs'], \n      function(playground, _magictabs) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictabs,\n    \"o\": {}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <div>\n        <ul class=\"nav nav-tabs\" id=\"ul1691048959\"><li>\n              <a href=\"#tab1691048959-0\"><i class=\"fa fa-table\"/></a>\n            </li><li>\n              <a href=\"#tab1691048959-1\"><i class=\"fa fa-cubes\"/></a>\n            </li></ul>\n\n        <div class=\"tab-content\" id=\"tab1691048959\"><div class=\"tab-pane\" id=\"tab1691048959-0\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon8accee2d9c387bf828a3ab912cb32f9c&quot;,&quot;dataInit&quot;:[{&quot;string value&quot;:&quot;hello with no occurrences.&quot;},{&quot;string value&quot;:&quot;world! occurs 3 times: (one,1), (two,2)&quot;}],&quot;genId&quot;:&quot;1017785387&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"string value\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon626cf1f36a2ba476a7ace486cd8c222a&quot;,&quot;initialValue&quot;:&quot;2&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anond355e6d7d9a0fed02a8cd89a6ed51508&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab1691048959-1\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anond7bbff59eab8ef6b70724a55c3e6a07a&quot;,&quot;dataInit&quot;:[{&quot;string value&quot;:&quot;hello with no occurrences.&quot;},{&quot;string value&quot;:&quot;world! occurs 3 times: (one,1), (two,2)&quot;}],&quot;genId&quot;:&quot;263117739&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pivotChart'], \n      function(playground, _magicpivotChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpivotChart,\n    \"o\": {\"width\":600,\"height\":400,\"derivedAttributes\":{},\"extraOptions\":{}}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonf6f5ef8cd73a20ff3bfc05852a00df5b&quot;,&quot;initialValue&quot;:&quot;2&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon819330062ad1536429bf11c430dafde0&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div></div>\n      </div>\n    </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 74,
      "time" : "Took: 1 second 158 milliseconds, at 2016-12-1 18:0"
    } ]
  }, {
    "metadata" : {
      "id" : "4FF0B17F9FDC430384E40A416C35D04E"
    },
    "cell_type" : "markdown",
    "source" : "The first case clause ignores the locations and counts, because I know they will be empty arrays if the total count is 0! \n\nThe second case clause uses the `zip` method to put the locations and counts back together. Recall we used `unzip` to create the separate collections."
  }, {
    "metadata" : {
      "id" : "B6FAD3997BF245C8AC6EDD4AE85DE15D"
    },
    "cell_type" : "markdown",
    "source" : "## Datasets and DataFrames\nWe've mostly used Spark's RDD API, where it's common to use case classes to represent the \"schema\" of records when working with RDDs, but also with a new type, [Dataset[T]](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.Dataset), analogous to `RDD[T]`, where the `T` represents the type of records.\n\nA problem with [DataFrames](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.DataFrame) is the fact that the fields are untyped until you try to access them. `Datasets` restore the type safety of `RDDs` by using a case class as the definition of the schema. \n\n`Datasets` were introduced in Spark 1.6.0, but they were somewhat incomplete until the 2.0.0 release, where `Dataset[T]` is the  real type you work with when using SparkSQL. `DataFrame` is still around, but now it's a _type alias_ for `Dataset[Row]`, where [Row](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.Row) is the loosely-typed representation of the rows in the `Dataset` and its columns (or fields). \n\nA _type alias_ is another Scala feature where you can give a new name to a type expression. In this case: `type DataFrame = Dataset[Row]`. You use `DataFrame` as if it's declared as a regular type, but you are actually working with a `Dataset[Row]`."
  }, {
    "metadata" : {
      "id" : "0B4C288179C7414D8DE58D87168D6B35"
    },
    "cell_type" : "markdown",
    "source" : "### Importing Everything in a Package\nIn Java, `import foo.bar.*;` means import everything in the `bar` package.\n\nIn Scala, `*` is actually a legal method name; think of defining multiplication for custom numeric types, like `Matrix`. Hence, this import statement in Scala would be ambigious. Therefore, Scala uses `_` instead of `*`, `import foo.bar._` (with the semicolon inferred)."
  }, {
    "metadata" : {
      "id" : "8D557ECC0A1E47E4B58E4D2D8B9B0B29"
    },
    "cell_type" : "markdown",
    "source" : "Incidentally, what would that `*` method definition look like? Something like this:\n\n```scala\ncase class Matrix(rows: Array[Array[Double]]) {  // Each row is an Array[Double]\n\n    /** Multiple this matrix by another. */\n    def *(other: Matrix): Matrix = ...\n    \n    /** Add this matrix by another. */\n    def +(other: Matrix): Matrix = ...\n    \n    ...\n}\n\nval row1: Array[Array[Double]] = ...\nval row2: Array[Array[Double]] = ...\nval m1 = Matrix(rows1)\nval m2 = Matrix(rows2)\nval m1_times_m2 = m1 * m2\nval m1_plus_m2 = m1 + m2\n```"
  }, {
    "metadata" : {
      "id" : "D09A3AE2C3C3408F85322926C1AE71C7"
    },
    "cell_type" : "markdown",
    "source" : "### Operator Syntax\n\nWait!! What's this `m1 * m2` stuff?? Shouldn't it be `m1.*(m2)`. It would be really convenient to use \"operator syntax\", more precisely called _infix operator notation_ for many methods like `*` and `+` here. The Scala parser supports this with a simple relaxation of the rules; when a method takes a single argument, you can omit the period `.` and parentheses `(...)`. Hence the following really is equivalent:\n\n```scala\nval m1_times_m2 = m1.*(m2)\nval m1_times_m2 = m1 * m2\n```\n\nThis convenience can lead to confusing code, especially for beginners to Scala, so use it cautiously."
  }, {
    "metadata" : {
      "id" : "B7AF61B1BFC644BB8A2C39BBAB0AA04B"
    },
    "cell_type" : "markdown",
    "source" : "### Traits\n_Traits_ are similar to Java 8 _interfaces_, used to define abstractions, but with the ability to provide \"default\" implementations of the methods declared. Unlike Java 8 interfaces, traits can also have fields representing \"state\" information about instances. There is a blury line between traits and _abstract classes_, again where some member methods or fields are not defined. In both cases, a subtype of a trait and/or an abstract class must define any undefined members if you want to construct instances of it.\n\nSo, why have both traits and abstract classes? It's because Java only allows _single inheritance_; there can be only one _parent_ type, which is normally where you would use an abstract class, but Scala lets you \"mix in\" one or more additional traits (or use a trait as the parent class - yes, confusing). A great example \"mix in\" trait is one that implements logging. Any \"service\" type can mix in the logging trait to get \"instant\" access to this reusable functionality. Schematically, it looks like the following:\n\n```scala\n// Assume severity `Level` and `Logger` types defined elsewhere...\ntrait Logging {\n\n    def log(level: Level, message: String): Unit = logger.log(level, message)\n    \n    private logger: Logger = ...\n}\n\nabstract class Service {\n    def run(): Unit   // No body, so abstract!\n}\n\nclass MyService extends Service with Logging {\n    def run(): Unit = {\n        log(INFO, \"Staring MyService...\")\n        ...\n        log(INFO, \"Finished MyService\")\n    }\n}\n```\n\n`Unit` is Scala's equivalent to Java's `void`. It actually is a true type with a single return value, unlike `void`, but we use it in the same sense of \"nothing useful will be returned\"."
  }, {
    "metadata" : {
      "id" : "F4F9E4DFF1914C1A8CF2B359BC3A7142"
    },
    "cell_type" : "markdown",
    "source" : "### Ranges\nWhat if you want some numbers between a start and end value? Use a [Range](http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Range), which has a nice literal syntax, e.g., `1 until 100`, `2 to 200 by 3`. \n\nThe `Range` always includes the lower bound. Using `to` in a `Range` makes it _inclusive_ at the upper bound. Using `until` makes it _exclusive_ at the upper bound. Use `by` to specify a delta, which defaults to `1`."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1146962079-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "4094E87E9CBF4B7AB7813A84B31C3512"
    },
    "cell_type" : "code",
    "source" : "1 until 10",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res124: scala.collection.immutable.Range = Range(1, 2, 3, 4, 5, 6, 7, 8, 9)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon64b7fa8dd4bfa388a5d121e8cd49b29e&quot;,&quot;dataInit&quot;:[],&quot;genId&quot;:&quot;1146962079&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tabs'], \n      function(playground, _magictabs) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictabs,\n    \"o\": {}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <div>\n        <ul class=\"nav nav-tabs\" id=\"ul1146962079\"><li>\n              <a href=\"#tab1146962079-0\"><i class=\"fa fa-table\"/></a>\n            </li><li>\n              <a href=\"#tab1146962079-1\"><i class=\"fa fa-dot-circle-o\"/></a>\n            </li><li>\n              <a href=\"#tab1146962079-2\"><i class=\"fa fa-line-chart\"/></a>\n            </li><li>\n              <a href=\"#tab1146962079-3\"><i class=\"fa fa-bar-chart\"/></a>\n            </li><li>\n              <a href=\"#tab1146962079-4\"><i class=\"fa fa-cubes\"/></a>\n            </li></ul>\n\n        <div class=\"tab-content\" id=\"tab1146962079\"><div class=\"tab-pane\" id=\"tab1146962079-0\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonf99824206e416a80cbc0d0fd2bf1ec9e&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9}],&quot;genId&quot;:&quot;301546014&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"_1\",\"_2\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonaf3688c22d3c901b62ae275f9428e0ca&quot;,&quot;initialValue&quot;:&quot;9&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonf749b3ec21448de7d3a0767d81013ff5&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab1146962079-1\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon166c571f3e2a55cddb462f245c1b1ddc&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9}],&quot;genId&quot;:&quot;231146220&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/scatterChart'], \n      function(playground, _magicscatterChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicscatterChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anoncc8755f745a78d6f7b64ed833bbe6974&quot;,&quot;initialValue&quot;:&quot;9&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon37b1151a13cf405b2ca674d566540409&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab1146962079-2\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon1dde120910250757dbd554b3ecbfaa04&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9}],&quot;genId&quot;:&quot;1023762048&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/lineChart'], \n      function(playground, _magiclineChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magiclineChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon31d98c4843950520e447480568c1eac9&quot;,&quot;initialValue&quot;:&quot;9&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonf8c3fb519c7707c802205ec82dc1a884&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab1146962079-3\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anond40a096afe4e7f7cf69d4908b4ab89fe&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9}],&quot;genId&quot;:&quot;989937568&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/barChart'], \n      function(playground, _magicbarChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicbarChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon761c2cb62e0edead915a489a80bbd839&quot;,&quot;initialValue&quot;:&quot;9&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon47bc3e08eb1ca82a94dc1600158b5c87&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab1146962079-4\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon8281646d9eb0dd3d2ea861b300b20ec5&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9}],&quot;genId&quot;:&quot;799040433&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pivotChart'], \n      function(playground, _magicpivotChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpivotChart,\n    \"o\": {\"width\":600,\"height\":400,\"derivedAttributes\":{},\"extraOptions\":{}}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonffe2a95ebcf609c8a543ecbe72c165dc&quot;,&quot;initialValue&quot;:&quot;9&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon775758a573d8ab2ac19ce0db8e5b935f&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div></div>\n      </div>\n    </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 75,
      "time" : "Took: 1 second 270 milliseconds, at 2016-12-1 18:6"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab505406334-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "DABC04E31BF74B9FAD7630F87CF197F3"
    },
    "cell_type" : "code",
    "source" : "1 to 10",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res126: scala.collection.immutable.Range.Inclusive = Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon27ed587fec85e2d06d2270a1c53a9b48&quot;,&quot;dataInit&quot;:[],&quot;genId&quot;:&quot;505406334&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tabs'], \n      function(playground, _magictabs) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictabs,\n    \"o\": {}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <div>\n        <ul class=\"nav nav-tabs\" id=\"ul505406334\"><li>\n              <a href=\"#tab505406334-0\"><i class=\"fa fa-table\"/></a>\n            </li><li>\n              <a href=\"#tab505406334-1\"><i class=\"fa fa-dot-circle-o\"/></a>\n            </li><li>\n              <a href=\"#tab505406334-2\"><i class=\"fa fa-line-chart\"/></a>\n            </li><li>\n              <a href=\"#tab505406334-3\"><i class=\"fa fa-bar-chart\"/></a>\n            </li><li>\n              <a href=\"#tab505406334-4\"><i class=\"fa fa-cubes\"/></a>\n            </li></ul>\n\n        <div class=\"tab-content\" id=\"tab505406334\"><div class=\"tab-pane\" id=\"tab505406334-0\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon123cade37555e15cba851fb93aff06e2&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9},{&quot;_1&quot;:9,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;541763666&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"_1\",\"_2\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon3d733afba620b00e6f44bac82e231de6&quot;,&quot;initialValue&quot;:&quot;10&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon69a3dd87c5240a61b33572779aa72b51&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab505406334-1\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon7496598217e27dcff36b929ac7790982&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9},{&quot;_1&quot;:9,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;794888627&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/scatterChart'], \n      function(playground, _magicscatterChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicscatterChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonee8f476f414f80e5045fef3fa5eba8d1&quot;,&quot;initialValue&quot;:&quot;10&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon85e568331b8eb2626cd3322d1b1ade29&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab505406334-2\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon98c8641705825d7c441403e95aeb679d&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9},{&quot;_1&quot;:9,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;846166262&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/lineChart'], \n      function(playground, _magiclineChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magiclineChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon692b6cd2bd1e69184590dbf742130be1&quot;,&quot;initialValue&quot;:&quot;10&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon61b2cfb0b3f11e1196aa4aac29185907&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab505406334-3\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonb514b39e2caee4c73b8ba0f5675d73a3&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9},{&quot;_1&quot;:9,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;101827741&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/barChart'], \n      function(playground, _magicbarChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicbarChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon62cba92b70e78967c6afa2403cd6ae11&quot;,&quot;initialValue&quot;:&quot;10&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonc70018c6778ed6562562d4dbe710b69b&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab505406334-4\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon91a186246bf7de815c10e3f4fd28bad2&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9},{&quot;_1&quot;:9,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;1332499771&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pivotChart'], \n      function(playground, _magicpivotChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpivotChart,\n    \"o\": {\"width\":600,\"height\":400,\"derivedAttributes\":{},\"extraOptions\":{}}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon74b024a954ecac39b29f70f2f3cd0baf&quot;,&quot;initialValue&quot;:&quot;10&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonace50a05d200b17aafbaac8e22302c14&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div></div>\n      </div>\n    </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 76,
      "time" : "Took: 1 second 156 milliseconds, at 2016-12-1 18:6"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1734835030-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "9A93F6D0AB394275971A1EF8F7F39925"
    },
    "cell_type" : "code",
    "source" : "1 to 10 by 3",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res128: scala.collection.immutable.Range = Range(1, 4, 7, 10)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anoned2bed092defe999106a05e4d55ef886&quot;,&quot;dataInit&quot;:[],&quot;genId&quot;:&quot;1734835030&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tabs'], \n      function(playground, _magictabs) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictabs,\n    \"o\": {}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <div>\n        <ul class=\"nav nav-tabs\" id=\"ul1734835030\"><li>\n              <a href=\"#tab1734835030-0\"><i class=\"fa fa-table\"/></a>\n            </li><li>\n              <a href=\"#tab1734835030-1\"><i class=\"fa fa-dot-circle-o\"/></a>\n            </li><li>\n              <a href=\"#tab1734835030-2\"><i class=\"fa fa-line-chart\"/></a>\n            </li><li>\n              <a href=\"#tab1734835030-3\"><i class=\"fa fa-bar-chart\"/></a>\n            </li><li>\n              <a href=\"#tab1734835030-4\"><i class=\"fa fa-cubes\"/></a>\n            </li></ul>\n\n        <div class=\"tab-content\" id=\"tab1734835030\"><div class=\"tab-pane\" id=\"tab1734835030-0\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon47ef7873145cffd6f639f5cb460e5c31&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:4},{&quot;_1&quot;:2,&quot;_2&quot;:7},{&quot;_1&quot;:3,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;451465975&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"_1\",\"_2\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon5c2e6452ecb0a4fd60d2d571411f5ce4&quot;,&quot;initialValue&quot;:&quot;4&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon651f94f13b18468aba10b0e8b3dcaed1&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab1734835030-1\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anond32f7ca90797618943a614f11e85ed51&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:4},{&quot;_1&quot;:2,&quot;_2&quot;:7},{&quot;_1&quot;:3,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;167074290&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/scatterChart'], \n      function(playground, _magicscatterChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicscatterChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon2eac5930201208a2a61995ee99dedeb5&quot;,&quot;initialValue&quot;:&quot;4&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon184ea7611146933bfc95d47677011a58&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab1734835030-2\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon82ad6eee4c5a3b4689d8a252f9552ad0&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:4},{&quot;_1&quot;:2,&quot;_2&quot;:7},{&quot;_1&quot;:3,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;1578879135&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/lineChart'], \n      function(playground, _magiclineChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magiclineChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonf679d3cc2c1bf65a29b544764bfcb219&quot;,&quot;initialValue&quot;:&quot;4&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonf68aaeba7ad594ab4b61bd9f71913938&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab1734835030-3\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon24088128e3c4a8e0736c6a12b01f3209&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:4},{&quot;_1&quot;:2,&quot;_2&quot;:7},{&quot;_1&quot;:3,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;1409600604&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/barChart'], \n      function(playground, _magicbarChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicbarChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon78f76876b77c62915788e41ef9ac12f6&quot;,&quot;initialValue&quot;:&quot;4&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon9b2e58b8ae9077175087a00787d2db36&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab1734835030-4\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon23cb800ab366754bea606c6c3cc9b345&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:4},{&quot;_1&quot;:2,&quot;_2&quot;:7},{&quot;_1&quot;:3,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;1729067032&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pivotChart'], \n      function(playground, _magicpivotChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpivotChart,\n    \"o\": {\"width\":600,\"height\":400,\"derivedAttributes\":{},\"extraOptions\":{}}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon3d990348f5a13b2f52492bfe67458301&quot;,&quot;initialValue&quot;:&quot;4&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anond3a6ff649b32d8fb57944f8b5c5fb430&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div></div>\n      </div>\n    </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 77,
      "time" : "Took: 1 second 134 milliseconds, at 2016-12-1 18:6"
    } ]
  }, {
    "metadata" : {
      "id" : "D7A021C377D840358578268423571D28"
    },
    "cell_type" : "markdown",
    "source" : "When you need a small test data set to play with Spark, ranges can be convenient."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "14F278432C3D46ED8F3A8C282A27C71A"
    },
    "cell_type" : "code",
    "source" : "val rdd7 = sc.parallelize(1 to 50).\n    map(i => (i, i%7)).\n    groupBy{ case (i, seven) => seven }.\n    sortByKey()\nrdd7.take(7).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "(0,CompactBuffer((7,0), (14,0), (21,0), (28,0), (35,0), (42,0), (49,0)))\n(1,CompactBuffer((1,1), (8,1), (15,1), (22,1), (29,1), (36,1), (43,1), (50,1)))\n(2,CompactBuffer((2,2), (9,2), (16,2), (23,2), (30,2), (37,2), (44,2)))\n(3,CompactBuffer((3,3), (10,3), (17,3), (24,3), (31,3), (38,3), (45,3)))\n(4,CompactBuffer((4,4), (11,4), (18,4), (25,4), (32,4), (39,4), (46,4)))\n(5,CompactBuffer((5,5), (12,5), (19,5), (26,5), (33,5), (40,5), (47,5)))\n(6,CompactBuffer((6,6), (13,6), (20,6), (27,6), (34,6), (41,6), (48,6)))\nrdd7: org.apache.spark.rdd.RDD[(Int, Iterable[(Int, Int)])] = ShuffledRDD[110] at sortByKey at <console>:79\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 78,
      "time" : "Took: 1 second 418 milliseconds, at 2016-12-1 18:6"
    } ]
  }, {
    "metadata" : {
      "id" : "CB6562E464EC41A2ABD7CDE4246BBBA4"
    },
    "cell_type" : "markdown",
    "source" : "[SparkContext](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.SparkContext) also has a `range` method that effectively does the same thing as `sc.parallelize(some_range)`."
  }, {
    "metadata" : {
      "id" : "797990BEF349442581344872D613911F"
    },
    "cell_type" : "markdown",
    "source" : "### Scala Interpreter (REPL) vs. Notebooks vs. Scala Compiler\n<a name=\"REPL\"></a>\nThis notebook has been using a running Scala interpreter, a.k.a. _REPL_ (\"read, eval, print, loop\") to parse the Scala code. The Spark distribution comes with a `spark-shell` script that also lets you use the interpreter from the command line, but without the nice notebook UI.\n\nIf you use `spark-shell`, there are a few other behavior changes you should know about."
  }, {
    "metadata" : {
      "id" : "E5C679DF0C204FD48041407DD1AA339A"
    },
    "cell_type" : "markdown",
    "source" : "#### Using :paste Mode\nBy default the Scala interpreter treats _each line_ you enter separately. This can cause surprises compared to how the Scala _compiler_ works, where it treats all the code in the same file in the same context.\n\nFor example, the following code, where the expression continues on the second line, is handled successfully by the compiler, but not by the interpreter.\n\n```scala\n(1 to 100)\n.map(i => i*i)\n```\n\nthe Interpreter thinks it finished parsing the expression when it hit the new line after the literal [Range](http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Range), `1 to 100`. It then throws an error on the opening `.` on the next line. On the other hand, the compiler keeps compiling, ignoring the new line in this case. \n\nThis notebook also does the same thing as the \"raw\" interpreter, but in some cases, notebooks will use an interpeter command, `:paste` that tells the parser to parse all of the lines that follow together, just like the compiler would parse them, until the \"end of input\", which you indicate with `CTRL-D`. \n\nYou can't experiment with it through this notebook, but your session would look something like this:\n\n```scala\nscala> :paste\n// Entering paste mode (ctrl-D to finish)\n\n(1 to 10)\n.map(i => i*i)\n<CTRL-D>\n\n// Exiting paste mode, now interpreting.\n\nres0: scala.collection.immutable.IndexedSeq[Int] = Vector(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)\n\nscala>\n```"
  }, {
    "metadata" : {
      "id" : "E214F5D1B4184A8383B4A84A823A1729"
    },
    "cell_type" : "markdown",
    "source" : "#### Ambiguities with Companion Objects\n<a name=\"Ambiguities\"></a>\nAs I wrote this notebook, I _wanted_ to demonstrate using the companion object `IIRecord` to define a method explicitly, but this leads to an ambiguity later on in the notebook if you attempt to use this method. The notebook gets confused between the case class and the object. \n\nWhile unfortunate, it's also true that once you start defining more involved case classes, with more than trivial methods and explicit additions to the default companion object, you should really define these types outside the notebook in a compiled library that you use within the notebook.\n\nThe details are beyond our scope here, but basically, you set up a project with your Scala code and build it using your favorite build tool. [SBT](http://www.scala-sbt.org/) is a popular choice for Scala, but Maven, Gradle, etc. can be used. \n\nYou want to generate a _jar_ file with the compiled artifacts, then when you start `spark-shell`, submit a Spark job with `spark-submit` or use a notebook environment like this one, you specify the jar for inclusion. For `spark-shell` and `spark-submit`, invoke it with the `--jars myproject.jar` option. For Toree with Jupyter, see the discussion on the [FAQ page](https://toree.incubator.apache.org/documentation/user/faq.html)."
  }, {
    "metadata" : {
      "id" : "309C64A9379541BEBF998A39DD9DB5E4"
    },
    "cell_type" : "markdown",
    "source" : "### Scala's Type Hierarchy\nScala's type hierarchy is similar to Java's, but with some interesting differences."
  }, {
    "metadata" : {
      "id" : "302080EB350C4C928853154BD88D660D"
    },
    "cell_type" : "markdown",
    "source" : "![Scala Type Hierarchy](http://docs.scala-lang.org/resources/images/classhierarchy.img_assist_custom.png)"
  }, {
    "metadata" : {
      "id" : "C8375B83CD0247C6BEE98E1DF8CDD0EF"
    },
    "cell_type" : "markdown",
    "source" : "In Java, all _reference types_ are descended from [java.lang.Object](https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html). The name _reference type_ reflects the fact that the instances for all these types are allocated on the _heap_ and program variables are references to those heap locations.\n\nThe primitives types, `int`, `long`, etc. are not considered part of the type hierarchy and are treated specially. This is in part a performance optimization, as instances of these types fit in CPU registers and the values are pushed onto stack frames. However, they have wrapper or \"boxed\" types, `Integer`, `Long`, etc., that are part of the type hierarchy, which you must use with Java's collections, for example (with the exception of arrays).\n\nInstead, Scala treats the primitives at the code level as basically the same as the reference types. You don't use `new Int(100)` for example, but you can call methods on `Int` instances. The code generated, in most cases, uses the optimized JVM primitives. \n\nHence, the Scala type hierarchy defines a type [Any](http://www.scala-lang.org/api/current/#scala.Any) to be the a parent type of _both_ reference types and \"value\" types (for the primitives). Each of those subhierarchies have parent types, [AnyRef](http://www.scala-lang.org/api/current/#scala.AnyRef) is effectively the same as [java.lang.Object](https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html), and [AnyVal](http://www.scala-lang.org/api/current/#scala.AnyVal) is the parent of the value types.\n\nFinally, for better \"soundness\", the Scala type system defines a real type to represent [Null](http://www.scala-lang.org/api/current/#scala.Null) and [Nothing](http://www.scala-lang.org/api/current/#scala.Nothing). By defining `Null` to be the subtype of all reference types `AnyRefs` (but not `AnyVals`), it supports at the type level the (unfortunate) practice of using `null` for a reference value.\n\nHowever, `null` is not allowed for an `AnyVal`, so the true \"bottom type\" of the hierarchy is `Nothing`. Why is that useful. I'll explain in the next section."
  }, {
    "metadata" : {
      "id" : "5D85EDA6B1E340D49CA04EB1B8379A1D"
    },
    "cell_type" : "markdown",
    "source" : "<a name=\"TryOptionNull\"></a>\n### Try vs. Option vs. null\n\nRecall the signature of our `curl` method near the beginning of this notebook:\n\n```scala\ndef curl(sourceURLString: String, targetDirectoryString: String): File = ...\n```\n\nIt returns a `File` when everything goes well, but it could throw an exception. An alternative is return a `Try[File]`, where the [Try](http://www.scala-lang.org/api/current/index.html#scala.util.Try) encapsulates both cases in the return value, as we'll discuss next. We'll also discuss an alternative, [Option](http://www.scala-lang.org/api/current/index.html#scala.Option)."
  }, {
    "metadata" : {
      "id" : "EA03F2FA02244AF989A920AC520BA08E"
    },
    "cell_type" : "markdown",
    "source" : "Suppose instead that we declared `curl` to return [util.Try[File]](http://www.scala-lang.org/api/current/index.html#scala.util.Try). The only change to the body would be to simply add `Try` before the opening bracket:\n\n```\ndef curl(sourceURLString: String, targetDirectoryString: String): Try[File] = Try {...}\n```\n\nNow, the reader knows from the method signature that it might fail somehow. If a call fails, the relevant exception will be returned wrapped in a subclass of `Try`, called [util.Failure[File]](http://www.scala-lang.org/api/current/index.html#scala.util.Failure). However, if `curl` succeeds, the `File` will be returned wrapped in the other subclass of `Try`, [util.Success[File]](http://www.scala-lang.org/api/current/index.html#scala.util.Success).\n\nBecause of Scala's type safety, the caller of `curl` would have to determine if a `Success` or `Failure` was returned and handle it appropriately.\n\nScala does not have methods declare the exceptions they will throw using the `throws` clause, like Java. So, looking at the signature of our original version, there's no obvious way to know if it throws an exception _or_ returns `null` on failure:\n```scala\ndef curl(sourceURLString: String, targetDirectoryString: String): File = {...}\n```\n\nIf we choose to catch exceptions internally and return `null`, the caller has to remember to check for `null`. Otherwise, the infamous [NullPointerException](https://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html) might happen occasionally if the caller assumes a non-`null` value is returned. So, using `Try[File]` prevents us from this loophole. _It helps the user do the right thing!_\n\nAlso, using `Try` rather than simply throwing an exception, means that `curl` always returns \"normally\", so the caller maintains full control of the call stack and special exception-catching logic isn't required (although you can do that in Scala, if you want to)."
  }, {
    "metadata" : {
      "id" : "02910EB617EE423582DC23CAB4FBE5F6"
    },
    "cell_type" : "markdown",
    "source" : "What are all the possible valid subclasses of `Try`? Really, there are only two, `Success` and `Failure`. It would be a mistake to allow a user to define other subtypes, like `MaybeCouldFailButWhoKnows`, because users of `Try` in pattern matching will always want to know that there are only two possibilities. Scala adds a keyword to enforce this logical behavior. `Try` is actually declared as follows:\n\n```scala\nsealed abstract class Try[+T] extends AnyRef\n```\n\n(`AnyRef` is the same as Java's `Object` supertype.) The `sealed` keyword says that _no_ subclasses of `Try` can be declared, _except_ in the same source file (which the library author wrote). Hence, users of `Try` can't declare their own subclasses, subverting the logical structure of this type hierarchy and other user's code that relies on this structure."
  }, {
    "metadata" : {
      "id" : "0CA5438E96E34CBC860C65C61DF2B2B8"
    },
    "cell_type" : "markdown",
    "source" : "What if we have a situation where it makes no sense to involve an exception, but we want similar logic to handle the case where I have something or I don't (put another way, I have either 0 or 1 elements)? This is where [Option[T]](http://www.scala-lang.org/api/current/index.html#scala.Option) comes in. \n\n`Option` is analogous to `Try`, it is a `sealed` abstract type with two possible subtypes:\n\n* [Some[T]](http://www.scala-lang.org/api/current/index.html#scala.None): I have a an instance of `T` for you, inside the `Some[T]`.\n* [None](http://www.scala-lang.org/api/current/index.html#scala.None): I don't have a value for you, sorry.\n\nNote that a hash map is a great example where I either have a value for a given key or I don't. Therefore, for Scala's [Map[K,V]](http://www.scala-lang.org/api/current/index.html#scala.collection.Map) abstraction, where `K` is the key type and `V` is the value type, the `get` method has this signature:\n\n```scala\ndef get(key: K): Option[V]\n```\n\nOnce again, you know from the type signature that you may or may not get a value instance for the input key, _and_ you **must** determine whether you got a `Some[V]` or a `None` as the result. By never returning a `null` value, we remove the risk of a `NullPointerException` if the caller forgets to check for it!"
  }, {
    "metadata" : {
      "id" : "000CD7F1DA0647BBBC49DD21B4A5A265"
    },
    "cell_type" : "markdown",
    "source" : "So, how do we determine which `Option[T]` was returned? Let's look a few examples using `Option`. Can you guess what they are doing? Check the [Option Scaladocs](http://www.scala-lang.org/api/current/#scala.Option) to confirm. `Try` can be used similarly, with a few other ways available that we won't discuss here (but see the [Try Scaladocs](http://www.scala-lang.org/api/current/#scala.util.Try))."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab643049376-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "417601022616427EA8B7ED8C982C6239"
    },
    "cell_type" : "code",
    "source" : "val options = Seq(None, Some(2), Some(3), None, Some(5))\n\nval numbers1 = options.map { o =>\n    o.getOrElse(-1)\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "options: Seq[Option[Int]] = List(None, Some(2), Some(3), None, Some(5))\nnumbers1: Seq[Int] = List(-1, 2, 3, -1, 5)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 79,
      "time" : "Took: 744 milliseconds, at 2016-12-1 18:7"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab470759055-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "563BAB96709E407C87098F477544F6E1"
    },
    "cell_type" : "code",
    "source" : "val numbers2 = options.map {\n    case None    => -1\n    case Some(i) => i  // Note how we extract the enclosed value.\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "numbers2: Seq[Int] = List(-1, 2, 3, -1, 5)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 80,
      "time" : "Took: 907 milliseconds, at 2016-12-1 18:7"
    } ]
  }, {
    "metadata" : {
      "id" : "01C6A19D2CDF490B8D9A776894CD4C0A"
    },
    "cell_type" : "markdown",
    "source" : "If you just want to ignore the `None` values, use a _for comprehension_. We could print them as before, but this time we'll `yield` each value, constructing a new `Seq` (sequence) of numbers."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0E1BF86C497B43568BC1A7B3B2E92FB5"
    },
    "cell_type" : "code",
    "source" : "val numbers = for {\n    opt   <- options  // loop through the options, assign each to \"option\"\n    value <- opt      // extract the value from the Some, or if None, skip to the next loop\n} yield value",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "numbers: Seq[Int] = List(2, 3, 5)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 81,
      "time" : "Took: 758 milliseconds, at 2016-12-1 18:7"
    } ]
  }, {
    "metadata" : {
      "id" : "183B495289174E1A9D95EEBBBB5C505D"
    },
    "cell_type" : "markdown",
    "source" : "Finally, you might wonder how `None` is declared. Consider this example:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "01EA7C7FFFBE4469A0BDF9D87F283162"
    },
    "cell_type" : "code",
    "source" : "val opts: Seq[Option[String]] = Seq(Some(\"hello\"), None, Some(\"world!\"))\nopts.foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Some(hello)\nNone\nSome(world!)\nopts: Seq[Option[String]] = List(Some(hello), None, Some(world!))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 82,
      "time" : "Took: 812 milliseconds, at 2016-12-1 18:7"
    } ]
  }, {
    "metadata" : {
      "id" : "041002EBDA9849ADB9D5098ED8A4EEF0"
    },
    "cell_type" : "markdown",
    "source" : "This works, so it must mean that `None` is a valid subclass of `Option[String]`. That's actually true for all `Option[T]`. How can a single object be a valid subtype for _all_ of them? Here is how it's declared (omitting some details):\n\n```scala\nobject None extends Option[Nothing] {...}\n\n```\n\n`None` carries no \"state\" information, because it doesn't wrap an instance like `Some[T]` does. Hence, we only need one instance for all uses, so it's declared as an object. Recall we mentioned above that the type system has a [Nothing](http://www.scala-lang.org/api/current/#scala.Nothing) type, which is a subtype of all other types. Without diving into too many details, if a variable is of type `Option[String]`, then you can use an `Option[Nothing]` for it (i.e., the latter is a subtype of the former). This is why `Nothing` is useful, for cases like `None`, so we can have one instance of it, but still obey the rules of Scala's object-oriented type system."
  }, {
    "metadata" : {
      "id" : "F39CA8B00D7F41C9851C49E0E0D7D5A1"
    },
    "cell_type" : "markdown",
    "source" : "### Implicits\n<a name=\"implicits\"></a>\nScala has a powerful mechanism known as _implicits_ that is used in the Spark Scala API. Implicits are a big topic, so we'll focus just on the uses of it that are most important to understand.  "
  }, {
    "metadata" : {
      "id" : "6C195C1AEB8E471699BB6B4D8541598F"
    },
    "cell_type" : "markdown",
    "source" : "#### Type Conversions\nWe used `RDD` methods like `reduceByKey` above, but if you search for this method in the [RDD Scaladoc page](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD), you won't find it. Instead it's defined in the [PairRDDFunctions](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.PairRDDFunctions) type (along with all the other `*ByKey` methods). So, how can we use these methods as if they are defined for `RDD`??\n\nWhen the Scala compiler sees code calling a method that doesn't exist on the type, it looks for an _implicit conversion_ in the current scope, which can transform the instance into another type (i.e., by wrapping it), where the other type provides the needed method. The full signature inferred for the method as it's used must match the definition in the wrapping class.\n\n> **Note:** If you don't find a method in the [Spark Scaladocs](http://spark.apache.org/docs/latest/api/scala/index.html#package) for a type where you think it should be defined, look for related helper types with the method.\n\nHere's a small Scala example of how this works:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9CE1F09078A64727BEE4A59B32F7CC19"
    },
    "cell_type" : "code",
    "source" : "// A sample class. Note it doesn't define a `toJSON` method:\ncase class Person(name: String, age: Int = 0)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined class Person\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 83,
      "time" : "Took: 1 second 15 milliseconds, at 2016-12-1 18:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "41EBF853BA8E4D2B8C39B66897E45A23"
    },
    "cell_type" : "code",
    "source" : "// To scope them, define implicit conversions within an object\nobject implicits {\n\n    // `implicit` keyword tells the compiler to consider this conversion.\n    // It takes a `Person`, returning a new instance of `PersonToJSONString`,\n    // then resolves the invocation of `toJSON`.\n    implicit class PersonToJSONString(person: Person) {\n        def toJSON: String = s\"\"\"{\"name\": ${person.name}, \"age\": ${person.age}}\"\"\"\n    }\n}\n\nimport implicits._        // Now it is visible in the current scope.\n\nval p = Person(\"Dean Wampler\", 39)\n\n// Magic conversion to `PersonToJSONString`, then `toJSON` is called.\np.toJSON",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined object implicits\nimport implicits._\np: Person = Person(Dean Wampler,39)\nres138: String = {\"name\": Dean Wampler, \"age\": 39}\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 84,
      "time" : "Took: 1 second 832 milliseconds, at 2016-12-1 18:8"
    } ]
  }, {
    "metadata" : {
      "id" : "66E48B7868F94F9383CF62A0BB79F2D0"
    },
    "cell_type" : "markdown",
    "source" : "For `RDDs`, the implicit conversions to `PairRDDFunctions` and other support types are handled for you. However, when you use Spark SQL and the [DataFrame](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.DataFrame) API, you'll need to import some of these conversions yourself:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "FE77D70EB2CB4434B885E4782A07B97C"
    },
    "cell_type" : "code",
    "source" : "val sqlc = sqlContext\nimport sqlc.implicits._  ",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "sqlc: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@8e9c841\nimport sqlc.implicits._\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 85,
      "time" : "Took: 1 second 525 milliseconds, at 2016-12-1 18:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "CC6CE2FC418846DE8E5133836A8AC66C"
    },
    "cell_type" : "code",
    "source" : "val wtc = iiDF.select($\"word\", $\"total_count\")\nwtc.show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+-----------+-----------+\n|       word|total_count|\n+-----------+-----------+\n|          a|       3350|\n|    abandon|          6|\n|      abate|          3|\n|  abatement|          1|\n|     abbess|          8|\n|      abbey|          9|\n|abbominable|          1|\n|abbreviated|          1|\n|       abed|          2|\n|   abetting|          1|\n|abhominable|          1|\n|      abhor|          5|\n|     abhors|          2|\n|      abide|          5|\n|     abides|          1|\n|    ability|          2|\n|     abject|          2|\n|     abjure|          1|\n|    abjured|          2|\n|       able|          9|\n+-----------+-----------+\nonly showing top 20 rows\n\nwtc: org.apache.spark.sql.DataFrame = [word: string, total_count: int]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 86,
      "time" : "Took: 1 second 385 milliseconds, at 2016-12-1 18:8"
    } ]
  }, {
    "metadata" : {
      "id" : "EC8352A276FA495EB26F84C4B4402E0B"
    },
    "cell_type" : "markdown",
    "source" : "The column-reference syntax `$\"name\"` is implemented using the same mechanism in the Scala library that implements interpolated strings, `s\"$foo\"`. The `import sqlc.implicits._` makes it available. \n\nNote we imported something from an _instance_, rather than a package or type, as allowed in Java. This can be a useful feature in Scala, but it's also fragile, If you try `import sqlContext.implicits._`, you'll get a compiler error that a \"stable identifier\" is required. It turns out that doing the value assignment, `val sqlc = sqlContext` first meets this requirement. This is unique to the notebook environment. You normally won't see this problem if you use the `spark-shell` that comes with a Spark distribution or you write a Spark program and compile it with the Scala compiler.\n\nHowever, it would be better if Spark defined this `implicits` object on the `SQLContext` companion object instead of on instances of it!"
  }, {
    "metadata" : {
      "id" : "AD9665EA860E4C2F8CC2E408C20603F3"
    },
    "cell_type" : "markdown",
    "source" : "For completeness, but unrelated to implicits, the `DataFrame` API lets you write SQL-like queries with a programmatic API. If you want to use built in functions like `min`, `max`, etc. on columns, you need the following `import` statement:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "6F83A0CC81934708ACD1E136CE4F0C1A"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.sql.functions._",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.sql.functions._\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 87,
      "time" : "Took: 897 milliseconds, at 2016-12-1 18:8"
    } ]
  }, {
    "metadata" : {
      "id" : "C6C9D19C7E9A41D28CECF6E8790D5646"
    },
    "cell_type" : "markdown",
    "source" : "Now we can use `min`, `max`, `avg`, etc."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B2BD1F33FB2E47708D33564A398AA7F1"
    },
    "cell_type" : "code",
    "source" : "val mma = iiDF.select(min(\"total_count\"), max(\"total_count\"), avg(\"total_count\"))\nmma.show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+----------------+----------------+------------------+\n|min(total_count)|max(total_count)|  avg(total_count)|\n+----------------+----------------+------------------+\n|               1|            5208|16.651743683350947|\n+----------------+----------------+------------------+\n\nmma: org.apache.spark.sql.DataFrame = [min(total_count): int, max(total_count): int ... 1 more field]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 88,
      "time" : "Took: 1 second 467 milliseconds, at 2016-12-1 18:8"
    } ]
  }, {
    "metadata" : {
      "id" : "E2ED40DF8736441589E4366F32AE84F8"
    },
    "cell_type" : "markdown",
    "source" : "#### Implicit Method Arguments\nOne other use of implicits worth understanding is _implicit arguments_ to methods. You will encounter this mechanism used when you read the Spark Scaladocs, even though you might never realize you're actually using it in your code!\n\nRecall I mentioned previously that you can define default values for method arguments. I just used it for the `age` argument for `Person`:\n\n```scala\ncase class Person(name: String, age: Int = 0)\n```\n\nSometimes we need something more sophisticated. For example, our library might have a group of methods that need a special argument passed to them that provides useful \"context\" information, but you don't want the user to be required to explicitly pass this argument every time. Other times you might use implicit arguments to make the API \"cleaner\", but still have some control over what's allowed.\n\nHere's an example, that's partly inspired by Scala's [Seq.sum](http://www.scala-lang.org/api/current/#scala.collection.Seq) method. Wouldn't it be great if I happen to have a collection of things I can \"add\" together, if I could just call `sum` on the collection? Let's do this in a slightly different way, with a helper `sum` method outside of `Seq`."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "56FAB05720ED42D78975EA9145F27795"
    },
    "cell_type" : "code",
    "source" : "trait Add[T] {\n    def add(t1: T, t2: T): T\n}\n\n// Nested implicits so they don't conflict with the previous object implicits.\nobject Adder {\n    object implicits {\n        implicit val intAdd = new Add[Int] { \n            def add(i1: Int, i2: Int): Int = i1+i2 \n        }\n        implicit val doubleAdd = new Add[Double] { \n            def add(d1: Double, d2: Double): Double = d1+d2 \n        }\n        implicit val stringAdd = new Add[String] { \n            def add(s1: String, s2: String): String = s1+s2 \n        }\n        // etc...\n    }\n}\n\nimport Adder.implicits._\n\n// NOTE: TWO argument lists!\ndef sum[T](ts: Seq[T])(implicit adder: Add[T]): T = {\n    ts.reduceLeft((t1, t2) => adder.add(t1, t2))\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined trait Add\ndefined object Adder\nimport Adder.implicits._\nsum: [T](ts: Seq[T])(implicit adder: Add[T])T\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 89,
      "time" : "Took: 2 seconds 134 milliseconds, at 2016-12-1 18:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "481097DD68F447E2864FBB4F59EDB8CD"
    },
    "cell_type" : "code",
    "source" : "sum(0 to 10)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res147: Int = 55\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "55"
      },
      "output_type" : "execute_result",
      "execution_count" : 90,
      "time" : "Took: 1 second 413 milliseconds, at 2016-12-1 18:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0AC34A98556444D3ACFFEE51C4685D24"
    },
    "cell_type" : "code",
    "source" : "sum(0.0 to 5.5 by 0.3)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res149: Double = 51.29999999999999\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "51.29999999999999"
      },
      "output_type" : "execute_result",
      "execution_count" : 91,
      "time" : "Took: 1 second 226 milliseconds, at 2016-12-1 18:9"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "282E7CEDA0C645AB8086D547A957B6FC"
    },
    "cell_type" : "code",
    "source" : "sum(Seq(\"one\", \"two\", \"three\"))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res151: String = onetwothree\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "onetwothree"
      },
      "output_type" : "execute_result",
      "execution_count" : 92,
      "time" : "Took: 1 second 90 milliseconds, at 2016-12-1 18:9"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "66BA8398396D47B3B7F6432596396F8E"
    },
    "cell_type" : "code",
    "source" : "// Will fail, because there's no Add[Char] in scope:\nsum(Seq('a', 'b', 'c'))   // Characters",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "<console>:103: error: could not find implicit value for parameter adder: Add[Char]\n       sum(Seq('a', 'b', 'c'))   // Characters\n          ^\n"
    } ]
  }, {
    "metadata" : {
      "id" : "AA7F3CE084AF4EAAADFD1B9460750DF2"
    },
    "cell_type" : "markdown",
    "source" : "So, the implicit values `intAdd`, `doubleAdd`, and `stringAdd`, were used by the Scala interpreter for the `adder` argument in the second _argument list_ for `sum`. Note that you have to use a second argument list and all arguments there must be implicit. \n\nWe could have avoided using implicit arguments if we defined custom `sum` methods for every type. That would have been simpler in this trivial case, but for nontrivial methods, the duplication is worth avoiding. Another advantage of this mechanism is that the user can define her own implicit `Add[T]` instances for domain types (say for example, `Money`) and they would \"just work\".\n\nThe Scala collections API uses this mechanism to know how to construct a new collection of the same kind as the input collection when you use `map`, `flatMap`, `reduceLeft`, etc.\n\nSpark uses this pattern for [Encoders](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.Encoder) in  Spark SQL. Encoders are used to serialize values into the new, compact memory encoding introduced in the _Tungsten_ project (see for example, [here](https://spark-summit.org/2015/events/deep-dive-into-project-tungsten-bringing-spark-closer-to-bare-metal/)). Here's an example of creating a [Dataset](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.Dataset), where the `toDS` method is first \"added\" to a Scala [Seq](http://www.scala-lang.org/api/current/#scala.collection.Seq) through an implicit conversion (specifically [SQLImplicits.localSeqToDatasetHolder](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.SQLImplicits), which is brought into scope by the `import sqlc.implicits._` statement earlier) and then `toDS` uses `Encoders` internally."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "934904B8DC224EEC83154CD6149F3AB7"
    },
    "cell_type" : "code",
    "source" : "(0 to 10).toDS()",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res155: org.apache.spark.sql.Dataset[Int] = [value: int]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anondc54269aaf2f09ee0f877073fee186a3&quot;,&quot;partitionIndexId&quot;:&quot;anon64074e1a8279c470b417bd6448a29c4b&quot;,&quot;numPartitions&quot;:1,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;value&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:false,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 94,
      "time" : "Took: 1 second 294 milliseconds, at 2016-12-1 18:9"
    } ]
  }, {
    "metadata" : {
      "id" : "A37856B8529E4A5D86C787C595E14FCA"
    },
    "cell_type" : "markdown",
    "source" : "# Conclusions\nI appreciate the effort you put into studying this notebook. I hope you enjoyed it as much as I enjoyed writing it. Please post issues on how I can improve it to the [GitHub repo](https://github.com/deanwampler/JustEnoughScalaForSpark).\n\nNow you know the core elements of Scala that you need for using the Spark Scala API. I hope you can appreciate the power and elegance of Scala. I hope you will choose to use it for all of your data engineering tasks, not just for Spark. \n\nWhat about data science? There are many people who use Scala for data science in Spark, but today Python and R have much richer libraries for Mathematics and Machine Learning. That will change over time, but for now, you'll need to decide which language best fits your needs.\n\nAs you use Scala, there will be more things you'll want to understand that we haven't covered, including common idioms, conventions, and tools used in the Scala community. The references at the beginning of the notebook will give you the information you need.\n\nBest wishes.\n\n[Dean Wampler](mailto:deanwampler@gmail.com)<br/>\n[@deanwampler](http://twitter.com/deanwampler)"
  }, {
    "metadata" : {
      "id" : "F824A7CAA46A49BD83A19E9E06399954"
    },
    "cell_type" : "markdown",
    "source" : "## Appendix: Exercise Solutions\n<a name=\"ExerciseSolutions\"></a>\nLet's discuss the solutions to exercises that weren't already solved earlier in the notebook."
  }, {
    "metadata" : {
      "id" : "6D9D398315014C05822F8889BBDA49C2"
    },
    "cell_type" : "markdown",
    "source" : "### Filter for Plays that Have \"of\" in the Name\nYou can add the condition (comment `// <== here`) immediate after defining `play`. You could do it later, after either of the subsequent two expressions, but then you're doing needless computation. Change `true` to `false` to print plays that don't contain \"of\"."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "8E63870D6F26419BB1B375463C69009D"
    },
    "cell_type" : "code",
    "source" : "val list2 = for {\n    play <- plays \n    if (play.contains(\"of\") == true)                            // <== here\n    playFileString = targetDirName + pathSeparator + play\n    playFile = new File(playFileString)\n} yield {\n    val successString = if (playFile.exists) \"Success!\" else \"NOT FOUND!!\"\n    s\"$playFileString\\t$successString\"\n}\nlist2.foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "data/shakespeare/tamingoftheshrew\tSuccess!\ndata/shakespeare/comedyoferrors\tSuccess!\ndata/shakespeare/merrywivesofwindsor\tSuccess!\nlist2: Seq[String] = List(data/shakespeare/tamingoftheshrew\tSuccess!, data/shakespeare/comedyoferrors\tSuccess!, data/shakespeare/merrywivesofwindsor\tSuccess!)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 95,
      "time" : "Took: 1 second 244 milliseconds, at 2016-12-1 18:9"
    } ]
  }, {
    "metadata" : {
      "id" : "58DE43817782420189CF9BA4DD12AE5C"
    },
    "cell_type" : "markdown",
    "source" : "### More Specific \"Love\" and \"Hate\" Words\nOne reasonable choice to prevent seeing `glove`, `whatever`, etc. is to only find words that start with `love` and `have`. Let's also keep `unlove`:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "D69DA27B224B40C0A070D64DF221A95D"
    },
    "cell_type" : "code",
    "source" : "val topLocationsLoveHate = spark.sql(\"\"\"\n    SELECT word,  total_count, locations[0] AS top_location, counts[0] AS top_count\n    FROM inverted_index \n    WHERE word LIKE 'love%' OR word LIKE 'unlove%' OR word LIKE 'hate%'\n\"\"\")\ntopLocationsLoveHate.show(40)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+-------+-----------+--------------------+---------+\n|   word|total_count|        top_location|top_count|\n+-------+-----------+--------------------+---------+\n|   hate|         22|midsummersnightsd...|        9|\n|  hated|          6|midsummersnightsd...|        4|\n|hateful|          5|midsummersnightsd...|        3|\n|  hates|          5|         asyoulikeit|        2|\n| hateth|          1|midsummersnightsd...|        1|\n|   love|        662|    loveslabourslost|      121|\n|  loved|         38|         asyoulikeit|       13|\n| lovely|         15|midsummersnightsd...|        7|\n|  lover|         33|         asyoulikeit|       14|\n| lovers|         31|midsummersnightsd...|       17|\n|  loves|         51| muchadoaboutnothing|       10|\n| lovest|          8|    tamingoftheshrew|        3|\n| loveth|          2|    loveslabourslost|        1|\n|unloved|          1|midsummersnightsd...|        1|\n+-------+-----------+--------------------+---------+\n\ntopLocationsLoveHate: org.apache.spark.sql.DataFrame = [word: string, total_count: int ... 2 more fields]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 97,
      "time" : "Took: 1 second 336 milliseconds, at 2016-12-1 18:9"
    } ]
  }, {
    "metadata" : {
      "id" : "8ADC76DC45314B31B2D085B78698FE53"
    },
    "cell_type" : "markdown",
    "source" : "### Return the Top Two Locations and Counts\nWe used the `DataFrame` API to write a SQL query that returned the top location and count. Adding the next one is straightforward. What do you observe is returned when there isn't a second location and count?"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "83520E5410494DA79BE37C05D8F63A57"
    },
    "cell_type" : "code",
    "source" : "val topTwoLocations = spark.sql(\"\"\"\n    SELECT word, total_count, \n        locations[0] AS first_location,  counts[0] AS first_count,\n        locations[1] AS second_location, counts[1] AS second_count\n    FROM inverted_index \n    WHERE word LIKE '%love%' OR word LIKE '%hate%'\n\"\"\")\ntopTwoLocations.show(100)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+--------+-----------+--------------------+-----------+--------------------+------------+\n|    word|total_count|      first_location|first_count|     second_location|second_count|\n+--------+-----------+--------------------+-----------+--------------------+------------+\n| beloved|         11|    tamingoftheshrew|          4|         asyoulikeit|           3|\n|  cloven|          1|    loveslabourslost|          1|                null|        null|\n|  cloves|          1|    loveslabourslost|          1|                null|        null|\n|   glove|          3|    loveslabourslost|          2|        twelfthnight|           1|\n|  glover|          1| merrywivesofwindsor|          1|                null|        null|\n|  gloves|          5| merrywivesofwindsor|          3|         asyoulikeit|           1|\n|    hate|         22|midsummersnightsd...|          9|         asyoulikeit|           6|\n|   hated|          6|midsummersnightsd...|          4|         asyoulikeit|           2|\n| hateful|          5|midsummersnightsd...|          3|    loveslabourslost|           1|\n|   hates|          5|         asyoulikeit|          2| merrywivesofwindsor|           1|\n|  hateth|          1|midsummersnightsd...|          1|                null|        null|\n|    love|        662|    loveslabourslost|        121|         asyoulikeit|         119|\n|   loved|         38|         asyoulikeit|         13| muchadoaboutnothing|          13|\n|  lovely|         15|midsummersnightsd...|          7|    tamingoftheshrew|           5|\n|   lover|         33|         asyoulikeit|         14|midsummersnightsd...|          10|\n|  lovers|         31|midsummersnightsd...|         17|         asyoulikeit|           6|\n|   loves|         51| muchadoaboutnothing|         10| merrywivesofwindsor|           9|\n|  lovest|          8|    tamingoftheshrew|          3| muchadoaboutnothing|           2|\n|  loveth|          2|    loveslabourslost|          1|    tamingoftheshrew|           1|\n| unloved|          1|midsummersnightsd...|          1|                null|        null|\n|   whate|          4|    tamingoftheshrew|          3|         asyoulikeit|           1|\n|whatever|          1|    tamingoftheshrew|          1|                null|        null|\n+--------+-----------+--------------------+-----------+--------------------+------------+\n\ntopTwoLocations: org.apache.spark.sql.DataFrame = [word: string, total_count: int ... 4 more fields]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 98,
      "time" : "Took: 1 second 121 milliseconds, at 2016-12-1 18:10"
    } ]
  }, {
    "metadata" : {
      "id" : "A12E1200260C4F43890B3B7C9F8801EF"
    },
    "cell_type" : "markdown",
    "source" : "### Removing Stop Words\nRecall you were asked to implement a `keep(word: String):Boolean` method that filters stop words.\n\nFirst, let's implement `keep`. You can find lists of stop words on the web. One such list for English can be found [here]( * From http://norm.al/2009/04/14/list-of-english-stop-words/). It includes many words that you might not consider stop words. Nevertheless, I'll just use a smaller list here.\n\nNote that I'll use a Scala [Set](http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Set) to hold the stop words. We want _O(1)_ look-up performance. We just want to know if the word is in the set or not.\n\nI'll also add \"\", so I can remove the explicit test for it.\n\nFinally, we'll embed the whole thing in a new Scala `object`. This extra encapsulation is a way to work around occasional problems with \"task not serializable\" errors."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1E1181BF7B5D43B28638787497FE37B1"
    },
    "cell_type" : "code",
    "source" : "// NOTE: Put helpers like this in a separate object. This minimizes the risk of\n// \"task not serializable\" errors when running Spark.\nobject keep {\n    val stopWords = Set(\"\", \"a\", \"an\", \"and\", \"I\", \"he\", \"she\", \"it\", \"the\")\n\n    /**\n     * If the set contains the word, we return false - we don't want to keep it!\n     * Note we assume the word has already been converted to lower case!\n     */\n    def apply(word: String): Boolean = stopWords.contains(word) == false  \n}\n\nobject IIStopWords {\n\n    def compute(sc: org.apache.spark.SparkContext, input: String) = {\n        sc.wholeTextFiles(input).\n        flatMap {\n            case (location, contents) => \n                val words = contents.split(\"\"\"\\W+\"\"\").\n                    map(word => word.toLowerCase).  // Do this early, before keep()\n                    filter(word => keep(word))      // <== filter here\n                val fileName = location.split(java.io.File.separator).last\n                words.map(word => ((word, fileName), 1))\n        }.\n        reduceByKey((count1, count2) => count1 + count2).\n        map { \n            case ((word, fileName), count) => (word, (fileName, count)) \n        }.\n        groupByKey.\n        sortByKey(ascending = true).\n        map { \n            case (word, iterable) => \n                val vect = iterable.toVector.sortBy { \n                    case (fileName, count) => (-count, fileName) \n                }\n                val (locations, counts) = vect.unzip  \n                val totalCount = counts.reduceLeft((n1,n2) => n1+n2)        \n                (word, totalCount, locations, counts)\n        }\n    }\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined object keep\ndefined object IIStopWords\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 99,
      "time" : "Took: 2 seconds 880 milliseconds, at 2016-12-1 18:10"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "3E5F26CCF308489BAFC2CE5D5DCE34E5"
    },
    "cell_type" : "code",
    "source" : "val iiStopWords = IIStopWords.compute(sc, \"data/shakespeare\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "org.apache.spark.SparkException: Task not serializable\n  at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:298)\n  at org.apache.spark.util.ClosureCleaner$.org$apache$spark$util$ClosureCleaner$$clean(ClosureCleaner.scala:288)\n  at org.apache.spark.util.ClosureCleaner$.clean(ClosureCleaner.scala:108)\n  at org.apache.spark.SparkContext.clean(SparkContext.scala:2039)\n  at org.apache.spark.rdd.RDD$$anonfun$flatMap$1.apply(RDD.scala:375)\n  at org.apache.spark.rdd.RDD$$anonfun$flatMap$1.apply(RDD.scala:374)\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n  at org.apache.spark.rdd.RDD.withScope(RDD.scala:358)\n  at org.apache.spark.rdd.RDD.flatMap(RDD.scala:374)\n  at IIStopWords$.compute(<console>:127)\n  ... 73 elided\nCaused by: java.io.NotSerializableException: IIStopWords$\nSerialization stack:\n\t- object not serializable (class: IIStopWords$, value: IIStopWords$@5262b2c)\n\t- field (class: IIStopWords$$anonfun$3, name: $outer, type: class IIStopWords$)\n\t- object (class IIStopWords$$anonfun$3, <function1>)\n  at org.apache.spark.serializer.SerializationDebugger$.improveException(SerializationDebugger.scala:40)\n  at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:46)\n  at org.apache.spark.serializer.JavaSerializerInstance.serialize(JavaSerializer.scala:100)\n  at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:295)\n  ... 83 more\n"
    } ]
  }, {
    "metadata" : {
      "id" : "3A21BDCF674F402883F3B8E70E3E310E"
    },
    "cell_type" : "markdown",
    "source" : "> **NOTE:** If you get an error `org.apache.spark.SparkException: Task not serializable` in the previous cell, even despite the comment about avoiding this problem, it is because of a bug in the way Spark Notebook handles scoping in Scala code. However, as discussed previously, defining whole classes like this is usually best done in libraries that you _use_ in the notebook, where the Scala compiler handles scopes more carefully."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "F44D9D36301344779B87054C92F313EB"
    },
    "cell_type" : "code",
    "source" : "iiStopWords.take(100).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "<console>:101: error: not found: value iiStopWords\n       iiStopWords.take(100).foreach(println)\n       ^\n"
    } ]
  }, {
    "metadata" : {
      "id" : "E1FDAF1071864528A32C3CDC0BE0F5E4"
    },
    "cell_type" : "markdown",
    "source" : "One last thing, we now have `filter(word => keep(word))`, but note how we used `println` in the previous cell to see results. We can do something similar with `filter` and instead write `filter(keep)`. \n\nWhat does this mean exactly? It tells the compiler \"convert the _method_ `keep` to a _function_ and pass that to `filter`.\" This works because `keep` already does what `filter` wants, take a single string argument and return a boolean result.\n\nPassing `keep` is actually different than passing `word => keep(word)`, which is an _anonymous_ function that _calls_ keep. We are using `keep` as the function itself, rather than constructing a function that uses `keep`."
  } ],
  "nbformat" : 4
}