{
  "metadata" : {
    "name" : "Just Enough Scala for Spark",
    "user_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : {
      "id" : "DB7A35849BCB4167802DB59D5CA868E8"
    },
    "cell_type" : "markdown",
    "source" : "# Just Enough Scala for Spark\n\n[Dean Wampler, Ph.D.](mailto:deanwampler@gmail.com)<br/>\n[@deanwampler](http://twitter.com/deanwampler)\n\nWelcome. This notebook teaches you the core concepts of [Scala](http://scala-lang.org) necessary to use [Apache Spark's](http://spark.apache.org) Scala API effectively. Spark does a nice job exploiting the nicest features of Scala, while avoiding most of the more difficult and obscure features. "
  }, {
    "metadata" : {
      "id" : "FEB41A56E21F408A966052A75B819C8E"
    },
    "cell_type" : "markdown",
    "source" : "## Introduction: Why Scala?\nSpark lets you use Scala, Java, Python, R, and SQL to do your work. Scala and Java appeal to _data engineers_, who do the heavy lifting of building resilient and scalable infrastructures for _Big Data_. Python, R, and SQL appeal to _data scientists_, who build models for analyzing data, including machine learning, as well as explore data interactively, where SQL is very convenient.\n\nThese aren't hard boundaries. Many people do both roles. Many data engineers like Python and may use SQL and R. Many data scientists have decided to use Scala with Spark.\n\nBriefly, some of the advantages of using Scala include the following:\n* **Performance:** Since Spark is written in Scala, you get the best performance and the most complete API coverage when you use Scala. It's true that with [DataFrames](http://spark.apache.org/docs/latest/sql-programming-guide.html), code written in all five languages performs about the same. If you need to use the [RDD](http://spark.apache.org/docs/latest/programming-guide.html#resilient-distributed-datasets-rdds) API, then Scala provides the best performance, with Java a close second.\n* **Debugging:** When runtime problems occur, understanding the exception stack frames and other debug information is easiest if you know Scala. Unfortunately, the \"abstraction leaks\" when problems occur.\n* **Concise, Expressive Code:** Compared to Java, Scala code is much more concise and several features of Scala make your code even more concise. This elevates your productivity and makes it easier to imagine a design approach and then write it down without having to translate the idea to a less flexible API that reflects idiomatic language constraints. (You'll see this in action as we go.)\n* **Type Safety:** Compared to Python and R, Scala code benefits from _static typing_ with _type inference_. _Static typing_ means that the Scala parser finds more errors in your expressions at compile time, when they don't match expected types, rather than discovering the problem later at run time. However, _type inference_ means you don't have to add a lot of explicit type information to you code. In most cases, Scala will infer the correct types for you."
  }, {
    "metadata" : {
      "id" : "643793D69BF84D788D14E50DBE1CED14"
    },
    "cell_type" : "markdown",
    "source" : "### Why Not Scala?\nScala isn't perfect. There are two disadvantages compared to Python and R:\n* **Libraries:** Python and R have a rich ecosystem of data analytics libraries. While the picture is improving for Scala, Python and R are still well ahead.\n* **Advanced Language Features:** Mastering advanced language features gives you a lot of power to exploit, but if you don't understand those features, they can get in your way when you're just trying to get work done. Scala has some sophisticated constructs, especially in its _type system_. Fortunately, Spark mostly hides the advanced constructs."
  }, {
    "metadata" : {
      "id" : "1D3A90B8EB19432E9D569E0BDF099FA8"
    },
    "cell_type" : "markdown",
    "source" : "### For More on Scala\nI can only scratch the surface of Scala here. We'll \"sketch\" concepts without too much depth. You'll learn enough to make use of them, but eventually you'll want to deepen your understanding.\n\nWhen you need more information, consider these resources:\n\n* [Programming Scala, Second Edition](http://shop.oreilly.com/product/0636920033073.do): My comprehensive introduction to Scala.\n* [Scala Language Website](http://scala-lang.org/): Where to download Scala, find documentation (e.g., the [Scaladocs](http://www.scala-lang.org/api/current/#package): Scala library documentation, like [Javadocs](https://docs.oracle.com/javase/8/docs/api/)), and other information.\n* [Lightbend](http://www.lightbend.com/services/) training, consulting, and support for Scala, Big Data tools like Spark, and the [Lightbend Reactive Platform](http://www.lightbend.com/products/lightbend-reactive-platform).\n\nFor now, I recommend that you open the Scaladocs for Scala and for Spark's Scala API. Clicking these two links will open them in new browser tabs:\n* Scaladocs for <a href=\"http://www.scala-lang.org/api/current/#package\" target=\"scala_scaladocs\">Scala</a>.\n* Scaladocs for <a href=\"http://spark.apache.org/docs/latest/api/scala/index.html#package\" target=\"spark_scaladocs\">Spark</a>."
  }, {
    "metadata" : {
      "id" : "09039ABE472F4B09AA5969B8FAA7E2BD"
    },
    "cell_type" : "markdown",
    "source" : "> **Tips for using Scaladocs:**\n* Use the search bar in the upper-left-hand side to find a particular _type_. (For example, try \"RDD\" in the Spark Scaladocs.) \n* To search for a particular _method_, click the character under the search box for the method name's first letter, then scroll to it."
  }, {
    "metadata" : {
      "id" : "40AA3A2B596F44CBB4955A0F282E6D28"
    },
    "cell_type" : "markdown",
    "source" : "## About Notebooks\nYou're using the [Spark Notebook](http://spark-notebook.io/) environment, a Scala-centric fork of [iPython](https://ipython.org/) configured for [Apache Spark](http://spark.apache.org).\n\nNotebooks let you mix documentation, like this [Markdown](https://daringfireball.net/projects/markdown/) \"cell\", with cells that contain code, graphs of results, etc. The metaphor is a physical notebook a scientist or student might use while working in a laboratory.\n\nThe menus and toolbar at the top provide options for evaluating a cell, adding and deleting cells, etc. You'll want to learn keyboard shortcuts if you use notebooks a lot."
  }, {
    "metadata" : {
      "id" : "5A1E9EC40F5A423A8C42B542CD7D6378"
    },
    "cell_type" : "markdown",
    "source" : "> **Tips:**\n\n> Invoke the _Help > Keyboard Shortcuts_ menu item, then capture the page as an image (it's a modal dialog, unfortunately). Learn a few shortcuts each day.\n\n> For now, just know that you can click into any cell to move the focus. When you're in a cell, `shift+enter` evaluates the cell (parses and renders the Markdown or runs the code), then moves to the next cell. Try it for a few cells. I'll wait...\n\n> Finally, right click the _open SparkUI_ link in the right-hand sidebar, to see more information about what your Spark jobs are doing. If you want to hide the sidebar, use the _View > Hide/unhide sidebar_ menu item."
  }, {
    "metadata" : {
      "id" : "1085BD83DF844ADC87E5E73DC4F419B6"
    },
    "cell_type" : "markdown",
    "source" : "Okay. It's particularly nice that you can edit a cell you've already evaluated and rerun it. This is great when you're experimenting with code."
  }, {
    "metadata" : {
      "id" : "25BC8DA67F874D09836EE3400D876755"
    },
    "cell_type" : "markdown",
    "source" : "When you start this notebook, Spark Notebook creates a [SparkContext](http://spark.apache.org/docs/latest/programming-guide.html#initializing-spark) for you. This is the entry point of any Spark application. It knows how to connect to your cluster (or run locally in the same JVM), how to configure properties, etc. It also runs a Web UI that lets you monitor your running jobs. The instance of `SparkContext` is called `sc`. The next cell simply confirms that it exists. (The next cell is also our first `code` cell.)"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "EE12AC334C4F4DEA957BDC14070B3468"
    },
    "cell_type" : "code",
    "source" : "sc",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res1: org.apache.spark.SparkContext = org.apache.spark.SparkContext@51717bd1\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "org.apache.spark.SparkContext@51717bd1"
      },
      "output_type" : "execute_result",
      "execution_count" : 1
    } ]
  }, {
    "metadata" : {
      "id" : "8C9131CF1E354A2CB9103CA66C6470E9"
    },
    "cell_type" : "markdown",
    "source" : "Here are few other bits of information we can get from the `SparkContext`:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "02BE99E15B5245FBB07CE38840FC7DB4"
    },
    "cell_type" : "code",
    "source" : "println(\"Spark version:      \" + sc.version)\nprintln(\"Spark master:       \" + sc.master)\nprintln(\"Running 'locally'?: \" + sc.isLocal)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Spark version:      1.6.2\nSpark master:       local[*]\nRunning 'locally'?: true\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 2
    } ]
  }, {
    "metadata" : {
      "id" : "06B794609083404EB53553A5C98FF1E5"
    },
    "cell_type" : "markdown",
    "source" : "## Let's Download Some Data (and Start Learning Scala)\nWe're going to write real Spark programs and use them as vehicles for learning Scala and how to use it with Spark.\n\nBut first, we need to download some text files we'll use, which contain some of the plays of Shakespeare. The next few cells define some helper methods (functions) to do this and then perform the download. We'll start learning Scala concepts as we go."
  }, {
    "metadata" : {
      "id" : "D43407B76FEB47138B4C172B8686399A"
    },
    "cell_type" : "markdown",
    "source" : "> **Note:** \"method\" vs. \"function\"\n\n> Scala follows a common object-oriented convention where the term _method_ is used for a function that's attached to a class or instance. Unlike Java, at least before Java 8, Scala also has _functions_ that are not associated with a particular class or instance. \n\n> In our next code example, we'll define a few helper _methods_ for printing information, but you won't see a class definition here. So, what class is associated with these methods? When you use Scala in a notebook, you're actually using the Scala interpreter, which wraps any expressions and definitions we write into a hidden, generated class. The interpreter has to do this in order to generate valid JVM byte code. \n\n> Unfortunately, it can be a bit confusing when to use a method vs. a function, reflecting Scala's hybrid nature as an object-oriented and a functional language. Fortunately, in many cases, we can use methods and functions interchangably, so we won't worry about the distinction too much from now on.\n\n> We're defining methods now. We'll see what a real _function_ looks like soon."
  }, {
    "metadata" : {
      "id" : "9EB0F4904E62411ABB4732FCE434F3E2"
    },
    "cell_type" : "markdown",
    "source" : "Okay, here are two convenience methods for printing either an error message or a simple \"information\" message. We'll explain the syntax in a subsequent cell below."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "CEDDE3DA00584FD091761BB897BA76B8"
    },
    "cell_type" : "code",
    "source" : "/*\n * \"info\" takes a single String argument, prints it on a line,\n * and returns it. \n */\ndef info(message: String): String = {\n    println(message)\n\n    // The last expression in the block, message, is the return value. \n    // \"return\" keyword not required.\n    // Do no additional formatting for the return string.\n    message  // No additional formatting\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "info: (message: String)String\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 2
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "10CDCBBDF9B0414381D29AA57001B4FE"
    },
    "cell_type" : "code",
    "source" : "/*\n * \"error\" takes a single String argument, prints a formatted error message,\n * and returns the message. \n */\ndef error(message: String): String = {   \n    \n    // Print the string passed to \"println\" and add a linefeed (\"ln\"):\n    // See the next cell for an explanation of how the string is constructed.\n    val fullMessage = s\"\"\"\n        |********************************************************************\n        |\n        |  ERROR: $message\n        |\n        |********************************************************************\n        |\"\"\".stripMargin\n    println(fullMessage)\n    \n    fullMessage\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "error: (message: String)String\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 3
    } ]
  }, {
    "metadata" : {
      "id" : "803A3B24EDA44D8E8D0387961CED80C0"
    },
    "cell_type" : "markdown",
    "source" : "Let's try them:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "094980E7109040EA916AFE8EAA902C35"
    },
    "cell_type" : "code",
    "source" : "val infoString = info(\"All is well.\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "All is well.\ninfoString: String = All is well.\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 4
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "AAF85354A9654E22A53B00546A0CAA29"
    },
    "cell_type" : "code",
    "source" : "val errorString = error(\"Uh oh!\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "\n********************************************************************\n\n  ERROR: Uh oh!\n\n********************************************************************\n\nerrorString: String =\n\"\n********************************************************************\n\n  ERROR: Uh oh!\n\n********************************************************************\n\"\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 5
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "DA14FE765E6C4E5B848876DC5FB95DBC"
    },
    "cell_type" : "code",
    "source" : "errorString",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res6: String =\n\"\n********************************************************************\n\n  ERROR: Uh oh!\n\n********************************************************************\n\"\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "\n********************************************************************\n\n  ERROR: Uh oh!\n\n********************************************************************\n"
      },
      "output_type" : "execute_result",
      "execution_count" : 6
    } ]
  }, {
    "metadata" : {
      "id" : "5CBE146ACD0B4212AB27E476DB571F7E"
    },
    "cell_type" : "markdown",
    "source" : "Method definitions have the following elements, in order:\n* The `def` keyword.\n* The method's name (`error` and `info` here).\n* The argument list in parentheses. If there are no arguments, the empty parentheses can be omitted. This is common for `toString` and \"getter\"-like methods that simply return a field in an instance, etc.\n* A colon followed by the type of the value returned by the method. This can often be inferred by Scala, so it's optional, but recommended for readibility by users!\n* An `=` (equals) sign that separates the method _signature_ from the _body_.\n* The body in braces `{ ... }`, although if the body consists of a single expression, the braces are optional.\n* The last expression in the body is used as the return value. The `return` keyword is optional and rarely used.\n* Semicolons (`;`) are inferred at the end of lines (in most cases) and rarely used."
  }, {
    "metadata" : {
      "id" : "CD393F164BDA4FA883DC4B8A5D00AE09"
    },
    "cell_type" : "markdown",
    "source" : "Look at the argument list for `error`. It is `(message: String)`, where `message` is the argument name and its type is `String`. This convention for _type annotations_, `name: Type`, is also used for the return type, `error(...): String`. Type annotations are required by Scala for method arguments. They are optional in most cases for the return type. We'll see that Scala can infer the types of many expressions and variable declarations.\n\nScala uses the same comment conventions as Java, `// ...` for a single line, and `/* ... */` for a comment block."
  }, {
    "metadata" : {
      "id" : "5755E06B4F334463BB852AD280667B3B"
    },
    "cell_type" : "markdown",
    "source" : "> **Note:** Expression vs. Statement\n\n> An _expression_ has a value, while a _statement_ does not. Hence, when we assign an expression to a variable, the value the expression returns is assigned to the variable."
  }, {
    "metadata" : {
      "id" : "2F67CEA53FCC4CD78E60C8471C77C032"
    },
    "cell_type" : "markdown",
    "source" : "Inside `error`, we used a combination _interpolated_ and _triple-quoted_ string with the syntax `s\"\"\"...\"\"\"`:\n* **Triple-quoted string:** `\"\"\"...\"\"\"`. Useful for embedding newlines, like we did inside `error`. (We'll see another benefit later.)\n* **String interpolation:** Invoked by putting `s` before the string, e.g., `s\"...\"` or `s\"\"\"...\"\"\"`. Lets us embed variable references and expressions, where the string conversion will be inserted automatically. For example: "
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "AFF78A0F505845BE88A3559B7958B24A"
    },
    "cell_type" : "code",
    "source" : "s\"\"\"Use braces for expressions: ${sc.version}.\nYou can omit the braces when just using a variable: $sc\nHowever, watch for ambiguities like ${sc}andextrastuff\"\"\"",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res16: String =\nUse braces for expressions: 1.6.2.\nYou can omit the braces when just using a variable: org.apache.spark.SparkContext@51717bd1\nHowever, watch for ambiguities like org.apache.spark.SparkContext@51717bd1andextrastuff\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "Use braces for expressions: 1.6.2.\nYou can omit the braces when just using a variable: org.apache.spark.SparkContext@51717bd1\nHowever, watch for ambiguities like org.apache.spark.SparkContext@51717bd1andextrastuff"
      },
      "output_type" : "execute_result",
      "execution_count" : 11
    } ]
  }, {
    "metadata" : {
      "id" : "60FFAE1216ED45A480E3C68682B432DC"
    },
    "cell_type" : "markdown",
    "source" : "Another feature we're using for triple-quoted strings is the ability to strip the leading whitespace off each line. The `stripMargin` method removes all whitespace before and including the `|`. This lets you indent those lines for proper code formatting, but not have that whitespace remain in the string. In the following example, the resulting string has blank lines at the beginning and end. Note what happens with whitespace before `line2`:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "F85886E75E5A47C9861E3F65A8EB4267"
    },
    "cell_type" : "code",
    "source" : "s\"\"\"\n    |line 1\n    |  line 2\n    |\"\"\".stripMargin",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res18: String =\n\"\nline 1\n  line 2\n\"\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "\nline 1\n  line 2\n"
      },
      "output_type" : "execute_result",
      "execution_count" : 12
    } ]
  }, {
    "metadata" : {
      "id" : "2D7671C27CAB4A678AB8F0DF595BF4F4"
    },
    "cell_type" : "markdown",
    "source" : "> **Note:**\n\n> Character \"literals\" are specified single quotes, '/', while strings use double quotes, \"/\"."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "7E816DA2EE374A858D48A7CA8DB629C1"
    },
    "cell_type" : "code",
    "source" : "'/'",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res20: Char = /\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "/"
      },
      "output_type" : "execute_result",
      "execution_count" : 13
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "DE8F13B8E30D4EDF86972B678C67FF04"
    },
    "cell_type" : "code",
    "source" : "\"/\"",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res22: String = /\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "/"
      },
      "output_type" : "execute_result",
      "execution_count" : 14
    } ]
  }, {
    "metadata" : {
      "id" : "5D406BE17F12428081AD53D22E347148"
    },
    "cell_type" : "markdown",
    "source" : "### Mutable Variables vs. Immutable Values\nSee how how to declare an immutable value before with `val`. Let's explore this a bit more:\n* `val immutableValue = ...`: Once initialized, we can't assign a _different_ value to `immutableValue`.\n* `var mutableVariable = ...`: We can assign new values to `mutableVariable` as often as we want.\n\nIt's _highly recommended_ that you only use `vals` unless you have a good reason for needing mutability, which is a very common source of bugs!!\n\n> A `val immutableValue` could point to an instance that itself _is_ mutable, e.g., an [Array](http://www.scala-lang.org/api/current/#scala.Array). In this case, while we can't assign a new array to `immutableValue`, we can change elements within the array! Put another way, immutability isn't _transitive_."
  }, {
    "metadata" : {
      "id" : "7CDC26D8E6E145579F07A2A577B264AA"
    },
    "cell_type" : "markdown",
    "source" : "### Download the Files\nNow let's define a method that works like the popularity \\*NIX [curl](http://linux.die.net/man/1/curl) utility. It's a bit long and you don't need to understand all the details, but we'll use it to download data we need for the notebook."
  }, {
    "metadata" : {
      "id" : "5956F2A6A32C4782844AE7E53A982575"
    },
    "cell_type" : "markdown",
    "source" : "Most of the types used here are from Java's library (JDK). Because Scala compiles to JVM byte code, you can use any Java library you want from Scala:\n* [java.net.URL](https://docs.oracle.com/javase/8/docs/api/java/net/URL.html): Handles URL formatting and connections.\n* [java.io.File](https://docs.oracle.com/javase/8/docs/api/java/io/File.html): Working with files and directories.\n* [java.io.BufferedInputStream](https://docs.oracle.com/javase/8/docs/api/java/io/BufferedInputStream.html): Buffered input from an underlying stream.\n* [java.io.BufferedOutputStream](https://docs.oracle.com/javase/8/docs/api/java/io/BufferedOutputStream.html): Buffered output to an underlying stream.\n* [java.io.FileOutputStream](https://docs.oracle.com/javase/8/docs/api/java/io/FileOutputStream.html): Output to a file, specifically.\n\nAs before, we'll use comments to explain a few other new Scala constructs. "
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1CD9CBDB4CE540AE8C0CACD1106377A6"
    },
    "cell_type" : "code",
    "source" : "// Import this utility for working with URLs. Unlike Java the semicolon ';' is not required.\nimport java.net.URL   \n\n// Use {...} to provide a list of things to import, when you don't want to import everything \n// in a package and you don't want to write a separate line for each type.\nimport java.io.{File, BufferedInputStream, BufferedOutputStream, FileOutputStream}\n\n/**\n * Download a file at a URL and write it to a target directory.\n */\ndef curl(sourceURLString: String, targetDirectoryString: String): File = {\n\n    // The path separator on your platform: \"/\" on Linux and MacOS, \"\\\" on Windows.\n    val pathSeparator = File.separator\n\n    // Use the name of the remote file as the file name in the target directory.\n    // We split on the URL path elements using the separator, which is ALWAYS \"/\"\n    // on all platforms.\n    val sourceFileName = sourceURLString.split(\"/\").last  \n    val outFileName = targetDirectoryString + pathSeparator + sourceFileName\n\n    // Set up a connection and buffered input stream for the source file.\n    println(s\"Downloading $sourceURLString to $outFileName\")\n    val sourceURL = new URL(sourceURLString)\n    val connection = sourceURL.openConnection()\n    val in = new BufferedInputStream(connection.getInputStream())\n\n    // If here, the connection was successfully opened (i.e., no exceptions thrown).\n    // Now create the target directory (nothing happens if it already exists).\n    val targetDirectory = new File(targetDirectoryString)\n    targetDirectory.mkdirs()\n\n    // Setup the output file and a stream to write to it.\n    val outFile = new File(outFileName)\n    val out = new BufferedOutputStream(new FileOutputStream(outFile))\n    \n    // Create a buffer to hold the in-flight bytes.\n    val hundredK = 100*1024\n    val bytes = Array.fill[Byte](hundredK)(0)   // Create byte buffer, elements set to 0\n                                                // Array elements are _mutable_.\n    // Loop until we've read everything.\n    var loops = 0                               // A counter for progress feedback.\n    var count = in.read(bytes, 0, hundredK)     // Read up to \"hundredK\" bytes at a time.\n    while (count != -1) {                       // Haven't hit the end of input yet?\n        if (loops % 10 == 0) print(\".\")         // Print occasional feedback.\n        loops += 1                              // increment the counter.\n        out.write(bytes, 0, count)              // Write to the new file.\n        count = in.read(bytes, 0, hundredK)     // Read the next chunk and loop...\n    }\n    println(\"\\nFinished!\")\n    in.close()                                  // Clean up! Close file & stream handles\n    out.flush()\n    out.close()\n    outFile                                     // Returned file (if we got this far)\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import java.net.URL\nimport java.io.{File, BufferedInputStream, BufferedOutputStream, FileOutputStream}\ncurl: (sourceURLString: String, targetDirectoryString: String)java.io.File\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 7
    } ]
  }, {
    "metadata" : {
      "id" : "9CDE2B4DECD04454B032AB2965658AC3"
    },
    "cell_type" : "markdown",
    "source" : "Okay, before we actually use `curl`, let's create the target directory. (This is also done in `curl`, but we're using the success or failure for other purposes here.) "
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "2694A3E4B4FF44F683842A9AB7742C89"
    },
    "cell_type" : "code",
    "source" : "// The target directory, which we'll now create, if necessary.\nval shakespeare = new File(\"data/shakespeare\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "shakespeare: java.io.File = data/shakespeare\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 8
    } ]
  }, {
    "metadata" : {
      "id" : "2C4EA916B7974EAE8863CDB8D78251B7"
    },
    "cell_type" : "markdown",
    "source" : "Scala's `if` construct is actually an expression (in Java they are _statements_). The `if` expression will return `true` or `false` and assign it to `success`, which we'll use in a moment."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "CFADB7E042BC4F59837EA8CBCE16CDB2"
    },
    "cell_type" : "code",
    "source" : "val success = if (shakespeare.exists == false) {   // doesn't exist already?\n    if (shakespeare.mkdirs() == false) {           // did the attempt fail??\n        error(s\"Failed to create directory path: $shakespeare\")  // ignore returned string\n        false\n    } else {                                       // successful\n        info(s\"Created $shakespeare\")\n        true\n    }\n} else {\n    info(s\"$shakespeare already exists\")\n    true\n}\nprintln(\"success = \" + success)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Created data/shakespeare\nsuccess = true\nsuccess: Boolean = true\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 9
    } ]
  }, {
    "metadata" : {
      "id" : "015D2C9460EC4C619EEDE8AF53019887"
    },
    "cell_type" : "markdown",
    "source" : "If we successfully created the output directory (or it already existed), let's download a handful of files, each with one play of Shakespeare, from [http://www.cs.usyd.edu.au/~matty/Shakespeare/](http://www.cs.usyd.edu.au/~matty/Shakespeare/)."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "FD299F503F6E45128FB1243B1E4C5025"
    },
    "cell_type" : "code",
    "source" : "val pathSeparator = File.separator\nval targetDirName = shakespeare.toString\nval urlRoot = \"http://www.cs.usyd.edu.au/~matty/Shakespeare/texts/comedies/\"\nval plays = Seq(\n    \"tamingoftheshrew\", \"comedyoferrors\", \"loveslabourslost\", \"midsummersnightsdream\",\n    \"merrywivesofwindsor\", \"muchadoaboutnothing\", \"asyoulikeit\", \"twelfthnight\")\n\nif (success) {\n    println(s\"Downloading plays from $urlRoot.\")\n    val successes = for {\n        play <- plays\n        playFileName = targetDirName + pathSeparator + play\n        playFile = new File(playFileName)\n        if (playFile.exists == false)\n        file = curl(urlRoot + play, targetDirName)\n    } yield {\n        info(s\"Downloaded $play and wrote $file\")\n        s\"$playFileName:\\tSuccess!\"\n    }\n  \n    println(\"Finished!\")\n  \n    successes.foreach(println)\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Downloading plays from http://www.cs.usyd.edu.au/~matty/Shakespeare/texts/comedies/.\nDownloading http://www.cs.usyd.edu.au/~matty/Shakespeare/texts/comedies/tamingoftheshrew to data/shakespeare/tamingoftheshrew\n.......\nFinished!\nDownloading http://www.cs.usyd.edu.au/~matty/Shakespeare/texts/comedies/comedyoferrors to data/shakespeare/comedyoferrors\n...\nFinished!\nDownloading http://www.cs.usyd.edu.au/~matty/Shakespeare/texts/comedies/loveslabourslost to data/shakespeare/loveslabourslost\n.....\nFinished!\nDownloading http://www.cs.usyd.edu.au/~matty/Shakespeare/texts/comedies/midsummersnightsdream to data/shakespeare/midsummersnightsdream\n..\nFinished!\nDownloading http://www.cs.usyd.edu.au/~matty/Shakespeare/texts/comedies/merrywivesofwindsor to data/shakespeare/merrywivesofwindsor\n....\nFinished!\nDownloading http://www.cs.usyd.edu.au/~matty/Shakespeare/texts/comedies/muchadoaboutnothing to data/shakespeare/muchadoaboutnothing\n.....\nFinished!\nDownloading http://www.cs.usyd.edu.au/~matty/Shakespeare/texts/comedies/asyoulikeit to data/shakespeare/asyoulikeit\n....\nFinished!\nDownloading http://www.cs.usyd.edu.au/~matty/Shakespeare/texts/comedies/twelfthnight to data/shakespeare/twelfthnight\n....\nFinished!\nDownloaded tamingoftheshrew and wrote data/shakespeare/tamingoftheshrew\nDownloaded comedyoferrors and wrote data/shakespeare/comedyoferrors\nDownloaded loveslabourslost and wrote data/shakespeare/loveslabourslost\nDownloaded midsummersnightsdream and wrote data/shakespeare/midsummersnightsdream\nDownloaded merrywivesofwindsor and wrote data/shakespeare/merrywivesofwindsor\nDownloaded muchadoaboutnothing and wrote data/shakespeare/muchadoaboutnothing\nDownloaded asyoulikeit and wrote data/shakespeare/asyoulikeit\nDownloaded twelfthnight and wrote data/shakespeare/twelfthnight\nFinished!\ndata/shakespeare/tamingoftheshrew:\tSuccess!\ndata/shakespeare/comedyoferrors:\tSuccess!\ndata/shakespeare/loveslabourslost:\tSuccess!\ndata/shakespeare/midsummersnightsdream:\tSuccess!\ndata/shakespeare/merrywivesofwindsor:\tSuccess!\ndata/shakespeare/muchadoaboutnothing:\tSuccess!\ndata/shakespeare/asyoulikeit:\tSuccess!\ndata/shakespeare/twelfthnight:\tSuccess!\npathSeparator: String = /\ntargetDirName: String = data/shakespeare\nurlRoot: String = http://www.cs.usyd.edu.au/~matty/Shakespeare/texts/comedies/\nplays: Seq[String] = List(tamingoftheshrew, comedyoferrors, loveslabourslost, midsummersnightsdream, merrywivesofwindsor, muchadoaboutnothing, asyoulikeit, twelfthnight)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 11
    } ]
  }, {
    "metadata" : {
      "id" : "8D9C6981C7CE4E79BAC96837D15A4EC8"
    },
    "cell_type" : "markdown",
    "source" : "I'm using a so-called `for` _comprehension_. They are _expressions_, not _statements_ like Java's `for` loops. They have the form:\n\n```\nfor {\n  play <- plays\n  ...\n} yield { block_of_final_expressions }\n```\n\nWe iterate through a collection, `plays`, and assign each one to the `play` variable (actually an immutable value for each pass through the loop). \n\nAfter assigning to `play`, subsequent steps in the `for` comprehension use it. First, a [java.io.File](https://docs.oracle.com/javase/8/docs/api/java/io/File.html) instance, `playFile`, is created. Then, `playFile` is used to evaluate a conditional - does the file already exist (i.e., have we already downloaded this file)?\n\nIf the file already exists, the conditional returns `false`, which short-circuits the loop and goes to the next `play` in the list. If the file doesn't exit, the final expression uses `curl` to download it.\n\nThe `yield` keyword tells Scala that I want to construct a new collection, using the expression that follows to construct each element, an _interpolated_ string."
  }, {
    "metadata" : {
      "id" : "3294471AEA464DED856AAD4DEC34DDB3"
    },
    "cell_type" : "markdown",
    "source" : "## Passing Functions as Arguments\nNote how we printed the returned `successes` collection of strings. The idiom `collection.foreach(println)` is handy for looping over the elements and printing them, one per line. But how exactly does this work? (We'll use `plays` instead of `successes`, because the latter will be empty if you run that code twice, since the files will already be downloaded.)"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9B3811BAC9194A7AA30DDB65678F075A"
    },
    "cell_type" : "code",
    "source" : "println(\"Pass println as the function to use for each element:\")\nplays.foreach(println)\n\nprintln(\"\\nUsing an anonymous function that calls println: `str => println(str)`\")\nprintln(\"(Note that the type of the argument `str` is inferred to be String.)\")\nplays.foreach(str => println(str))\n\nprintln(\"\\nAdding the argument type explicitly. Note that the parentheses are required.\")\nplays.foreach((str: String) => println(str))\n\nprintln(\"\\nWhy do we need to name this argument? Scala lets us use _ as a placeholder.\")\nplays.foreach(println(_))\n\nprintln(\"\\nFor longer functions, you can use {...} instead of (...).\")\nprintln(\"Why? Because it gives you the familiar multiline block syntax with {...}\")\nplays.foreach {\n  (str: String) => println(str)\n}\n\nprintln(\"\\nThe _ placeholder can be used *once* for each argument in the list.\")\nprintln(\"As an assume, use `reduceLeft` to sum some integers.\")\nval integers = 0 to 10   // Return a \"range\" from 0 to 10, inclusive\nintegers.reduceLeft((i,j) => i+j)\nintegers.reduceLeft(_+_)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Pass println as the function to use for each element:\ntamingoftheshrew\ncomedyoferrors\nloveslabourslost\nmidsummersnightsdream\nmerrywivesofwindsor\nmuchadoaboutnothing\nasyoulikeit\ntwelfthnight\n\nUsing an anonymous function that calls println: `str => println(str)`\n(Note that the type of the argument `str` is inferred to be String.)\ntamingoftheshrew\ncomedyoferrors\nloveslabourslost\nmidsummersnightsdream\nmerrywivesofwindsor\nmuchadoaboutnothing\nasyoulikeit\ntwelfthnight\n\nAdding the argument type explicitly. Note that the parentheses are required.\ntamingoftheshrew\ncomedyoferrors\nloveslabourslost\nmidsummersnightsdream\nmerrywivesofwindsor\nmuchadoaboutnothing\nasyoulikeit\ntwelfthnight\n\nWhy do we need to name this argument? Scala lets us use _ as a placeholder.\ntamingoftheshrew\ncomedyoferrors\nloveslabourslost\nmidsummersnightsdream\nmerrywivesofwindsor\nmuchadoaboutnothing\nasyoulikeit\ntwelfthnight\n\nFor longer functions, you can use {...} instead of (...).\nWhy? Because it gives you the familiar multiline block syntax with {...}\ntamingoftheshrew\ncomedyoferrors\nloveslabourslost\nmidsummersnightsdream\nmerrywivesofwindsor\nmuchadoaboutnothing\nasyoulikeit\ntwelfthnight\n\nThe _ placeholder can be used *once* for each argument in the list.\nAs an assume, use `reduceLeft` to sum some integers.\nintegers: scala.collection.immutable.Range.Inclusive = Range(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nres24: Int = 55\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "55"
      },
      "output_type" : "execute_result",
      "execution_count" : 16
    } ]
  }, {
    "metadata" : {
      "id" : "6E8F041BF67F43DD9C79FE29021BDC7F"
    },
    "cell_type" : "markdown",
    "source" : "# Our First Spark Program\nWhew! We've learned a lot of Scala already while doing typical data science chores (i.e., fetching data). \n\nNow let's implement a real algorithm using Spark, _Inverted Index_."
  }, {
    "metadata" : {
      "id" : "EA38A54959954056A26AFB2136540AD4"
    },
    "cell_type" : "markdown",
    "source" : "## Inverted Index - When You're Tired of Counting Words...\n\nYou'll want to use _Inverted Index_ when you create your next \"Google killer\". It takes in a corpus of documents (e.g., web pages), tokenizes the words, and outputs for each word a list of the documents that contain it, along with the corresponding counts. \n\nThis is a slightly more interesting algorithm than _Word Count_, the classic \"hello world\" program everyone implements when they learn Spark.\n\nThe term _inverted_ here means we start with the words as part of the input _values_, while the _keys_ are the document identifiers, and we'll switch (\"invert\") to using the words as keys and the document identifiers as values."
  }, {
    "metadata" : {
      "id" : "D7F7A6A97DE14FA18131C707E4599D8A"
    },
    "cell_type" : "markdown",
    "source" : "Here's our first version, all at once. This is _one, long expression_. Note the periods `.` at the end of the subexpressions."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "279CFDA0E697461A8109AF880AF3FF10"
    },
    "cell_type" : "code",
    "source" : "val iiFirstPass1 = sc.wholeTextFiles(shakespeare.toString).\n    flatMap { location_contents_tuple2 => \n        val words = location_contents_tuple2._2.split(\"\"\"\\W+\"\"\")\n        val fileName = location_contents_tuple2._1.split(pathSeparator).last\n        words.map(word => ((word, fileName), 1))\n    }.\n    reduceByKey((count1, count2) => count1 + count2).\n    map { word_file_count_tup3 => \n        (word_file_count_tup3._1._1, (word_file_count_tup3._1._2, word_file_count_tup3._2)) \n    }.\n    groupByKey.\n    sortByKey(ascending = true).\n    mapValues { iterable => \n        val vect = iterable.toVector.sortBy { file_count_tup2 => \n            (-file_count_tup2._2, file_count_tup2._1)\n        }\n        vect.mkString(\",\")\n    }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "iiFirstPass1: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[9] at mapValues at <console>:71\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 41
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "6EB201ECBECA4B148CC0D6E7D308C46D"
    },
    "cell_type" : "code",
    "source" : "iiFirstPass1.take(50).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "(,(asyoulikeit,1),(comedyoferrors,1),(loveslabourslost,1),(merrywivesofwindsor,1),(midsummersnightsdream,1),(muchadoaboutnothing,1),(tamingoftheshrew,1),(twelfthnight,1))\n(A,(loveslabourslost,78),(tamingoftheshrew,59),(twelfthnight,47),(comedyoferrors,42),(midsummersnightsdream,39),(merrywivesofwindsor,38),(asyoulikeit,34),(muchadoaboutnothing,31))\n(ABOUT,(muchadoaboutnothing,18))\n(ACT,(merrywivesofwindsor,23),(asyoulikeit,22),(twelfthnight,18),(muchadoaboutnothing,17),(tamingoftheshrew,12),(comedyoferrors,11),(loveslabourslost,9),(midsummersnightsdream,9))\n(ADAM,(asyoulikeit,16))\n(ADO,(muchadoaboutnothing,18))\n(ADRIANA,(comedyoferrors,85))\n(ADRIANO,(loveslabourslost,111))\n(AEGEON,(comedyoferrors,20))\n(AEMELIA,(comedyoferrors,16))\n(AEMILIA,(comedyoferrors,3))\n(AEacides,(tamingoftheshrew,1))\n(AEgeon,(comedyoferrors,7))\n(AEgle,(midsummersnightsdream,1))\n(AEmilia,(comedyoferrors,4))\n(AEsculapius,(merrywivesofwindsor,1))\n(AGUECHEEK,(twelfthnight,2))\n(ALL,(midsummersnightsdream,2),(tamingoftheshrew,2))\n(AMIENS,(asyoulikeit,16))\n(ANDREW,(twelfthnight,104))\n(ANGELO,(comedyoferrors,36))\n(ANN,(merrywivesofwindsor,1))\n(ANNE,(merrywivesofwindsor,27))\n(ANTIPHOLUS,(comedyoferrors,195))\n(ANTONIO,(muchadoaboutnothing,32),(twelfthnight,32))\n(ARMADO,(loveslabourslost,111))\n(AS,(asyoulikeit,24))\n(AUDREY,(asyoulikeit,18))\n(Abate,(loveslabourslost,1),(midsummersnightsdream,1))\n(Abbess,(comedyoferrors,2))\n(Abetting,(comedyoferrors,1))\n(Abhor,(asyoulikeit,1))\n(Abide,(midsummersnightsdream,1))\n(Ability,(muchadoaboutnothing,1))\n(About,(loveslabourslost,2),(merrywivesofwindsor,2),(midsummersnightsdream,1),(muchadoaboutnothing,1),(tamingoftheshrew,1),(twelfthnight,1))\n(Above,(loveslabourslost,3),(twelfthnight,2),(merrywivesofwindsor,1),(tamingoftheshrew,1))\n(Abraham,(merrywivesofwindsor,2))\n(Abruptly,(asyoulikeit,1))\n(Academe,(loveslabourslost,1))\n(Accept,(tamingoftheshrew,1))\n(Accompany,(midsummersnightsdream,1))\n(According,(asyoulikeit,2),(comedyoferrors,1),(tamingoftheshrew,1),(twelfthnight,1))\n(Accost,(twelfthnight,3))\n(Accusativo,(merrywivesofwindsor,1))\n(Acheron,(midsummersnightsdream,1))\n(Achieve,(tamingoftheshrew,1))\n(Achilles,(loveslabourslost,1))\n(Actaeon,(merrywivesofwindsor,2))\n(Action,(loveslabourslost,1))\n(Adam,(asyoulikeit,7),(comedyoferrors,4),(muchadoaboutnothing,3),(loveslabourslost,2),(tamingoftheshrew,1))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 42
    } ]
  }, {
    "metadata" : {
      "id" : "5C58024E869A433188F2002554FD0DD8"
    },
    "cell_type" : "markdown",
    "source" : "Now let's break it down into steps, assigning each step to a variable. This extra verbosity let's us see what Scala infers for the type returned by each expression, helping us learn. \n\nThis is one of the nice features of Scala. We don't have to put in the type information ourselves, most of the time, like we would have to do for Java code. Instead, we let the compiler give us feedback about what we just created. This is especially useful when you're learning a new API, like Spark's."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "5C14F35215B645AF8E1114F13E06BE84"
    },
    "cell_type" : "code",
    "source" : "val fileContents = sc.wholeTextFiles(shakespeare.toString)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "fileContents: org.apache.spark.rdd.RDD[(String, String)] = data/shakespeare MapPartitionsRDD[11] at wholeTextFiles at <console>:57\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 43
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0D31BABCC0AD459ABCDB6C5AC7C13ED1"
    },
    "cell_type" : "code",
    "source" : "// val list = Seq(\"one\", \"two\", \"three\")\n// RDD[Tuple2[String,String]]\n(\"one\", \"two\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res79: (String, String) = (one,two)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "(one,two)"
      },
      "output_type" : "execute_result",
      "execution_count" : 45
    } ]
  }, {
    "metadata" : {
      "id" : "3DE80FDA9C8947938A39BDB23B6A7E59"
    },
    "cell_type" : "markdown",
    "source" : "The output is telling us that `fileContents` has the type [RDD[(String,String)]](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD), but `RDD` is a base class and the actual instance is a `MapPartitionsRDD`, which is a \"private\" implementation subclass of `RDD`. \n\nA name followed by square brackets, `[...]`, means that `RDD[...]` requires one or more type parameters in the brackets. In this case, a single type parameter, which represents the type of the records held by the `RDD`. \n\nThe single type parameter is given by `(String,String)`, which is a convenient shorthand for [Tuple2[String,String]](http://www.scala-lang.org/api/current/index.html#scala.Tuple2). That is, we have two-element _tuples_ as records, where the first element is a `String` for a file's fully-qualified path and the second element is a `String` for the contents of that file. This is what `SparkContext.wholeTextFiles` returns for us. We'll use the path to remember where we found words, while the contents contains the words themselves (of course).\n\nTo recap, the following two types are equivalent:\n* `RDD[(String,String)]` - Note parentheses nested in brackets, `[(...)]`.\n* `RDD[Tuple2[String,String]]` - Note nested brackets `[...[...]]`, not `[(...)]`."
  }, {
    "metadata" : {
      "id" : "E7013006BEBB49818F71394C6006B8E6"
    },
    "cell_type" : "markdown",
    "source" : "We'll see shortly that you can also write _instances_ of [Tuple2[T1,T2]](http://www.scala-lang.org/api/current/index.html#scala.Tuple2) with the same syntax, e.g., `(\"foo\", 101)`, for a `(String,Int)` tuple, and similarly for _higher-arity_ tuples (up to 22 elements...), e.g., `(\"foo\", 101, 3.14159, (\"bar\", 202L))`. Run the next cell to see the type signature for this last tuple."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "348ECFFC072E498A90A069E8FBD896C6"
    },
    "cell_type" : "code",
    "source" : "val footuple = (\"foo\", 101L, 3.14159F, (\"bar\", 202L))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "footuple: (String, Long, Float, (String, Long)) = (foo,101,3.14159,(bar,202))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 48
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "6F0388F3C9524011BB44099F00976C05"
    },
    "cell_type" : "code",
    "source" : "val (name, age, pi, (otherName, otherAge)) = footuple",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "name: String = foo\nage: Long = 101\npi: Float = 3.14159\notherName: String = bar\notherAge: Long = 202\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 49
    } ]
  }, {
    "metadata" : {
      "id" : "D3DDA1765CFF488C9C09518D2B7A6709"
    },
    "cell_type" : "markdown",
    "source" : "Do you understand it? Do you see that it's a four-element tuple and not a five-element tuple? This is because the `(\"bar\", 202L)` is a nested tuple. It's the fourth element of the outer tuple."
  }, {
    "metadata" : {
      "id" : "560F2DC1EAAD46F28CDDBB2F5BE877ED"
    },
    "cell_type" : "markdown",
    "source" : "**Exercise:** Try creating some more tuples with elements of different types. Use the next cell."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "E9EA7CFFCEE24419B028DE88C7AE70A3"
    },
    "cell_type" : "code",
    "source" : "(1,2)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res37: (Int, Int) = (1,2)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "(1,2)"
      },
      "output_type" : "execute_result",
      "execution_count" : 22
    } ]
  }, {
    "metadata" : {
      "id" : "DC32974A3B8D40F08D6F1717F6C5B6D2"
    },
    "cell_type" : "markdown",
    "source" : "How many `fileContents` records do we have? Not many. It should be the same number as the number of files we downloaded above."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "36EF21C8E62149838CF404DC4BC1E803"
    },
    "cell_type" : "code",
    "source" : "fileContents.count\nfileContents.take(1).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "(file:/opt/docker/data/shakespeare/midsummersnightsdream,\tA MIDSUMMER NIGHT'S DREAM\n\n\n\tDRAMATIS PERSONAE\n\n\nTHESEUS\tDuke of Athens.\n\nEGEUS\tfather to Hermia.\n\n\nLYSANDER\t|\n\t|  in love with Hermia.\nDEMETRIUS\t|\n\n\nPHILOSTRATE\tmaster of the revels to Theseus.\n\nQUINCE\ta carpenter.\n\nSNUG\ta joiner.\n\nBOTTOM\ta weaver.\n\nFLUTE\ta bellows-mender.\n\nSNOUT\ta tinker.\n\nSTARVELING\ta tailor.\n\nHIPPOLYTA\tqueen of the Amazons, betrothed to Theseus.\n\nHERMIA\tdaughter to Egeus, in love with Lysander.\n\nHELENA\tin love with Demetrius.\n\nOBERON\tking of the fairies.\n\nTITANIA\tqueen of the fairies.\n\nPUCK\tor Robin Goodfellow.\n\n\nPEASEBLOSSOM\t|\n\t|\nCOBWEB\t|\n\t|  fairies.\nMOTH\t|\n\t|\nMUSTARDSEED\t|\n\n\n\tOther fairies attending their King and Queen.\n\n\tAttendants on Theseus and Hippolyta.\n\nSCENE\tAthens, and a wood near it.\n\n\n\n\n\tA MIDSUMMER NIGHT'S DREAM\n\n\nACT I\n\n\n\nSCENE I\tAthens. The palace of THESEUS.\n\n\n\t[Enter THESEUS, HIPPOLYTA, PHILOSTRATE, and\n\tAttendants]\n\nTHESEUS\tNow, fair Hippolyta, our nuptial hour\n\tDraws on apace; four happy days bring in\n\tAnother moon: but, O, methinks, how slow\n\tThis old moon wanes! she lingers my desires,\n\tLike to a step-dame or a dowager\n\tLong withering out a young man revenue.\n\nHIPPOLYTA\tFour days will quickly steep themselves in night;\n\tFour nights will quickly dream away the time;\n\tAnd then the moon, like to a silver bow\n\tNew-bent in heaven, shall behold the night\n\tOf our solemnities.\n\nTHESEUS\tGo, Philostrate,\n\tStir up the Athenian youth to merriments;\n\tAwake the pert and nimble spirit of mirth;\n\tTurn melancholy forth to funerals;\n\tThe pale companion is not for our pomp.\n\n\t[Exit PHILOSTRATE]\n\n\tHippolyta, I woo'd thee with my sword,\n\tAnd won thy love, doing thee injuries;\n\tBut I will wed thee in another key,\n\tWith pomp, with triumph and with revelling.\n\n\t[Enter EGEUS, HERMIA, LYSANDER, and DEMETRIUS]\n\nEGEUS\tHappy be Theseus, our renowned duke!\n\nTHESEUS\tThanks, good Egeus: what's the news with thee?\n\nEGEUS\tFull of vexation come I, with complaint\n\tAgainst my child, my daughter Hermia.\n\tStand forth, Demetrius. My noble lord,\n\tThis man hath my consent to marry her.\n\tStand forth, Lysander: and my gracious duke,\n\tThis man hath bewitch'd the bosom of my child;\n\tThou, thou, Lysander, thou hast given her rhymes,\n\tAnd interchanged love-tokens with my child:\n\tThou hast by moonlight at her window sung,\n\tWith feigning voice verses of feigning love,\n\tAnd stolen the impression of her fantasy\n\tWith bracelets of thy hair, rings, gawds, conceits,\n\tKnacks, trifles, nosegays, sweetmeats, messengers\n\tOf strong prevailment in unharden'd youth:\n\tWith cunning hast thou filch'd my daughter's heart,\n\tTurn'd her obedience, which is due to me,\n\tTo stubborn harshness: and, my gracious duke,\n\tBe it so she; will not here before your grace\n\tConsent to marry with Demetrius,\n\tI beg the ancient privilege of Athens,\n\tAs she is mine, I may dispose of her:\n\tWhich shall be either to this gentleman\n\tOr to her death, according to our law\n\tImmediately provided in that case.\n\nTHESEUS\tWhat say you, Hermia? be advised fair maid:\n\tTo you your father should be as a god;\n\tOne that composed your beauties, yea, and one\n\tTo whom you are but as a form in wax\n\tBy him imprinted and within his power\n\tTo leave the figure or disfigure it.\n\tDemetrius is a worthy gentleman.\n\nHERMIA\tSo is Lysander.\n\nTHESEUS\t                  In himself he is;\n\tBut in this kind, wanting your father's voice,\n\tThe other must be held the worthier.\n\nHERMIA\tI would my father look'd but with my eyes.\n\nTHESEUS\tRather your eyes must with his judgment look.\n\nHERMIA\tI do entreat your grace to pardon me.\n\tI know not by what power I am made bold,\n\tNor how it may concern my modesty,\n\tIn such a presence here to plead my thoughts;\n\tBut I beseech your grace that I may know\n\tThe worst that may befall me in this case,\n\tIf I refuse to wed Demetrius.\n\nTHESEUS\tEither to die the death or to abjure\n\tFor ever the society of men.\n\tTherefore, fair Hermia, question your desires;\n\tKnow of your youth, examine well your blood,\n\tWhether, if you yield not to your father's choice,\n\tYou can endure the livery of a nun,\n\tFor aye to be in shady cloister mew'd,\n\tTo live a barren sister all your life,\n\tChanting faint hymns to the cold fruitless moon.\n\tThrice-blessed they that master so their blood,\n\tTo undergo such maiden pilgrimage;\n\tBut earthlier happy is the rose distill'd,\n\tThan that which withering on the virgin thorn\n\tGrows, lives and dies in single blessedness.\n\nHERMIA\tSo will I grow, so live, so die, my lord,\n\tEre I will my virgin patent up\n\tUnto his lordship, whose unwished yoke\n\tMy soul consents not to give sovereignty.\n\nTHESEUS\tTake time to pause; and, by the nest new moon--\n\tThe sealing-day betwixt my love and me,\n\tFor everlasting bond of fellowship--\n\tUpon that day either prepare to die\n\tFor disobedience to your father's will,\n\tOr else to wed Demetrius, as he would;\n\tOr on Diana's altar to protest\n\tFor aye austerity and single life.\n\nDEMETRIUS\tRelent, sweet Hermia: and, Lysander, yield\n\tThy crazed title to my certain right.\n\nLYSANDER\tYou have her father's love, Demetrius;\n\tLet me have Hermia's: do you marry him.\n\nEGEUS\tScornful Lysander! true, he hath my love,\n\tAnd what is mine my love shall render him.\n\tAnd she is mine, and all my right of her\n\tI do estate unto Demetrius.\n\nLYSANDER\tI am, my lord, as well derived as he,\n\tAs well possess'd; my love is more than his;\n\tMy fortunes every way as fairly rank'd,\n\tIf not with vantage, as Demetrius';\n\tAnd, which is more than all these boasts can be,\n\tI am beloved of beauteous Hermia:\n\tWhy should not I then prosecute my right?\n\tDemetrius, I'll avouch it to his head,\n\tMade love to Nedar's daughter, Helena,\n\tAnd won her soul; and she, sweet lady, dotes,\n\tDevoutly dotes, dotes in idolatry,\n\tUpon this spotted and inconstant man.\n\nTHESEUS\tI must confess that I have heard so much,\n\tAnd with Demetrius thought to have spoke thereof;\n\tBut, being over-full of self-affairs,\n\tMy mind did lose it. But, Demetrius, come;\n\tAnd come, Egeus; you shall go with me,\n\tI have some private schooling for you both.\n\tFor you, fair Hermia, look you arm yourself\n\tTo fit your fancies to your father's will;\n\tOr else the law of Athens yields you up--\n\tWhich by no means we may extenuate--\n\tTo death, or to a vow of single life.\n\tCome, my Hippolyta: what cheer, my love?\n\tDemetrius and Egeus, go along:\n\tI must employ you in some business\n\tAgainst our nuptial and confer with you\n\tOf something nearly that concerns yourselves.\n\nEGEUS\tWith duty and desire we follow you.\n\n\t[Exeunt all but LYSANDER and HERMIA]\n\nLYSANDER\tHow now, my love! why is your cheek so pale?\n\tHow chance the roses there do fade so fast?\n\nHERMIA\tBelike for want of rain, which I could well\n\tBeteem them from the tempest of my eyes.\n\nLYSANDER\tAy me! for aught that I could ever read,\n\tCould ever hear by tale or history,\n\tThe course of true love never did run smooth;\n\tBut, either it was different in blood,--\n\nHERMIA\tO cross! too high to be enthrall'd to low.\n\nLYSANDER\tOr else misgraffed in respect of years,--\n\nHERMIA\tO spite! too old to be engaged to young.\n\nLYSANDER\tOr else it stood upon the choice of friends,--\n\nHERMIA\tO hell! to choose love by another's eyes.\n\nLYSANDER\tOr, if there were a sympathy in choice,\n\tWar, death, or sickness did lay siege to it,\n\tMaking it momentany as a sound,\n\tSwift as a shadow, short as any dream;\n\tBrief as the lightning in the collied night,\n\tThat, in a spleen, unfolds both heaven and earth,\n\tAnd ere a man hath power to say 'Behold!'\n\tThe jaws of darkness do devour it up:\n\tSo quick bright things come to confusion.\n\nHERMIA\tIf then true lovers have been ever cross'd,\n\tIt stands as an edict in destiny:\n\tThen let us teach our trial patience,\n\tBecause it is a customary cross,\n\tAs due to love as thoughts and dreams and sighs,\n\tWishes and tears, poor fancy's followers.\n\nLYSANDER\tA good persuasion: therefore, hear me, Hermia.\n\tI have a widow aunt, a dowager\n\tOf great revenue, and she hath no child:\n\tFrom Athens is her house remote seven leagues;\n\tAnd she respects me as her only son.\n\tThere, gentle Hermia, may I marry thee;\n\tAnd to that place the sharp Athenian law\n\tCannot pursue us. If thou lovest me then,\n\tSteal forth thy father's house to-morrow night;\n\tAnd in the wood, a league without the town,\n\tWhere I did meet thee once with Helena,\n\tTo do observance to a morn of May,\n\tThere will I stay for thee.\n\nHERMIA\tMy good Lysander!\n\tI swear to thee, by Cupid's strongest bow,\n\tBy his best arrow with the golden head,\n\tBy the simplicity of Venus' doves,\n\tBy that which knitteth souls and prospers loves,\n\tAnd by that fire which burn'd the Carthage queen,\n\tWhen the false Troyan under sail was seen,\n\tBy all the vows that ever men have broke,\n\tIn number more than ever women spoke,\n\tIn that same place thou hast appointed me,\n\tTo-morrow truly will I meet with thee.\n\nLYSANDER\tKeep promise, love. Look, here comes Helena.\n\n\t[Enter HELENA]\n\nHERMIA\tGod speed fair Helena! whither away?\n\nHELENA\tCall you me fair? that fair again unsay.\n\tDemetrius loves your fair: O happy fair!\n\tYour eyes are lode-stars; and your tongue's sweet air\n\tMore tuneable than lark to shepherd's ear,\n\tWhen wheat is green, when hawthorn buds appear.\n\tSickness is catching: O, were favour so,\n\tYours would I catch, fair Hermia, ere I go;\n\tMy ear should catch your voice, my eye your eye,\n\tMy tongue should catch your tongue's sweet melody.\n\tWere the world mine, Demetrius being bated,\n\tThe rest I'd give to be to you translated.\n\tO, teach me how you look, and with what art\n\tYou sway the motion of Demetrius' heart.\n\nHERMIA\tI frown upon him, yet he loves me still.\n\nHELENA\tO that your frowns would teach my smiles such skill!\n\nHERMIA\tI give him curses, yet he gives me love.\n\nHELENA\tO that my prayers could such affection move!\n\nHERMIA\tThe more I hate, the more he follows me.\n\nHELENA\tThe more I love, the more he hateth me.\n\nHERMIA\tHis folly, Helena, is no fault of mine.\n\nHELENA\tNone, but your beauty: would that fault were mine!\n\nHERMIA\tTake comfort: he no more shall see my face;\n\tLysander and myself will fly this place.\n\tBefore the time I did Lysander see,\n\tSeem'd Athens as a paradise to me:\n\tO, then, what graces in my love do dwell,\n\tThat he hath turn'd a heaven unto a hell!\n\nLYSANDER\tHelen, to you our minds we will unfold:\n\tTo-morrow night, when Phoebe doth behold\n\tHer silver visage in the watery glass,\n\tDecking with liquid pearl the bladed grass,\n\tA time that lovers' flights doth still conceal,\n\tThrough Athens' gates have we devised to steal.\n\nHERMIA\tAnd in the wood, where often you and I\n\tUpon faint primrose-beds were wont to lie,\n\tEmptying our bosoms of their counsel sweet,\n\tThere my Lysander and myself shall meet;\n\tAnd thence from Athens turn away our eyes,\n\tTo seek new friends and stranger companies.\n\tFarewell, sweet playfellow: pray thou for us;\n\tAnd good luck grant thee thy Demetrius!\n\tKeep word, Lysander: we must starve our sight\n\tFrom lovers' food till morrow deep midnight.\n\nLYSANDER\tI will, my Hermia.\n\n\t[Exit HERMIA]\n\n\tHelena, adieu:\n\tAs you on him, Demetrius dote on you!\n\n\t[Exit]\n\nHELENA\tHow happy some o'er other some can be!\n\tThrough Athens I am thought as fair as she.\n\tBut what of that? Demetrius thinks not so;\n\tHe will not know what all but he do know:\n\tAnd as he errs, doting on Hermia's eyes,\n\tSo I, admiring of his qualities:\n\tThings base and vile, folding no quantity,\n\tLove can transpose to form and dignity:\n\tLove looks not with the eyes, but with the mind;\n\tAnd therefore is wing'd Cupid painted blind:\n\tNor hath Love's mind of any judgement taste;\n\tWings and no eyes figure unheedy haste:\n\tAnd therefore is Love said to be a child,\n\tBecause in choice he is so oft beguiled.\n\tAs waggish boys in game themselves forswear,\n\tSo the boy Love is perjured every where:\n\tFor ere Demetrius look'd on Hermia's eyne,\n\tHe hail'd down oaths that he was only mine;\n\tAnd when this hail some heat from Hermia felt,\n\tSo he dissolved, and showers of oaths did melt.\n\tI will go tell him of fair Hermia's flight:\n\tThen to the wood will he to-morrow night\n\tPursue her; and for this intelligence\n\tIf I have thanks, it is a dear expense:\n\tBut herein mean I to enrich my pain,\n\tTo have his sight thither and back again.\n\n\t[Exit]\n\n\n\n\n\tA MIDSUMMER NIGHT'S DREAM\n\n\nACT I\n\n\n\nSCENE II\tAthens. QUINCE'S house.\n\n\n\t[Enter QUINCE, SNUG, BOTTOM, FLUTE, SNOUT, and\n\tSTARVELING]\n\nQUINCE\tIs all our company here?\n\nBOTTOM\tYou were best to call them generally, man by man,\n\taccording to the scrip.\n\nQUINCE\tHere is the scroll of every man's name, which is\n\tthought fit, through all Athens, to play in our\n\tinterlude before the duke and the duchess, on his\n\twedding-day at night.\n\nBOTTOM\tFirst, good Peter Quince, say what the play treats\n\ton, then read the names of the actors, and so grow\n\tto a point.\n\nQUINCE\tMarry, our play is, The most lamentable comedy, and\n\tmost cruel death of Pyramus and Thisby.\n\nBOTTOM\tA very good piece of work, I assure you, and a\n\tmerry. Now, good Peter Quince, call forth your\n\tactors by the scroll. Masters, spread yourselves.\n\nQUINCE\tAnswer as I call you. Nick Bottom, the weaver.\n\nBOTTOM\tReady. Name what part I am for, and proceed.\n\nQUINCE\tYou, Nick Bottom, are set down for Pyramus.\n\nBOTTOM\tWhat is Pyramus? a lover, or a tyrant?\n\nQUINCE\tA lover, that kills himself most gallant for love.\n\nBOTTOM\tThat will ask some tears in the true performing of\n\tit: if I do it, let the audience look to their\n\teyes; I will move storms, I will condole in some\n\tmeasure. To the rest: yet my chief humour is for a\n\ttyrant: I could play Ercles rarely, or a part to\n\ttear a cat in, to make all split.\n\tThe raging rocks\n\tAnd shivering shocks\n\tShall break the locks\n\tOf prison gates;\n\tAnd Phibbus' car\n\tShall shine from far\n\tAnd make and mar\n\tThe foolish Fates.\n\tThis was lofty! Now name the rest of the players.\n\tThis is Ercles' vein, a tyrant's vein; a lover is\n\tmore condoling.\n\nQUINCE\tFrancis Flute, the bellows-mender.\n\nFLUTE\tHere, Peter Quince.\n\nQUINCE\tFlute, you must take Thisby on you.\n\nFLUTE\tWhat is Thisby? a wandering knight?\n\nQUINCE\tIt is the lady that Pyramus must love.\n\nFLUTE\tNay, faith, let me not play a woman; I have a beard coming.\n\nQUINCE\tThat's all one: you shall play it in a mask, and\n\tyou may speak as small as you will.\n\nBOTTOM\tAn I may hide my face, let me play Thisby too, I'll\n\tspeak in a monstrous little voice. 'Thisne,\n\tThisne;' 'Ah, Pyramus, lover dear! thy Thisby dear,\n\tand lady dear!'\n\nQUINCE\tNo, no; you must play Pyramus: and, Flute, you Thisby.\n\nBOTTOM\tWell, proceed.\n\nQUINCE\tRobin Starveling, the tailor.\n\nSTARVELING\tHere, Peter Quince.\n\nQUINCE\tRobin Starveling, you must play Thisby's mother.\n\tTom Snout, the tinker.\n\nSNOUT\tHere, Peter Quince.\n\nQUINCE\tYou, Pyramus' father: myself, Thisby's father:\n\tSnug, the joiner; you, the lion's part: and, I\n\thope, here is a play fitted.\n\nSNUG\tHave you the lion's part written? pray you, if it\n\tbe, give it me, for I am slow of study.\n\nQUINCE\tYou may do it extempore, for it is nothing but roaring.\n\nBOTTOM\tLet me play the lion too: I will roar, that I will\n\tdo any man's heart good to hear me; I will roar,\n\tthat I will make the duke say 'Let him roar again,\n\tlet him roar again.'\n\nQUINCE\tAn you should do it too terribly, you would fright\n\tthe duchess and the ladies, that they would shriek;\n\tand that were enough to hang us all.\n\nALL\tThat would hang us, every mother's son.\n\nBOTTOM\tI grant you, friends, if that you should fright the\n\tladies out of their wits, they would have no more\n\tdiscretion but to hang us: but I will aggravate my\n\tvoice so that I will roar you as gently as any\n\tsucking dove; I will roar you an 'twere any\n\tnightingale.\n\nQUINCE\tYou can play no part but Pyramus; for Pyramus is a\n\tsweet-faced man; a proper man, as one shall see in a\n\tsummer's day; a most lovely gentleman-like man:\n\ttherefore you must needs play Pyramus.\n\nBOTTOM\tWell, I will undertake it. What beard were I best\n\tto play it in?\n\nQUINCE\tWhy, what you will.\n\nBOTTOM\tI will discharge it in either your straw-colour\n\tbeard, your orange-tawny beard, your purple-in-grain\n\tbeard, or your French-crown-colour beard, your\n\tperfect yellow.\n\nQUINCE\tSome of your French crowns have no hair at all, and\n\tthen you will play bare-faced. But, masters, here\n\tare your parts: and I am to entreat you, request\n\tyou and desire you, to con them by to-morrow night;\n\tand meet me in the palace wood, a mile without the\n\ttown, by moonlight; there will we rehearse, for if\n\twe meet in the city, we shall be dogged with\n\tcompany, and our devices known. In the meantime I\n\twill draw a bill of properties, such as our play\n\twants. I pray you, fail me not.\n\nBOTTOM\tWe will meet; and there we may rehearse most\n\tobscenely and courageously. Take pains; be perfect: adieu.\n\nQUINCE\tAt the duke's oak we meet.\n\nBOTTOM\tEnough; hold or cut bow-strings.\n\n\t[Exeunt]\n\n\n\n\n\tA MIDSUMMER NIGHT'S DREAM\n\n\nACT II\n\n\n\nSCENE I\tA wood near Athens.\n\n\n\t[Enter, from opposite sides, a Fairy, and PUCK]\n\nPUCK\tHow now, spirit! whither wander you?\n\nFairy\t     Over hill, over dale,\n\tThorough bush, thorough brier,\n\tOver park, over pale,\n\tThorough flood, thorough fire,\n\tI do wander everywhere,\n\tSwifter than the moon's sphere;\n\tAnd I serve the fairy queen,\n\tTo dew her orbs upon the green.\n\tThe cowslips tall her pensioners be:\n\tIn their gold coats spots you see;\n\tThose be rubies, fairy favours,\n\tIn those freckles live their savours:\n\tI must go seek some dewdrops here\n\tAnd hang a pearl in every cowslip's ear.\n\tFarewell, thou lob of spirits; I'll be gone:\n\tOur queen and all our elves come here anon.\n\nPUCK\tThe king doth keep his revels here to-night:\n\tTake heed the queen come not within his sight;\n\tFor Oberon is passing fell and wrath,\n\tBecause that she as her attendant hath\n\tA lovely boy, stolen from an Indian king;\n\tShe never had so sweet a changeling;\n\tAnd jealous Oberon would have the child\n\tKnight of his train, to trace the forests wild;\n\tBut she perforce withholds the loved boy,\n\tCrowns him with flowers and makes him all her joy:\n\tAnd now they never meet in grove or green,\n\tBy fountain clear, or spangled starlight sheen,\n\tBut, they do square, that all their elves for fear\n\tCreep into acorn-cups and hide them there.\n\nFairy\tEither I mistake your shape and making quite,\n\tOr else you are that shrewd and knavish sprite\n\tCall'd Robin Goodfellow: are not you he\n\tThat frights the maidens of the villagery;\n\tSkim milk, and sometimes labour in the quern\n\tAnd bootless make the breathless housewife churn;\n\tAnd sometime make the drink to bear no barm;\n\tMislead night-wanderers, laughing at their harm?\n\tThose that Hobgoblin call you and sweet Puck,\n\tYou do their work, and they shall have good luck:\n\tAre not you he?\n\nPUCK\t                  Thou speak'st aright;\n\tI am that merry wanderer of the night.\n\tI jest to Oberon and make him smile\n\tWhen I a fat and bean-fed horse beguile,\n\tNeighing in likeness of a filly foal:\n\tAnd sometime lurk I in a gossip's bowl,\n\tIn very likeness of a roasted crab,\n\tAnd when she drinks, against her lips I bob\n\tAnd on her wither'd dewlap pour the ale.\n\tThe wisest aunt, telling the saddest tale,\n\tSometime for three-foot stool mistaketh me;\n\tThen slip I from her bum, down topples she,\n\tAnd 'tailor' cries, and falls into a cough;\n\tAnd then the whole quire hold their hips and laugh,\n\tAnd waxen in their mirth and neeze and swear\n\tA merrier hour was never wasted there.\n\tBut, room, fairy! here comes Oberon.\n\nFairy\tAnd here my mistress. Would that he were gone!\n\n\t[Enter, from one side, OBERON, with his train;\n\tfrom the other, TITANIA, with hers]\n\nOBERON\tIll met by moonlight, proud Titania.\n\nTITANIA\tWhat, jealous Oberon! Fairies, skip hence:\n\tI have forsworn his bed and company.\n\nOBERON\tTarry, rash wanton: am not I thy lord?\n\nTITANIA\tThen I must be thy lady: but I know\n\tWhen thou hast stolen away from fairy land,\n\tAnd in the shape of Corin sat all day,\n\tPlaying on pipes of corn and versing love\n\tTo amorous Phillida. Why art thou here,\n\tCome from the farthest Steppe of India?\n\tBut that, forsooth, the bouncing Amazon,\n\tYour buskin'd mistress and your warrior love,\n\tTo Theseus must be wedded, and you come\n\tTo give their bed joy and prosperity.\n\nOBERON\tHow canst thou thus for shame, Titania,\n\tGlance at my credit with Hippolyta,\n\tKnowing I know thy love to Theseus?\n\tDidst thou not lead him through the glimmering night\n\tFrom Perigenia, whom he ravished?\n\tAnd make him with fair AEgle break his faith,\n\tWith Ariadne and Antiopa?\n\nTITANIA\tThese are the forgeries of jealousy:\n\tAnd never, since the middle summer's spring,\n\tMet we on hill, in dale, forest or mead,\n\tBy paved fountain or by rushy brook,\n\tOr in the beached margent of the sea,\n\tTo dance our ringlets to the whistling wind,\n\tBut with thy brawls thou hast disturb'd our sport.\n\tTherefore the winds, piping to us in vain,\n\tAs in revenge, have suck'd up from the sea\n\tContagious fogs; which falling in the land\n\tHave every pelting river made so proud\n\tThat they have overborne their continents:\n\tThe ox hath therefore stretch'd his yoke in vain,\n\tThe ploughman lost his sweat, and the green corn\n\tHath rotted ere his youth attain'd a beard;\n\tThe fold stands empty in the drowned field,\n\tAnd crows are fatted with the murrion flock;\n\tThe nine men's morris is fill'd up with mud,\n\tAnd the quaint mazes in the wanton green\n\tFor lack of tread are undistinguishable:\n\tThe human mortals want their winter here;\n\tNo night is now with hymn or carol blest:\n\tTherefore the moon, the governess of floods,\n\tPale in her anger, washes all the air,\n\tThat rheumatic diseases do abound:\n\tAnd thorough this distemperature we see\n\tThe seasons alter: hoary-headed frosts\n\tFar in the fresh lap of the crimson rose,\n\tAnd on old Hiems' thin and icy crown\n\tAn odorous chaplet of sweet summer buds\n\tIs, as in mockery, set: the spring, the summer,\n\tThe childing autumn, angry winter, change\n\tTheir wonted liveries, and the mazed world,\n\tBy their increase, now knows not which is which:\n\tAnd this same progeny of evils comes\n\tFrom our debate, from our dissension;\n\tWe are their parents and original.\n\nOBERON\tDo you amend it then; it lies in you:\n\tWhy should Titania cross her Oberon?\n\tI do but beg a little changeling boy,\n\tTo be my henchman.\n\nTITANIA\t                  Set your heart at rest:\n\tThe fairy land buys not the child of me.\n\tHis mother was a votaress of my order:\n\tAnd, in the spiced Indian air, by night,\n\tFull often hath she gossip'd by my side,\n\tAnd sat with me on Neptune's yellow sands,\n\tMarking the embarked traders on the flood,\n\tWhen we have laugh'd to see the sails conceive\n\tAnd grow big-bellied with the wanton wind;\n\tWhich she, with pretty and with swimming gait\n\tFollowing,--her womb then rich with my young squire,--\n\tWould imitate, and sail upon the land,\n\tTo fetch me trifles, and return again,\n\tAs from a voyage, rich with merchandise.\n\tBut she, being mortal, of that boy did die;\n\tAnd for her sake do I rear up her boy,\n\tAnd for her sake I will not part with him.\n\nOBERON\tHow long within this wood intend you stay?\n\nTITANIA\tPerchance till after Theseus' wedding-day.\n\tIf you will patiently dance in our round\n\tAnd see our moonlight revels, go with us;\n\tIf not, shun me, and I will spare your haunts.\n\nOBERON\tGive me that boy, and I will go with thee.\n\nTITANIA\tNot for thy fairy kingdom. Fairies, away!\n\tWe shall chide downright, if I longer stay.\n\n\t[Exit TITANIA with her train]\n\nOBERON\tWell, go thy way: thou shalt not from this grove\n\tTill I torment thee for this injury.\n\tMy gentle Puck, come hither. Thou rememberest\n\tSince once I sat upon a promontory,\n\tAnd heard a mermaid on a dolphin's back\n\tUttering such dulcet and harmonious breath\n\tThat the rude sea grew civil at her song\n\tAnd certain stars shot madly from their spheres,\n\tTo hear the sea-maid's music.\n\nPUCK\tI remember.\n\nOBERON\tThat very time I saw, but thou couldst not,\n\tFlying between the cold moon and the earth,\n\tCupid all arm'd: a certain aim he took\n\tAt a fair vestal throned by the west,\n\tAnd loosed his love-shaft smartly from his bow,\n\tAs it should pierce a hundred thousand hearts;\n\tBut I might see young Cupid's fiery shaft\n\tQuench'd in the chaste beams of the watery moon,\n\tAnd the imperial votaress passed on,\n\tIn maiden meditation, fancy-free.\n\tYet mark'd I where the bolt of Cupid fell:\n\tIt fell upon a little western flower,\n\tBefore milk-white, now purple with love's wound,\n\tAnd maidens call it love-in-idleness.\n\tFetch me that flower; the herb I shew'd thee once:\n\tThe juice of it on sleeping eye-lids laid\n\tWill make or man or woman madly dote\n\tUpon the next live creature that it sees.\n\tFetch me this herb; and be thou here again\n\tEre the leviathan can swim a league.\n\nPUCK\tI'll put a girdle round about the earth\n\tIn forty minutes.\n\n\t[Exit]\n\nOBERON\t                  Having once this juice,\n\tI'll watch Titania when she is asleep,\n\tAnd drop the liquor of it in her eyes.\n\tThe next thing then she waking looks upon,\n\tBe it on lion, bear, or wolf, or bull,\n\tOn meddling monkey, or on busy ape,\n\tShe shall pursue it with the soul of love:\n\tAnd ere I take this charm from off her sight,\n\tAs I can take it with another herb,\n\tI'll make her render up her page to me.\n\tBut who comes here? I am invisible;\n\tAnd I will overhear their conference.\n\n\t[Enter DEMETRIUS, HELENA, following him]\n\nDEMETRIUS\tI love thee not, therefore pursue me not.\n\tWhere is Lysander and fair Hermia?\n\tThe one I'll slay, the other slayeth me.\n\tThou told'st me they were stolen unto this wood;\n\tAnd here am I, and wode within this wood,\n\tBecause I cannot meet my Hermia.\n\tHence, get thee gone, and follow me no more.\n\nHELENA\tYou draw me, you hard-hearted adamant;\n\tBut yet you draw not iron, for my heart\n\tIs true as steel: leave you your power to draw,\n\tAnd I shall have no power to follow you.\n\nDEMETRIUS\tDo I entice you? do I speak you fair?\n\tOr, rather, do I not in plainest truth\n\tTell you, I do not, nor I cannot love you?\n\nHELENA\tAnd even for that do I love you the more.\n\tI am your spaniel; and, Demetrius,\n\tThe more you beat me, I will fawn on you:\n\tUse me but as your spaniel, spurn me, strike me,\n\tNeglect me, lose me; only give me leave,\n\tUnworthy as I am, to follow you.\n\tWhat worser place can I beg in your love,--\n\tAnd yet a place of high respect with me,--\n\tThan to be used as you use your dog?\n\nDEMETRIUS\tTempt not too much the hatred of my spirit;\n\tFor I am sick when I do look on thee.\n\nHELENA\tAnd I am sick when I look not on you.\n\nDEMETRIUS\tYou do impeach your modesty too much,\n\tTo leave the city and commit yourself\n\tInto the hands of one that loves you not;\n\tTo trust the opportunity of night\n\tAnd the ill counsel of a desert place\n\tWith the rich worth of your virginity.\n\nHELENA\tYour virtue is my privilege: for that\n\tIt is not night when I do see your face,\n\tTherefore I think I am not in the night;\n\tNor doth this wood lack worlds of company,\n\tFor you in my respect are all the world:\n\tThen how can it be said I am alone,\n\tWhen all the world is here to look on me?\n\nDEMETRIUS\tI'll run from thee and hide me in the brakes,\n\tAnd leave thee to the mercy of wild beasts.\n\nHELENA\tThe wildest hath not such a heart as you.\n\tRun when you will, the story shall be changed:\n\tApollo flies, and Daphne holds the chase;\n\tThe dove pursues the griffin; the mild hind\n\tMakes speed to catch the tiger; bootless speed,\n\tWhen cowardice pursues and valour flies.\n\nDEMETRIUS\tI will not stay thy questions; let me go:\n\tOr, if thou follow me, do not believe\n\tBut I shall do thee mischief in the wood.\n\nHELENA\tAy, in the temple, in the town, the field,\n\tYou do me mischief. Fie, Demetrius!\n\tYour wrongs do set a scandal on my sex:\n\tWe cannot fight for love, as men may do;\n\tWe should be wood and were not made to woo.\n\n\t[Exit DEMETRIUS]\n\n\tI'll follow thee and make a heaven of hell,\n\tTo die upon the hand I love so well.\n\n\t[Exit]\n\nOBERON\tFare thee well, nymph: ere he do leave this grove,\n\tThou shalt fly him and he shall seek thy love.\n\n\t[Re-enter PUCK]\n\n\tHast thou the flower there? Welcome, wanderer.\n\nPUCK\tAy, there it is.\n\nOBERON\tI pray thee, give it me.\n\tI know a bank where the wild thyme blows,\n\tWhere oxlips and the nodding violet grows,\n\tQuite over-canopied with luscious woodbine,\n\tWith sweet musk-roses and with eglantine:\n\tThere sleeps Titania sometime of the night,\n\tLull'd in these flowers with dances and delight;\n\tAnd there the snake throws her enamell'd skin,\n\tWeed wide enough to wrap a fairy in:\n\tAnd with the juice of this I'll streak her eyes,\n\tAnd make her full of hateful fantasies.\n\tTake thou some of it, and seek through this grove:\n\tA sweet Athenian lady is in love\n\tWith a disdainful youth: anoint his eyes;\n\tBut do it when the next thing he espies\n\tMay be the lady: thou shalt know the man\n\tBy the Athenian garments he hath on.\n\tEffect it with some care, that he may prove\n\tMore fond on her than she upon her love:\n\tAnd look thou meet me ere the first cock crow.\n\nPUCK\tFear not, my lord, your servant shall do so.\n\n\t[Exeunt]\n\n\n\n\n\tA MIDSUMMER NIGHT'S DREAM\n\n\nACT II\n\n\n\nSCENE II\tAnother part of the wood.\n\n\n\t[Enter TITANIA, with her train]\n\nTITANIA\tCome, now a roundel and a fairy song;\n\tThen, for the third part of a minute, hence;\n\tSome to kill cankers in the musk-rose buds,\n\tSome war with rere-mice for their leathern wings,\n\tTo make my small elves coats, and some keep back\n\tThe clamorous owl that nightly hoots and wonders\n\tAt our quaint spirits. Sing me now asleep;\n\tThen to your offices and let me rest.\n\n\t[The Fairies sing]\n\n\tYou spotted snakes with double tongue,\n\tThorny hedgehogs, be not seen;\n\tNewts and blind-worms, do no wrong,\n\tCome not near our fairy queen.\n\tPhilomel, with melody\n\tSing in our sweet lullaby;\n\tLulla, lulla, lullaby, lulla, lulla, lullaby:\n\tNever harm,\n\tNor spell nor charm,\n\tCome our lovely lady nigh;\n\tSo, good night, with lullaby.\n\tWeaving spiders, come not here;\n\tHence, you long-legg'd spinners, hence!\n\tBeetles black, approach not near;\n\tWorm nor snail, do no offence.\n\tPhilomel, with melody, &c.\n\nFairy\tHence, away! now all is well:\n\tOne aloof stand sentinel.\n\n\t[Exeunt Fairies. TITANIA sleeps]\n\n\t[Enter OBERON and squeezes the flower on TITANIA's eyelids]\n\nOBERON\tWhat thou seest when thou dost wake,\n\tDo it for thy true-love take,\n\tLove and languish for his sake:\n\tBe it ounce, or cat, or bear,\n\tPard, or boar with bristled hair,\n\tIn thy eye that shall appear\n\tWhen thou wakest, it is thy dear:\n\tWake when some vile thing is near.\n\n\t[Exit]\n\n\t[Enter LYSANDER and HERMIA]\n\nLYSANDER\tFair love, you faint with wandering in the wood;\n\tAnd to speak troth, I have forgot our way:\n\tWe'll rest us, Hermia, if you think it good,\n\tAnd tarry for the comfort of the day.\n\nHERMIA\tBe it so, Lysander: find you out a bed;\n\tFor I upon this bank will rest my head.\n\nLYSANDER\tOne turf shall serve as pillow for us both;\n\tOne heart, one bed, two bosoms and one troth.\n\nHERMIA\tNay, good Lysander; for my sake, my dear,\n\tLie further off yet, do not lie so near.\n\nLYSANDER\tO, take the sense, sweet, of my innocence!\n\tLove takes the meaning in love's conference.\n\tI mean, that my heart unto yours is knit\n\tSo that but one heart we can make of it;\n\tTwo bosoms interchained with an oath;\n\tSo then two bosoms and a single troth.\n\tThen by your side no bed-room me deny;\n\tFor lying so, Hermia, I do not lie.\n\nHERMIA\tLysander riddles very prettily:\n\tNow much beshrew my manners and my pride,\n\tIf Hermia meant to say Lysander lied.\n\tBut, gentle friend, for love and courtesy\n\tLie further off; in human modesty,\n\tSuch separation as may well be said\n\tBecomes a virtuous bachelor and a maid,\n\tSo far be distant; and, good night, sweet friend:\n\tThy love ne'er alter till thy sweet life end!\n\nLYSANDER\tAmen, amen, to that fair prayer, say I;\n\tAnd then end life when I end loyalty!\n\tHere is my bed: sleep give thee all his rest!\n\nHERMIA\tWith half that wish the wisher's eyes be press'd!\n\n\t[They sleep]\n\n\t[Enter PUCK]\n\nPUCK\tThrough the forest have I gone.\n\tBut Athenian found I none,\n\tOn whose eyes I might approve\n\tThis flower's force in stirring love.\n\tNight and silence.--Who is here?\n\tWeeds of Athens he doth wear:\n\tThis is he, my master said,\n\tDespised the Athenian maid;\n\tAnd here the maiden, sleeping sound,\n\tOn the dank and dirty ground.\n\tPretty soul! she durst not lie\n\tNear this lack-love, this kill-courtesy.\n\tChurl, upon thy eyes I throw\n\tAll the power this charm doth owe.\n\tWhen thou wakest, let love forbid\n\tSleep his seat on thy eyelid:\n\tSo awake when I am gone;\n\tFor I must now to Oberon.\n\n\t[Exit]\n\n\t[Enter DEMETRIUS and HELENA, running]\n\nHELENA\tStay, though thou kill me, sweet Demetrius.\n\nDEMETRIUS\tI charge thee, hence, and do not haunt me thus.\n\nHELENA\tO, wilt thou darkling leave me? do not so.\n\nDEMETRIUS\tStay, on thy peril: I alone will go.\n\n\t[Exit]\n\nHELENA\tO, I am out of breath in this fond chase!\n\tThe more my prayer, the lesser is my grace.\n\tHappy is Hermia, wheresoe'er she lies;\n\tFor she hath blessed and attractive eyes.\n\tHow came her eyes so bright? Not with salt tears:\n\tIf so, my eyes are oftener wash'd than hers.\n\tNo, no, I am as ugly as a bear;\n\tFor beasts that meet me run away for fear:\n\tTherefore no marvel though Demetrius\n\tDo, as a monster fly my presence thus.\n\tWhat wicked and dissembling glass of mine\n\tMade me compare with Hermia's sphery eyne?\n\tBut who is here? Lysander! on the ground!\n\tDead? or asleep? I see no blood, no wound.\n\tLysander if you live, good sir, awake.\n\nLYSANDER\t[Awaking]  And run through fire I will for thy sweet sake.\n\tTransparent Helena! Nature shows art,\n\tThat through thy bosom makes me see thy heart.\n\tWhere is Demetrius? O, how fit a word\n\tIs that vile name to perish on my sword!\n\nHELENA\tDo not say so, Lysander; say not so\n\tWhat though he love your Hermia? Lord, what though?\n\tYet Hermia still loves you: then be content.\n\nLYSANDER\tContent with Hermia! No; I do repent\n\tThe tedious minutes I with her have spent.\n\tNot Hermia but Helena I love:\n\tWho will not change a raven for a dove?\n\tThe will of man is by his reason sway'd;\n\tAnd reason says you are the worthier maid.\n\tThings growing are not ripe until their season\n\tSo I, being young, till now ripe not to reason;\n\tAnd touching now the point of human skill,\n\tReason becomes the marshal to my will\n\tAnd leads me to your eyes, where I o'erlook\n\tLove's stories written in love's richest book.\n\nHELENA\tWherefore was I to this keen mockery born?\n\tWhen at your hands did I deserve this scorn?\n\tIs't not enough, is't not enough, young man,\n\tThat I did never, no, nor never can,\n\tDeserve a sweet look from Demetrius' eye,\n\tBut you must flout my insufficiency?\n\tGood troth, you do me wrong, good sooth, you do,\n\tIn such disdainful manner me to woo.\n\tBut fare you well: perforce I must confess\n\tI thought you lord of more true gentleness.\n\tO, that a lady, of one man refused.\n\tShould of another therefore be abused!\n\n\t[Exit]\n\nLYSANDER\tShe sees not Hermia. Hermia, sleep thou there:\n\tAnd never mayst thou come Lysander near!\n\tFor as a surfeit of the sweetest things\n\tThe deepest loathing to the stomach brings,\n\tOr as tie heresies that men do leave\n\tAre hated most of those they did deceive,\n\tSo thou, my surfeit and my heresy,\n\tOf all be hated, but the most of me!\n\tAnd, all my powers, address your love and might\n\tTo honour Helen and to be her knight!\n\n\t[Exit]\n\nHERMIA\t[Awaking]  Help me, Lysander, help me! do thy best\n\tTo pluck this crawling serpent from my breast!\n\tAy me, for pity! what a dream was here!\n\tLysander, look how I do quake with fear:\n\tMethought a serpent eat my heart away,\n\tAnd you sat smiling at his cruel pray.\n\tLysander! what, removed? Lysander! lord!\n\tWhat, out of hearing? gone? no sound, no word?\n\tAlack, where are you speak, an if you hear;\n\tSpeak, of all loves! I swoon almost with fear.\n\tNo? then I well perceive you all not nigh\n\tEither death or you I'll find immediately.\n\n\t[Exit]\n\n\n\n\n\tA MIDSUMMER NIGHT'S DREAM\n\n\nACT III\n\n\n\nSCENE I\tThe wood. TITANIA lying asleep.\n\n\n\t[Enter QUINCE, SNUG, BOTTOM, FLUTE, SNOUT, and\n\tSTARVELING]\n\nBOTTOM\tAre we all met?\n\nQUINCE\tPat, pat; and here's a marvellous convenient place\n\tfor our rehearsal. This green plot shall be our\n\tstage, this hawthorn-brake our tiring-house; and we\n\twill do it in action as we will do it before the duke.\n\nBOTTOM\tPeter Quince,--\n\nQUINCE\tWhat sayest thou, bully Bottom?\n\nBOTTOM\tThere are things in this comedy of Pyramus and\n\tThisby that will never please. First, Pyramus must\n\tdraw a sword to kill himself; which the ladies\n\tcannot abide. How answer you that?\n\nSNOUT\tBy'r lakin, a parlous fear.\n\nSTARVELING\tI believe we must leave the killing out, when all is done.\n\nBOTTOM\tNot a whit: I have a device to make all well.\n\tWrite me a prologue; and let the prologue seem to\n\tsay, we will do no harm with our swords, and that\n\tPyramus is not killed indeed; and, for the more\n\tbetter assurance, tell them that I, Pyramus, am not\n\tPyramus, but Bottom the weaver: this will put them\n\tout of fear.\n\nQUINCE\tWell, we will have such a prologue; and it shall be\n\twritten in eight and six.\n\nBOTTOM\tNo, make it two more; let it be written in eight and eight.\n\nSNOUT\tWill not the ladies be afeard of the lion?\n\nSTARVELING\tI fear it, I promise you.\n\nBOTTOM\tMasters, you ought to consider with yourselves: to\n\tbring in--God shield us!--a lion among ladies, is a\n\tmost dreadful thing; for there is not a more fearful\n\twild-fowl than your lion living; and we ought to\n\tlook to 't.\n\nSNOUT\tTherefore another prologue must tell he is not a lion.\n\nBOTTOM\tNay, you must name his name, and half his face must\n\tbe seen through the lion's neck: and he himself\n\tmust speak through, saying thus, or to the same\n\tdefect,--'Ladies,'--or 'Fair-ladies--I would wish\n\tYou,'--or 'I would request you,'--or 'I would\n\tentreat you,--not to fear, not to tremble: my life\n\tfor yours. If you think I come hither as a lion, it\n\twere pity of my life: no I am no such thing; I am a\n\tman as other men are;' and there indeed let him name\n\this name, and tell them plainly he is Snug the joiner.\n\nQUINCE\tWell it shall be so. But there is two hard things;\n\tthat is, to bring the moonlight into a chamber; for,\n\tyou know, Pyramus and Thisby meet by moonlight.\n\nSNOUT\tDoth the moon shine that night we play our play?\n\nBOTTOM\tA calendar, a calendar! look in the almanac; find\n\tout moonshine, find out moonshine.\n\nQUINCE\tYes, it doth shine that night.\n\nBOTTOM\tWhy, then may you leave a casement of the great\n\tchamber window, where we play, open, and the moon\n\tmay shine in at the casement.\n\nQUINCE\tAy; or else one must come in with a bush of thorns\n\tand a lanthorn, and say he comes to disfigure, or to\n\tpresent, the person of Moonshine. Then, there is\n\tanother thing: we must have a wall in the great\n\tchamber; for Pyramus and Thisby says the story, did\n\ttalk through the chink of a wall.\n\nSNOUT\tYou can never bring in a wall. What say you, Bottom?\n\nBOTTOM\tSome man or other must present Wall: and let him\n\thave some plaster, or some loam, or some rough-cast\n\tabout him, to signify wall; and let him hold his\n\tfingers thus, and through that cranny shall Pyramus\n\tand Thisby whisper.\n\nQUINCE\tIf that may be, then all is well. Come, sit down,\n\tevery mother's son, and rehearse your parts.\n\tPyramus, you begin: when you have spoken your\n\tspeech, enter into that brake: and so every one\n\taccording to his cue.\n\n\t[Enter PUCK behind]\n\nPUCK\tWhat hempen home-spuns have we swaggering here,\n\tSo near the cradle of the fairy queen?\n\tWhat, a play toward! I'll be an auditor;\n\tAn actor too, perhaps, if I see cause.\n\nQUINCE\tSpeak, Pyramus. Thisby, stand forth.\n\nBOTTOM\tThisby, the flowers of odious savours sweet,--\n\nQUINCE\tOdours, odours.\n\nBOTTOM\t--odours savours sweet:\n\tSo hath thy breath, my dearest Thisby dear.\n\tBut hark, a voice! stay thou but here awhile,\n\tAnd by and by I will to thee appear.\n\n\t[Exit]\n\nPUCK\tA stranger Pyramus than e'er played here.\n\n\t[Exit]\n\nFLUTE\tMust I speak now?\n\nQUINCE\tAy, marry, must you; for you must understand he goes\n\tbut to see a noise that he heard, and is to come again.\n\nFLUTE\tMost radiant Pyramus, most lily-white of hue,\n\tOf colour like the red rose on triumphant brier,\n\tMost brisky juvenal and eke most lovely Jew,\n\tAs true as truest horse that yet would never tire,\n\tI'll meet thee, Pyramus, at Ninny's tomb.\n\nQUINCE\t'Ninus' tomb,' man: why, you must not speak that\n\tyet; that you answer to Pyramus: you speak all your\n\tpart at once, cues and all Pyramus enter: your cue\n\tis past; it is, 'never tire.'\n\nFLUTE\tO,--As true as truest horse, that yet would\n\tnever tire.\n\n\t[Re-enter PUCK, and BOTTOM with an ass's head]\n\nBOTTOM\tIf I were fair, Thisby, I were only thine.\n\nQUINCE\tO monstrous! O strange! we are haunted. Pray,\n\tmasters! fly, masters! Help!\n\n\t[Exeunt QUINCE, SNUG, FLUTE, SNOUT, and STARVELING]\n\nPUCK\tI'll follow you, I'll lead you about a round,\n\tThrough bog, through bush, through brake, through brier:\n\tSometime a horse I'll be, sometime a hound,\n\tA hog, a headless bear, sometime a fire;\n\tAnd neigh, and bark, and grunt, and roar, and burn,\n\tLike horse, hound, hog, bear, fire, at every turn.\n\n\t[Exit]\n\nBOTTOM\tWhy do they run away? this is a knavery of them to\n\tmake me afeard.\n\n\t[Re-enter SNOUT]\n\nSNOUT\tO Bottom, thou art changed! what do I see on thee?\n\nBOTTOM\tWhat do you see? you see an asshead of your own, do\n\tyou?\n\n\t[Exit SNOUT]\n\n\t[Re-enter QUINCE]\n\nQUINCE\tBless thee, Bottom! bless thee! thou art\n\ttranslated.\n\n\t[Exit]\n\nBOTTOM\tI see their knavery: this is to make an ass of me;\n\tto fright me, if they could. But I will not stir\n\tfrom this place, do what they can: I will walk up\n\tand down here, and I will sing, that they shall hear\n\tI am not afraid.\n\n\t[Sings]\n\n\tThe ousel cock so black of hue,\n\tWith orange-tawny bill,\n\tThe throstle with his note so true,\n\tThe wren with little quill,--\n\nTITANIA\t[Awaking]  What angel wakes me from my flowery bed?\n\nBOTTOM\t[Sings]\n\n\tThe finch, the sparrow and the lark,\n\tThe plain-song cuckoo gray,\n\tWhose note full many a man doth mark,\n\tAnd dares not answer nay;--\n\tfor, indeed, who would set his wit to so foolish\n\ta bird? who would give a bird the lie, though he cry\n\t'cuckoo' never so?\n\nTITANIA\tI pray thee, gentle mortal, sing again:\n\tMine ear is much enamour'd of thy note;\n\tSo is mine eye enthralled to thy shape;\n\tAnd thy fair virtue's force perforce doth move me\n\tOn the first view to say, to swear, I love thee.\n\nBOTTOM\tMethinks, mistress, you should have little reason\n\tfor that: and yet, to say the truth, reason and\n\tlove keep little company together now-a-days; the\n\tmore the pity that some honest neighbours will not\n\tmake them friends. Nay, I can gleek upon occasion.\n\nTITANIA\tThou art as wise as thou art beautiful.\n\nBOTTOM\tNot so, neither: but if I had wit enough to get out\n\tof this wood, I have enough to serve mine own turn.\n\nTITANIA\tOut of this wood do not desire to go:\n\tThou shalt remain here, whether thou wilt or no.\n\tI am a spirit of no common rate;\n\tThe summer still doth tend upon my state;\n\tAnd I do love thee: therefore, go with me;\n\tI'll give thee fairies to attend on thee,\n\tAnd they shall fetch thee jewels from the deep,\n\tAnd sing while thou on pressed flowers dost sleep;\n\tAnd I will purge thy mortal grossness so\n\tThat thou shalt like an airy spirit go.\n\tPeaseblossom! Cobweb! Moth! and Mustardseed!\n\n\t[Enter PEASEBLOSSOM, COBWEB, MOTH, and MUSTARDSEED]\n\nPEASEBLOSSOM\tReady.\n\nCOBWEB\t     And I.\n\nMOTH\t          And I.\n\nMUSTARDSEED\t                  And I.\n\nALL\tWhere shall we go?\n\nTITANIA\tBe kind and courteous to this gentleman;\n\tHop in his walks and gambol in his eyes;\n\tFeed him with apricocks and dewberries,\n\tWith purple grapes, green figs, and mulberries;\n\tThe honey-bags steal from the humble-bees,\n\tAnd for night-tapers crop their waxen thighs\n\tAnd light them at the fiery glow-worm's eyes,\n\tTo have my love to bed and to arise;\n\tAnd pluck the wings from Painted butterflies\n\tTo fan the moonbeams from his sleeping eyes:\n\tNod to him, elves, and do him courtesies.\n\nPEASEBLOSSOM\tHail, mortal!\n\nCOBWEB\tHail!\n\nMOTH\tHail!\n\nMUSTARDSEED\tHail!\n\nBOTTOM\tI cry your worship's mercy, heartily: I beseech your\n\tworship's name.\n\nCOBWEB\tCobweb.\n\nBOTTOM\tI shall desire you of more acquaintance, good Master\n\tCobweb: if I cut my finger, I shall make bold with\n\tyou. Your name, honest gentleman?\n\nPEASEBLOSSOM\tPeaseblossom.\n\nBOTTOM\tI pray you, commend me to Mistress Squash, your\n\tmother, and to Master Peascod, your father. Good\n\tMaster Peaseblossom, I shall desire you of more\n\tacquaintance too. Your name, I beseech you, sir?\n\nMUSTARDSEED\tMustardseed.\n\nBOTTOM\tGood Master Mustardseed, I know your patience well:\n\tthat same cowardly, giant-like ox-beef hath\n\tdevoured many a gentleman of your house: I promise\n\tyou your kindred had made my eyes water ere now. I\n\tdesire your more acquaintance, good Master\n\tMustardseed.\n\nTITANIA\tCome, wait upon him; lead him to my bower.\n\tThe moon methinks looks with a watery eye;\n\tAnd when she weeps, weeps every little flower,\n\tLamenting some enforced chastity.\n\tTie up my love's tongue bring him silently.\n\n\t[Exeunt]\n\n\n\n\n\tA MIDSUMMER NIGHT'S DREAM\n\n\nACT III\n\n\n\nSCENE II\tAnother part of the wood.\n\n\n\t[Enter OBERON]\n\nOBERON\tI wonder if Titania be awaked;\n\tThen, what it was that next came in her eye,\n\tWhich she must dote on in extremity.\n\n\t[Enter PUCK]\n\n\tHere comes my messenger.\n\t\t   How now, mad spirit!\n\tWhat night-rule now about this haunted grove?\n\nPUCK\tMy mistress with a monster is in love.\n\tNear to her close and consecrated bower,\n\tWhile she was in her dull and sleeping hour,\n\tA crew of patches, rude mechanicals,\n\tThat work for bread upon Athenian stalls,\n\tWere met together to rehearse a play\n\tIntended for great Theseus' nuptial-day.\n\tThe shallowest thick-skin of that barren sort,\n\tWho Pyramus presented, in their sport\n\tForsook his scene and enter'd in a brake\n\tWhen I did him at this advantage take,\n\tAn ass's nole I fixed on his head:\n\tAnon his Thisbe must be answered,\n\tAnd forth my mimic comes. When they him spy,\n\tAs wild geese that the creeping fowler eye,\n\tOr russet-pated choughs, many in sort,\n\tRising and cawing at the gun's report,\n\tSever themselves and madly sweep the sky,\n\tSo, at his sight, away his fellows fly;\n\tAnd, at our stamp, here o'er and o'er one falls;\n\tHe murder cries and help from Athens calls.\n\tTheir sense thus weak, lost with their fears\n\tthus strong,\n\tMade senseless things begin to do them wrong;\n\tFor briers and thorns at their apparel snatch;\n\tSome sleeves, some hats, from yielders all\n\tthings catch.\n\tI led them on in this distracted fear,\n\tAnd left sweet Pyramus translated there:\n\tWhen in that moment, so it came to pass,\n\tTitania waked and straightway loved an ass.\n\nOBERON\tThis falls out better than I could devise.\n\tBut hast thou yet latch'd the Athenian's eyes\n\tWith the love-juice, as I did bid thee do?\n\nPUCK\tI took him sleeping,--that is finish'd too,--\n\tAnd the Athenian woman by his side:\n\tThat, when he waked, of force she must be eyed.\n\n\t[Enter HERMIA and DEMETRIUS]\n\nOBERON\tStand close: this is the same Athenian.\n\nPUCK\tThis is the woman, but not this the man.\n\nDEMETRIUS\tO, why rebuke you him that loves you so?\n\tLay breath so bitter on your bitter foe.\n\nHERMIA\tNow I but chide; but I should use thee worse,\n\tFor thou, I fear, hast given me cause to curse,\n\tIf thou hast slain Lysander in his sleep,\n\tBeing o'er shoes in blood, plunge in the deep,\n\tAnd kill me too.\n\tThe sun was not so true unto the day\n\tAs he to me: would he have stolen away\n\tFrom sleeping Hermia? I'll believe as soon\n\tThis whole earth may be bored and that the moon\n\tMay through the centre creep and so displease\n\tHer brother's noontide with Antipodes.\n\tIt cannot be but thou hast murder'd him;\n\tSo should a murderer look, so dead, so grim.\n\nDEMETRIUS\tSo should the murder'd look, and so should I,\n\tPierced through the heart with your stern cruelty:\n\tYet you, the murderer, look as bright, as clear,\n\tAs yonder Venus in her glimmering sphere.\n\nHERMIA\tWhat's this to my Lysander? where is he?\n\tAh, good Demetrius, wilt thou give him me?\n\nDEMETRIUS\tI had rather give his carcass to my hounds.\n\nHERMIA\tOut, dog! out, cur! thou drivest me past the bounds\n\tOf maiden's patience. Hast thou slain him, then?\n\tHenceforth be never number'd among men!\n\tO, once tell true, tell true, even for my sake!\n\tDurst thou have look'd upon him being awake,\n\tAnd hast thou kill'd him sleeping? O brave touch!\n\tCould not a worm, an adder, do so much?\n\tAn adder did it; for with doubler tongue\n\tThan thine, thou serpent, never adder stung.\n\nDEMETRIUS\tYou spend your passion on a misprised mood:\n\tI am not guilty of Lysander's blood;\n\tNor is he dead, for aught that I can tell.\n\nHERMIA\tI pray thee, tell me then that he is well.\n\nDEMETRIUS\tAn if I could, what should I get therefore?\n\nHERMIA\tA privilege never to see me more.\n\tAnd from thy hated presence part I so:\n\tSee me no more, whether he be dead or no.\n\n\t[Exit]\n\nDEMETRIUS\tThere is no following her in this fierce vein:\n\tHere therefore for a while I will remain.\n\tSo sorrow's heaviness doth heavier grow\n\tFor debt that bankrupt sleep doth sorrow owe:\n\tWhich now in some slight measure it will pay,\n\tIf for his tender here I make some stay.\n\n\t[Lies down and sleeps]\n\nOBERON\tWhat hast thou done? thou hast mistaken quite\n\tAnd laid the love-juice on some true-love's sight:\n\tOf thy misprision must perforce ensue\n\tSome true love turn'd and not a false turn'd true.\n\nPUCK\tThen fate o'er-rules, that, one man holding troth,\n\tA million fail, confounding oath on oath.\n\nOBERON\tAbout the wood go swifter than the wind,\n\tAnd Helena of Athens look thou find:\n\tAll fancy-sick she is and pale of cheer,\n\tWith sighs of love, that costs the fresh blood dear:\n\tBy some illusion see thou bring her here:\n\tI'll charm his eyes against she do appear.\n\nPUCK\tI go, I go; look how I go,\n\tSwifter than arrow from the Tartar's bow.\n\n\t[Exit]\n\nOBERON\t   Flower of this purple dye,\n\tHit with Cupid's archery,\n\tSink in apple of his eye.\n\tWhen his love he doth espy,\n\tLet her shine as gloriously\n\tAs the Venus of the sky.\n\tWhen thou wakest, if she be by,\n\tBeg of her for remedy.\n\n\t[Re-enter PUCK]\n\nPUCK\t   Captain of our fairy band,\n\tHelena is here at hand;\n\tAnd the youth, mistook by me,\n\tPleading for a lover's fee.\n\tShall we their fond pageant see?\n\tLord, what fools these mortals be!\n\nOBERON\tStand aside: the noise they make\n\tWill cause Demetrius to awake.\n\nPUCK\tThen will two at once woo one;\n\tThat must needs be sport alone;\n\tAnd those things do best please me\n\tThat befal preposterously.\n\n\t[Enter LYSANDER and HELENA]\n\nLYSANDER\tWhy should you think that I should woo in scorn?\n\tScorn and derision never come in tears:\n\tLook, when I vow, I weep; and vows so born,\n\tIn their nativity all truth appears.\n\tHow can these things in me seem scorn to you,\n\tBearing the badge of faith, to prove them true?\n\nHELENA\tYou do advance your cunning more and more.\n\tWhen truth kills truth, O devilish-holy fray!\n\tThese vows are Hermia's: will you give her o'er?\n\tWeigh oath with oath, and you will nothing weigh:\n\tYour vows to her and me, put in two scales,\n\tWill even weigh, and both as light as tales.\n\nLYSANDER\tI had no judgment when to her I swore.\n\nHELENA\tNor none, in my mind, now you give her o'er.\n\nLYSANDER\tDemetrius loves her, and he loves not you.\n\nDEMETRIUS\t[Awaking]  O Helena, goddess, nymph, perfect, divine!\n\tTo what, my love, shall I compare thine eyne?\n\tCrystal is muddy. O, how ripe in show\n\tThy lips, those kissing cherries, tempting grow!\n\tThat pure congealed white, high Taurus snow,\n\tFann'd with the eastern wind, turns to a crow\n\tWhen thou hold'st up thy hand: O, let me kiss\n\tThis princess of pure white, this seal of bliss!\n\nHELENA\tO spite! O hell! I see you all are bent\n\tTo set against me for your merriment:\n\tIf you we re civil and knew courtesy,\n\tYou would not do me thus much injury.\n\tCan you not hate me, as I know you do,\n\tBut you must join in souls to mock me too?\n\tIf you were men, as men you are in show,\n\tYou would not use a gentle lady so;\n\tTo vow, and swear, and superpraise my parts,\n\tWhen I am sure you hate me with your hearts.\n\tYou both are rivals, and love Hermia;\n\tAnd now both rivals, to mock Helena:\n\tA trim exploit, a manly enterprise,\n\tTo conjure tears up in a poor maid's eyes\n\tWith your derision! none of noble sort\n\tWould so offend a virgin, and extort\n\tA poor soul's patience, all to make you sport.\n\nLYSANDER\tYou are unkind, Demetrius; be not so;\n\tFor you love Hermia; this you know I know:\n\tAnd here, with all good will, with all my heart,\n\tIn Hermia's love I yield you up my part;\n\tAnd yours of Helena to me bequeath,\n\tWhom I do love and will do till my death.\n\nHELENA\tNever did mockers waste more idle breath.\n\nDEMETRIUS\tLysander, keep thy Hermia; I will none:\n\tIf e'er I loved her, all that love is gone.\n\tMy heart to her but as guest-wise sojourn'd,\n\tAnd now to Helen is it home return'd,\n\tThere to remain.\n\nLYSANDER\t                  Helen, it is not so.\n\nDEMETRIUS\tDisparage not the faith thou dost not know,\n\tLest, to thy peril, thou aby it dear.\n\tLook, where thy love comes; yonder is thy dear.\n\n\t[Re-enter HERMIA]\n\nHERMIA\tDark night, that from the eye his function takes,\n\tThe ear more quick of apprehension makes;\n\tWherein it doth impair the seeing sense,\n\tIt pays the hearing double recompense.\n\tThou art not by mine eye, Lysander, found;\n\tMine ear, I thank it, brought me to thy sound\n\tBut why unkindly didst thou leave me so?\n\nLYSANDER\tWhy should he stay, whom love doth press to go?\n\nHERMIA\tWhat love could press Lysander from my side?\n\nLYSANDER\tLysander's love, that would not let him bide,\n\tFair Helena, who more engilds the night\n\tThan all you fiery oes and eyes of light.\n\tWhy seek'st thou me? could not this make thee know,\n\tThe hate I bear thee made me leave thee so?\n\nHERMIA\tYou speak not as you think: it cannot be.\n\nHELENA\tLo, she is one of this confederacy!\n\tNow I perceive they have conjoin'd all three\n\tTo fashion this false sport, in spite of me.\n\tInjurious Hermia! most ungrateful maid!\n\tHave you conspired, have you with these contrived\n\tTo bait me with this foul derision?\n\tIs all the counsel that we two have shared,\n\tThe sisters' vows, the hours that we have spent,\n\tWhen we have chid the hasty-footed time\n\tFor parting us,--O, is it all forgot?\n\tAll school-days' friendship, childhood innocence?\n\tWe, Hermia, like two artificial gods,\n\tHave with our needles created both one flower,\n\tBoth on one sampler, sitting on one cushion,\n\tBoth warbling of one song, both in one key,\n\tAs if our hands, our sides, voices and minds,\n\tHad been incorporate. So we grow together,\n\tLike to a double cherry, seeming parted,\n\tBut yet an union in partition;\n\tTwo lovely berries moulded on one stem;\n\tSo, with two seeming bodies, but one heart;\n\tTwo of the first, like coats in heraldry,\n\tDue but to one and crowned with one crest.\n\tAnd will you rent our ancient love asunder,\n\tTo join with men in scorning your poor friend?\n\tIt is not friendly, 'tis not maidenly:\n\tOur sex, as well as I, may chide you for it,\n\tThough I alone do feel the injury.\n\nHERMIA\tI am amazed at your passionate words.\n\tI scorn you not: it seems that you scorn me.\n\nHELENA\tHave you not set Lysander, as in scorn,\n\tTo follow me and praise my eyes and face?\n\tAnd made your other love, Demetrius,\n\tWho even but now did spurn me with his foot,\n\tTo call me goddess, nymph, divine and rare,\n\tPrecious, celestial? Wherefore speaks he this\n\tTo her he hates? and wherefore doth Lysander\n\tDeny your love, so rich within his soul,\n\tAnd tender me, forsooth, affection,\n\tBut by your setting on, by your consent?\n\tWhat thought I be not so in grace as you,\n\tSo hung upon with love, so fortunate,\n\tBut miserable most, to love unloved?\n\tThis you should pity rather than despise.\n\nHERNIA\tI understand not what you mean by this.\n\nHELENA\tAy, do, persever, counterfeit sad looks,\n\tMake mouths upon me when I turn my back;\n\tWink each at other; hold the sweet jest up:\n\tThis sport, well carried, shall be chronicled.\n\tIf you have any pity, grace, or manners,\n\tYou would not make me such an argument.\n\tBut fare ye well: 'tis partly my own fault;\n\tWhich death or absence soon shall remedy.\n\nLYSANDER\tStay, gentle Helena; hear my excuse:\n\tMy love, my life my soul, fair Helena!\n\nHELENA\tO excellent!\n\nHERMIA\t                  Sweet, do not scorn her so.\n\nDEMETRIUS\tIf she cannot entreat, I can compel.\n\nLYSANDER\tThou canst compel no more than she entreat:\n\tThy threats have no more strength than her weak prayers.\n\tHelen, I love thee; by my life, I do:\n\tI swear by that which I will lose for thee,\n\tTo prove him false that says I love thee not.\n\nDEMETRIUS\tI say I love thee more than he can do.\n\nLYSANDER\tIf thou say so, withdraw, and prove it too.\n\nDEMETRIUS\tQuick, come!\n\nHERMIA\tLysander, whereto tends all this?\n\nLYSANDER\tAway, you Ethiope!\n\nDEMETRIUS\t                  No, no; he'll [        ]\n\tSeem to break loose; take on as you would follow,\n\tBut yet come not: you are a tame man, go!\n\nLYSANDER\tHang off, thou cat, thou burr! vile thing, let loose,\n\tOr I will shake thee from me like a serpent!\n\nHERMIA\tWhy are you grown so rude? what change is this?\n\tSweet love,--\n\nLYSANDER\tThy love! out, tawny Tartar, out!\n\tOut, loathed medicine! hated potion, hence!\n\nHERMIA\tDo you not jest?\n\nHELENA\tYes, sooth; and so do you.\n\nLYSANDER\tDemetrius, I will keep my word with thee.\n\nDEMETRIUS\tI would I had your bond, for I perceive\n\tA weak bond holds you: I'll not trust your word.\n\nLYSANDER\tWhat, should I hurt her, strike her, kill her dead?\n\tAlthough I hate her, I'll not harm her so.\n\nHERMIA\tWhat, can you do me greater harm than hate?\n\tHate me! wherefore? O me! what news, my love!\n\tAm not I Hermia? are not you Lysander?\n\tI am as fair now as I was erewhile.\n\tSince night you loved me; yet since night you left\n\tme:\n\tWhy, then you left me--O, the gods forbid!--\n\tIn earnest, shall I say?\n\nLYSANDER\tAy, by my life;\n\tAnd never did desire to see thee more.\n\tTherefore be out of hope, of question, of doubt;\n\tBe certain, nothing truer; 'tis no jest\n\tThat I do hate thee and love Helena.\n\nHERMIA\tO me! you juggler! you canker-blossom!\n\tYou thief of love! what, have you come by night\n\tAnd stolen my love's heart from him?\n\nHELENA\tFine, i'faith!\n\tHave you no modesty, no maiden shame,\n\tNo touch of bashfulness? What, will you tear\n\tImpatient answers from my gentle tongue?\n\tFie, fie! you counterfeit, you puppet, you!\n\nHERMIA\tPuppet? why so? ay, that way goes the game.\n\tNow I perceive that she hath made compare\n\tBetween our statures; she hath urged her height;\n\tAnd with her personage, her tall personage,\n\tHer height, forsooth, she hath prevail'd with him.\n\tAnd are you grown so high in his esteem;\n\tBecause I am so dwarfish and so low?\n\tHow low am I, thou painted maypole? speak;\n\tHow low am I? I am not yet so low\n\tBut that my nails can reach unto thine eyes.\n\nHELENA\tI pray you, though you mock me, gentlemen,\n\tLet her not hurt me: I was never curst;\n\tI have no gift at all in shrewishness;\n\tI am a right maid for my cowardice:\n\tLet her not strike me. You perhaps may think,\n\tBecause she is something lower than myself,\n\tThat I can match her.\n\nHERMIA\tLower! hark, again.\n\nHELENA\tGood Hermia, do not be so bitter with me.\n\tI evermore did love you, Hermia,\n\tDid ever keep your counsels, never wrong'd you;\n\tSave that, in love unto Demetrius,\n\tI told him of your stealth unto this wood.\n\tHe follow'd you; for love I follow'd him;\n\tBut he hath chid me hence and threaten'd me\n\tTo strike me, spurn me, nay, to kill me too:\n\tAnd now, so you will let me quiet go,\n\tTo Athens will I bear my folly back\n\tAnd follow you no further: let me go:\n\tYou see how simple and how fond I am.\n\nHERMIA\tWhy, get you gone: who is't that hinders you?\n\nHELENA\tA foolish heart, that I leave here behind.\n\nHERMIA\tWhat, with Lysander?\n\nHELENA\tWith Demetrius.\n\nLYSANDER\tBe not afraid; she shall not harm thee, Helena.\n\nDEMETRIUS\tNo, sir, she shall not, though you take her part.\n\nHELENA\tO, when she's angry, she is keen and shrewd!\n\tShe was a vixen when she went to school;\n\tAnd though she be but little, she is fierce.\n\nHERMIA\t'Little' again! nothing but 'low' and 'little'!\n\tWhy will you suffer her to flout me thus?\n\tLet me come to her.\n\nLYSANDER\tGet you gone, you dwarf;\n\tYou minimus, of hindering knot-grass made;\n\tYou bead, you acorn.\n\nDEMETRIUS\tYou are too officious\n\tIn her behalf that scorns your services.\n\tLet her alone: speak not of Helena;\n\tTake not her part; for, if thou dost intend\n\tNever so little show of love to her,\n\tThou shalt aby it.\n\nLYSANDER\t                  Now she holds me not;\n\tNow follow, if thou darest, to try whose right,\n\tOf thine or mine, is most in Helena.\n\nDEMETRIUS\tFollow! nay, I'll go with thee, cheek by jole.\n\n\t[Exeunt LYSANDER and DEMETRIUS]\n\nHERMIA\tYou, mistress, all this coil is 'long of you:\n\tNay, go not back.\n\nHELENA\t                  I will not trust you, I,\n\tNor longer stay in your curst company.\n\tYour hands than mine are quicker for a fray,\n\tMy legs are longer though, to run away.\n\n\t[Exit]\n\nHERMIA\tI am amazed, and know not what to say.\n\n\t[Exit]\n\nOBERON\tThis is thy negligence: still thou mistakest,\n\tOr else committ'st thy knaveries wilfully.\n\nPUCK\tBelieve me, king of shadows, I mistook.\n\tDid not you tell me I should know the man\n\tBy the Athenian garment be had on?\n\tAnd so far blameless proves my enterprise,\n\tThat I have 'nointed an Athenian's eyes;\n\tAnd so far am I glad it so did sort\n\tAs this their jangling I esteem a sport.\n\nOBERON\tThou see'st these lovers seek a place to fight:\n\tHie therefore, Robin, overcast the night;\n\tThe starry welkin cover thou anon\n\tWith drooping fog as black as Acheron,\n\tAnd lead these testy rivals so astray\n\tAs one come not within another's way.\n\tLike to Lysander sometime frame thy tongue,\n\tThen stir Demetrius up with bitter wrong;\n\tAnd sometime rail thou like Demetrius;\n\tAnd from each other look thou lead them thus,\n\tTill o'er their brows death-counterfeiting sleep\n\tWith leaden legs and batty wings doth creep:\n\tThen crush this herb into Lysander's eye;\n\tWhose liquor hath this virtuous property,\n\tTo take from thence all error with his might,\n\tAnd make his eyeballs roll with wonted sight.\n\tWhen they next wake, all this derision\n\tShall seem a dream and fruitless vision,\n\tAnd back to Athens shall the lovers wend,\n\tWith league whose date till death shall never end.\n\tWhiles I in this affair do thee employ,\n\tI'll to my queen and beg her Indian boy;\n\tAnd then I will her charmed eye release\n\tFrom monster's view, and all things shall be peace.\n\nPUCK\tMy fairy lord, this must be done with haste,\n\tFor night's swift dragons cut the clouds full fast,\n\tAnd yonder shines Aurora's harbinger;\n\tAt whose approach, ghosts, wandering here and there,\n\tTroop home to churchyards: damned spirits all,\n\tThat in crossways and floods have burial,\n\tAlready to their wormy beds are gone;\n\tFor fear lest day should look their shames upon,\n\tThey willfully themselves exile from light\n\tAnd must for aye consort with black-brow'd night.\n\nOBERON\tBut we are spirits of another sort:\n\tI with the morning's love have oft made sport,\n\tAnd, like a forester, the groves may tread,\n\tEven till the eastern gate, all fiery-red,\n\tOpening on Neptune with fair blessed beams,\n\tTurns into yellow gold his salt green streams.\n\tBut, notwithstanding, haste; make no delay:\n\tWe may effect this business yet ere day.\n\n\t[Exit]\n\nPUCK\t   Up and down, up and down,\n\tI will lead them up and down:\n\tI am fear'd in field and town:\n\tGoblin, lead them up and down.\n\tHere comes one.\n\n\t[Re-enter LYSANDER]\n\nLYSANDER\tWhere art thou, proud Demetrius? speak thou now.\n\nPUCK\tHere, villain; drawn and ready. Where art thou?\n\nLYSANDER\tI will be with thee straight.\n\nPUCK\tFollow me, then,\n\tTo plainer ground.\n\n\t[Exit LYSANDER, as following the voice]\n\n\t[Re-enter DEMETRIUS]\n\nDEMETRIUS\t                  Lysander! speak again:\n\tThou runaway, thou coward, art thou fled?\n\tSpeak! In some bush? Where dost thou hide thy head?\n\nPUCK\tThou coward, art thou bragging to the stars,\n\tTelling the bushes that thou look'st for wars,\n\tAnd wilt not come? Come, recreant; come, thou child;\n\tI'll whip thee with a rod: he is defiled\n\tThat draws a sword on thee.\n\nDEMETRIUS\tYea, art thou there?\n\nPUCK\tFollow my voice: we'll try no manhood here.\n\n\t[Exeunt]\n\n\t[Re-enter LYSANDER]\n\nLYSANDER\tHe goes before me and still dares me on:\n\tWhen I come where he calls, then he is gone.\n\tThe villain is much lighter-heel'd than I:\n\tI follow'd fast, but faster he did fly;\n\tThat fallen am I in dark uneven way,\n\tAnd here will rest me.\n\n\t[Lies down]\n\n\tCome, thou gentle day!\n\tFor if but once thou show me thy grey light,\n\tI'll find Demetrius and revenge this spite.\n\n\t[Sleeps]\n\n\t[Re-enter PUCK and DEMETRIUS]\n\nPUCK\tHo, ho, ho! Coward, why comest thou not?\n\nDEMETRIUS\tAbide me, if thou darest; for well I wot\n\tThou runn'st before me, shifting every place,\n\tAnd darest not stand, nor look me in the face.\n\tWhere art thou now?\n\nPUCK\tCome hither: I am here.\n\nDEMETRIUS\tNay, then, thou mock'st me. Thou shalt buy this dear,\n\tIf ever I thy face by daylight see:\n\tNow, go thy way. Faintness constraineth me\n\tTo measure out my length on this cold bed.\n\tBy day's approach look to be visited.\n\n\t[Lies down and sleeps]\n\n\t[Re-enter HELENA]\n\nHELENA\tO weary night, O long and tedious night,\n\tAbate thy hour! Shine comforts from the east,\n\tThat I may back to Athens by daylight,\n\tFrom these that my poor company detest:\n\tAnd sleep, that sometimes shuts up sorrow's eye,\n\tSteal me awhile from mine own company.\n\n\t[Lies down and sleeps]\n\nPUCK\tYet but three? Come one more;\n\tTwo of both kinds make up four.\n\tHere she comes, curst and sad:\n\tCupid is a knavish lad,\n\tThus to make poor females mad.\n\n\t[Re-enter HERMIA]\n\nHERMIA\tNever so weary, never so in woe,\n\tBedabbled with the dew and torn with briers,\n\tI can no further crawl, no further go;\n\tMy legs can keep no pace with my desires.\n\tHere will I rest me till the break of day.\n\tHeavens shield Lysander, if they mean a fray!\n\n\t[Lies down and sleeps]\n\nPUCK\t                  On the ground\n\tSleep sound:\n\tI'll apply\n\tTo your eye,\n\tGentle lover, remedy.\n\n\t[Squeezing the juice on LYSANDER's eyes]\n\n\tWhen thou wakest,\n\tThou takest\n\tTrue delight\n\tIn the sight\n\tOf thy former lady's eye:\n\tAnd the country proverb known,\n\tThat every man should take his own,\n\tIn your waking shall be shown:\n\tJack shall have Jill;\n\tNought shall go ill;\n\tThe man shall have his mare again, and all shall be well.\n\n\t[Exit]\n\n\n\n\n\tA MIDSUMMER NIGHT'S DREAM\n\n\nACT IV\n\n\n\nSCENE I\tThe same. LYSANDER, DEMETRIUS, HELENA, and HERMIA\n\tlying asleep.\n\n\n\t[Enter TITANIA and BOTTOM; PEASEBLOSSOM, COBWEB, MOTH,\n\tMUSTARDSEED, and other Fairies attending; OBERON\n\tbehind unseen]\n\nTITANIA\tCome, sit thee down upon this flowery bed,\n\tWhile I thy amiable cheeks do coy,\n\tAnd stick musk-roses in thy sleek smooth head,\n\tAnd kiss thy fair large ears, my gentle joy.\n\nBOTTOM\tWhere's Peaseblossom?\n\nPEASEBLOSSOM\tReady.\n\nBOTTOM\tScratch my head Peaseblossom. Where's Mounsieur Cobweb?\n\nCOBWEB\tReady.\n\nBOTTOM\tMounsieur Cobweb, good mounsieur, get you your\n\tweapons in your hand, and kill me a red-hipped\n\thumble-bee on the top of a thistle; and, good\n\tmounsieur, bring me the honey-bag. Do not fret\n\tyourself too much in the action, mounsieur; and,\n\tgood mounsieur, have a care the honey-bag break not;\n\tI would be loath to have you overflown with a\n\thoney-bag, signior. Where's Mounsieur Mustardseed?\n\nMUSTARDSEED\tReady.\n\nBOTTOM\tGive me your neaf, Mounsieur Mustardseed. Pray you,\n\tleave your courtesy, good mounsieur.\n\nMUSTARDSEED\tWhat's your Will?\n\nBOTTOM\tNothing, good mounsieur, but to help Cavalery Cobweb\n\tto scratch. I must to the barber's, monsieur; for\n\tmethinks I am marvellous hairy about the face; and I\n\tam such a tender ass, if my hair do but tickle me,\n\tI must scratch.\n\nTITANIA\tWhat, wilt thou hear some music,\n\tmy sweet love?\n\nBOTTOM\tI have a reasonable good ear in music. Let's have\n\tthe tongs and the bones.\n\nTITANIA\tOr say, sweet love, what thou desirest to eat.\n\nBOTTOM\tTruly, a peck of provender: I could munch your good\n\tdry oats. Methinks I have a great desire to a bottle\n\tof hay: good hay, sweet hay, hath no fellow.\n\nTITANIA\tI have a venturous fairy that shall seek\n\tThe squirrel's hoard, and fetch thee new nuts.\n\nBOTTOM\tI had rather have a handful or two of dried peas.\n\tBut, I pray you, let none of your people stir me: I\n\thave an exposition of sleep come upon me.\n\nTITANIA\tSleep thou, and I will wind thee in my arms.\n\tFairies, begone, and be all ways away.\n\n\t[Exeunt fairies]\n\n\tSo doth the woodbine the sweet honeysuckle\n\tGently entwist; the female ivy so\n\tEnrings the barky fingers of the elm.\n\tO, how I love thee! how I dote on thee!\n\n\t[They sleep]\n\n\t[Enter PUCK]\n\nOBERON\t[Advancing]  Welcome, good Robin.\n\tSee'st thou this sweet sight?\n\tHer dotage now I do begin to pity:\n\tFor, meeting her of late behind the wood,\n\tSeeking sweet favours from this hateful fool,\n\tI did upbraid her and fall out with her;\n\tFor she his hairy temples then had rounded\n\tWith a coronet of fresh and fragrant flowers;\n\tAnd that same dew, which sometime on the buds\n\tWas wont to swell like round and orient pearls,\n\tStood now within the pretty flowerets' eyes\n\tLike tears that did their own disgrace bewail.\n\tWhen I had at my pleasure taunted her\n\tAnd she in mild terms begg'd my patience,\n\tI then did ask of her her changeling child;\n\tWhich straight she gave me, and her fairy sent\n\tTo bear him to my bower in fairy land.\n\tAnd now I have the boy, I will undo\n\tThis hateful imperfection of her eyes:\n\tAnd, gentle Puck, take this transformed scalp\n\tFrom off the head of this Athenian swain;\n\tThat, he awaking when the other do,\n\tMay all to Athens back again repair\n\tAnd think no more of this night's accidents\n\tBut as the fierce vexation of a dream.\n\tBut first I will release the fairy queen.\n\tBe as thou wast wont to be;\n\tSee as thou wast wont to see:\n\tDian's bud o'er Cupid's flower\n\tHath such force and blessed power.\n\tNow, my Titania; wake you, my sweet queen.\n\nTITANIA\tMy Oberon! what visions have I seen!\n\tMethought I was enamour'd of an ass.\n\nOBERON\tThere lies your love.\n\nTITANIA\tHow came these things to pass?\n\tO, how mine eyes do loathe his visage now!\n\nOBERON\tSilence awhile. Robin, take off this head.\n\tTitania, music call; and strike more dead\n\tThan common sleep of all these five the sense.\n\nTITANIA\tMusic, ho! music, such as charmeth sleep!\n\n\t[Music, still]\n\nPUCK\tNow, when thou wakest, with thine\n\town fool's eyes peep.\n\nOBERON\tSound, music! Come, my queen, take hands with me,\n\tAnd rock the ground whereon these sleepers be.\n\tNow thou and I are new in amity,\n\tAnd will to-morrow midnight solemnly\n\tDance in Duke Theseus' house triumphantly,\n\tAnd bless it to all fair prosperity:\n\tThere shall the pairs of faithful lovers be\n\tWedded, with Theseus, all in jollity.\n\nPUCK\tFairy king, attend, and mark:\n\tI do hear the morning lark.\n\nOBERON\tThen, my queen, in silence sad,\n\tTrip we after the night's shade:\n\tWe the globe can compass soon,\n\tSwifter than the wandering moon.\n\nTITANIA\tCome, my lord, and in our flight\n\tTell me how it came this night\n\tThat I sleeping here was found\n\tWith these mortals on the ground.\n\n\t[Exeunt]\n\n\t[Horns winded within]\n\n\t[Enter THESEUS, HIPPOLYTA, EGEUS, and train]\n\nTHESEUS\tGo, one of you, find out the forester;\n\tFor now our observation is perform'd;\n\tAnd since we have the vaward of the day,\n\tMy love shall hear the music of my hounds.\n\tUncouple in the western valley; let them go:\n\tDispatch, I say, and find the forester.\n\n\t[Exit an Attendant]\n\n\tWe will, fair queen, up to the mountain's top,\n\tAnd mark the musical confusion\n\tOf hounds and echo in conjunction.\n\nHIPPOLYTA\tI was with Hercules and Cadmus once,\n\tWhen in a wood of Crete they bay'd the bear\n\tWith hounds of Sparta: never did I hear\n\tSuch gallant chiding: for, besides the groves,\n\tThe skies, the fountains, every region near\n\tSeem'd all one mutual cry: I never heard\n\tSo musical a discord, such sweet thunder.\n\nTHESEUS\tMy hounds are bred out of the Spartan kind,\n\tSo flew'd, so sanded, and their heads are hung\n\tWith ears that sweep away the morning dew;\n\tCrook-knee'd, and dew-lapp'd like Thessalian bulls;\n\tSlow in pursuit, but match'd in mouth like bells,\n\tEach under each. A cry more tuneable\n\tWas never holla'd to, nor cheer'd with horn,\n\tIn Crete, in Sparta, nor in Thessaly:\n\tJudge when you hear. But, soft! what nymphs are these?\n\nEGEUS\tMy lord, this is my daughter here asleep;\n\tAnd this, Lysander; this Demetrius is;\n\tThis Helena, old Nedar's Helena:\n\tI wonder of their being here together.\n\nTHESEUS\tNo doubt they rose up early to observe\n\tThe rite of May, and hearing our intent,\n\tCame here in grace our solemnity.\n\tBut speak, Egeus; is not this the day\n\tThat Hermia should give answer of her choice?\n\nEGEUS\tIt is, my lord.\n\nTHESEUS\tGo, bid the huntsmen wake them with their horns.\n\n\t[Horns and shout within. LYSANDER, DEMETRIUS,\n\tHELENA, and HERMIA wake and start up]\n\n\tGood morrow, friends. Saint Valentine is past:\n\tBegin these wood-birds but to couple now?\n\nLYSANDER\tPardon, my lord.\n\nTHESEUS\t                  I pray you all, stand up.\n\tI know you two are rival enemies:\n\tHow comes this gentle concord in the world,\n\tThat hatred is so far from jealousy,\n\tTo sleep by hate, and fear no enmity?\n\nLYSANDER\tMy lord, I shall reply amazedly,\n\tHalf sleep, half waking: but as yet, I swear,\n\tI cannot truly say how I came here;\n\tBut, as I think,--for truly would I speak,\n\tAnd now do I bethink me, so it is,--\n\tI came with Hermia hither: our intent\n\tWas to be gone from Athens, where we might,\n\tWithout the peril of the Athenian law.\n\nEGEUS\tEnough, enough, my lord; you have enough:\n\tI beg the law, the law, upon his head.\n\tThey would have stolen away; they would, Demetrius,\n\tThereby to have defeated you and me,\n\tYou of your wife and me of my consent,\n\tOf my consent that she should be your wife.\n\nDEMETRIUS\tMy lord, fair Helen told me of their stealth,\n\tOf this their purpose hither to this wood;\n\tAnd I in fury hither follow'd them,\n\tFair Helena in fancy following me.\n\tBut, my good lord, I wot not by what power,--\n\tBut by some power it is,--my love to Hermia,\n\tMelted as the snow, seems to me now\n\tAs the remembrance of an idle gaud\n\tWhich in my childhood I did dote upon;\n\tAnd all the faith, the virtue of my heart,\n\tThe object and the pleasure of mine eye,\n\tIs only Helena. To her, my lord,\n\tWas I betroth'd ere I saw Hermia:\n\tBut, like in sickness, did I loathe this food;\n\tBut, as in health, come to my natural taste,\n\tNow I do wish it, love it, long for it,\n\tAnd will for evermore be true to it.\n\nTHESEUS\tFair lovers, you are fortunately met:\n\tOf this discourse we more will hear anon.\n\tEgeus, I will overbear your will;\n\tFor in the temple by and by with us\n\tThese couples shall eternally be knit:\n\tAnd, for the morning now is something worn,\n\tOur purposed hunting shall be set aside.\n\tAway with us to Athens; three and three,\n\tWe'll hold a feast in great solemnity.\n\tCome, Hippolyta.\n\n\t[Exeunt THESEUS, HIPPOLYTA, EGEUS, and train]\n\nDEMETRIUS\tThese things seem small and undistinguishable,\nHERMIA\tMethinks I see these things with parted eye,\n\tWhen every thing seems double.\n\nHELENA\tSo methinks:\n\tAnd I have found Demetrius like a jewel,\n\tMine own, and not mine own.\n\nDEMETRIUS\tAre you sure\n\tThat we are awake? It seems to me\n\tThat yet we sleep, we dream. Do not you think\n\tThe duke was here, and bid us follow him?\n\nHERMIA\tYea; and my father.\n\nHELENA\tAnd Hippolyta.\n\nLYSANDER\tAnd he did bid us follow to the temple.\n\nDEMETRIUS\tWhy, then, we are awake: let's follow him\n\tAnd by the way let us recount our dreams.\n\n\t[Exeunt]\n\nBOTTOM\t[Awaking]  When my cue comes, call me, and I will\n\tanswer: my next is, 'Most fair Pyramus.' Heigh-ho!\n\tPeter Quince! Flute, the bellows-mender! Snout,\n\tthe tinker! Starveling! God's my life, stolen\n\thence, and left me asleep! I have had a most rare\n\tvision. I have had a dream, past the wit of man to\n\tsay what dream it was: man is but an ass, if he go\n\tabout to expound this dream. Methought I was--there\n\tis no man can tell what. Methought I was,--and\n\tmethought I had,--but man is but a patched fool, if\n\the will offer to say what methought I had. The eye\n\tof man hath not heard, the ear of man hath not\n\tseen, man's hand is not able to taste, his tongue\n\tto conceive, nor his heart to report, what my dream\n\twas. I will get Peter Quince to write a ballad of\n\tthis dream: it shall be called Bottom's Dream,\n\tbecause it hath no bottom; and I will sing it in the\n\tlatter end of a play, before the duke:\n\tperadventure, to make it the more gracious, I shall\n\tsing it at her death.\n\n\t[Exit]\n\n\n\n\n\tA MIDSUMMER NIGHT'S DREAM\n\n\nACT IV\n\n\n\nSCENE II\tAthens. QUINCE'S house.\n\n\n\t[Enter QUINCE, FLUTE, SNOUT, and STARVELING]\n\nQUINCE\tHave you sent to Bottom's house? is he come home yet?\n\nSTARVELING\tHe cannot be heard of. Out of doubt he is\n\ttransported.\n\nFLUTE\tIf he come not, then the play is marred: it goes\n\tnot forward, doth it?\n\nQUINCE\tIt is not possible: you have not a man in all\n\tAthens able to discharge Pyramus but he.\n\nFLUTE\tNo, he hath simply the best wit of any handicraft\n\tman in Athens.\n\nQUINCE\tYea and the best person too; and he is a very\n\tparamour for a sweet voice.\n\nFLUTE\tYou must say 'paragon:' a paramour is, God bless us,\n\ta thing of naught.\n\n\t[Enter SNUG]\n\nSNUG\tMasters, the duke is coming from the temple, and\n\tthere is two or three lords and ladies more married:\n\tif our sport had gone forward, we had all been made\n\tmen.\n\nFLUTE\tO sweet bully Bottom! Thus hath he lost sixpence a\n\tday during his life; he could not have 'scaped\n\tsixpence a day: an the duke had not given him\n\tsixpence a day for playing Pyramus, I'll be hanged;\n\the would have deserved it: sixpence a day in\n\tPyramus, or nothing.\n\n\t[Enter BOTTOM]\n\nBOTTOM\tWhere are these lads? where are these hearts?\n\nQUINCE\tBottom! O most courageous day! O most happy hour!\n\nBOTTOM\tMasters, I am to discourse wonders: but ask me not\n\twhat; for if I tell you, I am no true Athenian. I\n\twill tell you every thing, right as it fell out.\n\nQUINCE\tLet us hear, sweet Bottom.\n\nBOTTOM\tNot a word of me. All that I will tell you is, that\n\tthe duke hath dined. Get your apparel together,\n\tgood strings to your beards, new ribbons to your\n\tpumps; meet presently at the palace; every man look\n\to'er his part; for the short and the long is, our\n\tplay is preferred. In any case, let Thisby have\n\tclean linen; and let not him that plays the lion\n\tpair his nails, for they shall hang out for the\n\tlion's claws. And, most dear actors, eat no onions\n\tnor garlic, for we are to utter sweet breath; and I\n\tdo not doubt but to hear them say, it is a sweet\n\tcomedy. No more words: away! go, away!\n\n\t[Exeunt]\n\n\n\n\n\tA MIDSUMMER NIGHT'S DREAM\n\n\nACT V\n\n\n\nSCENE I\tAthens. The palace of THESEUS.\n\n\n\t[Enter THESEUS, HIPPOLYTA, PHILOSTRATE, Lords and\n\tAttendants]\n\nHIPPOLYTA\t'Tis strange my Theseus, that these\n\tlovers speak of.\n\nTHESEUS\tMore strange than true: I never may believe\n\tThese antique fables, nor these fairy toys.\n\tLovers and madmen have such seething brains,\n\tSuch shaping fantasies, that apprehend\n\tMore than cool reason ever comprehends.\n\tThe lunatic, the lover and the poet\n\tAre of imagination all compact:\n\tOne sees more devils than vast hell can hold,\n\tThat is, the madman: the lover, all as frantic,\n\tSees Helen's beauty in a brow of Egypt:\n\tThe poet's eye, in fine frenzy rolling,\n\tDoth glance from heaven to earth, from earth to heaven;\n\tAnd as imagination bodies forth\n\tThe forms of things unknown, the poet's pen\n\tTurns them to shapes and gives to airy nothing\n\tA local habitation and a name.\n\tSuch tricks hath strong imagination,\n\tThat if it would but apprehend some joy,\n\tIt comprehends some bringer of that joy;\n\tOr in the night, imagining some fear,\n\tHow easy is a bush supposed a bear!\n\nHIPPOLYTA\tBut all the story of the night told over,\n\tAnd all their minds transfigured so together,\n\tMore witnesseth than fancy's images\n\tAnd grows to something of great constancy;\n\tBut, howsoever, strange and admirable.\n\nTHESEUS\tHere come the lovers, full of joy and mirth.\n\n\t[Enter LYSANDER, DEMETRIUS, HERMIA, and HELENA]\n\n\tJoy, gentle friends! joy and fresh days of love\n\tAccompany your hearts!\n\nLYSANDER\tMore than to us\n\tWait in your royal walks, your board, your bed!\n\nTHESEUS\tCome now; what masques, what dances shall we have,\n\tTo wear away this long age of three hours\n\tBetween our after-supper and bed-time?\n\tWhere is our usual manager of mirth?\n\tWhat revels are in hand? Is there no play,\n\tTo ease the anguish of a torturing hour?\n\tCall Philostrate.\n\nPHILOSTRATE\t                  Here, mighty Theseus.\n\nTHESEUS\tSay, what abridgement have you for this evening?\n\tWhat masque? what music? How shall we beguile\n\tThe lazy time, if not with some delight?\n\nPHILOSTRATE\tThere is a brief how many sports are ripe:\n\tMake choice of which your highness will see first.\n\n\t[Giving a paper]\n\nTHESEUS\t[Reads]  'The battle with the Centaurs, to be sung\n\tBy an Athenian eunuch to the harp.'\n\tWe'll none of that: that have I told my love,\n\tIn glory of my kinsman Hercules.\n\n\t[Reads]\n\n\t'The riot of the tipsy Bacchanals,\n\tTearing the Thracian singer in their rage.'\n\tThat is an old device; and it was play'd\n\tWhen I from Thebes came last a conqueror.\n\n\t[Reads]\n\n\t'The thrice three Muses mourning for the death\n\tOf Learning, late deceased in beggary.'\n\tThat is some satire, keen and critical,\n\tNot sorting with a nuptial ceremony.\n\n\t[Reads]\n\n\t'A tedious brief scene of young Pyramus\n\tAnd his love Thisbe; very tragical mirth.'\n\tMerry and tragical! tedious and brief!\n\tThat is, hot ice and wondrous strange snow.\n\tHow shall we find the concord of this discord?\n\nPHILOSTRATE\tA play there is, my lord, some ten words long,\n\tWhich is as brief as I have known a play;\n\tBut by ten words, my lord, it is too long,\n\tWhich makes it tedious; for in all the play\n\tThere is not one word apt, one player fitted:\n\tAnd tragical, my noble lord, it is;\n\tFor Pyramus therein doth kill himself.\n\tWhich, when I saw rehearsed, I must confess,\n\tMade mine eyes water; but more merry tears\n\tThe passion of loud laughter never shed.\n\nTHESEUS\tWhat are they that do play it?\n\nPHILOSTRATE\tHard-handed men that work in Athens here,\n\tWhich never labour'd in their minds till now,\n\tAnd now have toil'd their unbreathed memories\n\tWith this same play, against your nuptial.\n\nTHESEUS\tAnd we will hear it.\n\nPHILOSTRATE\tNo, my noble lord;\n\tIt is not for you: I have heard it over,\n\tAnd it is nothing, nothing in the world;\n\tUnless you can find sport in their intents,\n\tExtremely stretch'd and conn'd with cruel pain,\n\tTo do you service.\n\nTHESEUS\t                  I will hear that play;\n\tFor never anything can be amiss,\n\tWhen simpleness and duty tender it.\n\tGo, bring them in: and take your places, ladies.\n\n\t[Exit PHILOSTRATE]\n\nHIPPOLYTA\tI love not to see wretchedness o'er charged\n\tAnd duty in his service perishing.\n\nTHESEUS\tWhy, gentle sweet, you shall see no such thing.\n\nHIPPOLYTA\tHe says they can do nothing in this kind.\n\nTHESEUS\tThe kinder we, to give them thanks for nothing.\n\tOur sport shall be to take what they mistake:\n\tAnd what poor duty cannot do, noble respect\n\tTakes it in might, not merit.\n\tWhere I have come, great clerks have purposed\n\tTo greet me with premeditated welcomes;\n\tWhere I have seen them shiver and look pale,\n\tMake periods in the midst of sentences,\n\tThrottle their practised accent in their fears\n\tAnd in conclusion dumbly have broke off,\n\tNot paying me a welcome. Trust me, sweet,\n\tOut of this silence yet I pick'd a welcome;\n\tAnd in the modesty of fearful duty\n\tI read as much as from the rattling tongue\n\tOf saucy and audacious eloquence.\n\tLove, therefore, and tongue-tied simplicity\n\tIn least speak most, to my capacity.\n\n\t[Re-enter PHILOSTRATE]\n\nPHILOSTRATE\tSo please your grace, the Prologue is address'd.\n\nTHESEUS\tLet him approach.\n\n\t[Flourish of trumpets]\n\n\t[Enter QUINCE for the Prologue]\n\nPrologue\tIf we offend, it is with our good will.\n\tThat you should think, we come not to offend,\n\tBut with good will. To show our simple skill,\n\tThat is the true beginning of our end.\n\tConsider then we come but in despite.\n\tWe do not come as minding to contest you,\n\tOur true intent is. All for your delight\n\tWe are not here. That you should here repent you,\n\tThe actors are at hand and by their show\n\tYou shall know all that you are like to know.\n\nTHESEUS\tThis fellow doth not stand upon points.\n\nLYSANDER\tHe hath rid his prologue like a rough colt; he knows\n\tnot the stop. A good moral, my lord: it is not\n\tenough to speak, but to speak true.\n\nHIPPOLYTA\tIndeed he hath played on his prologue like a child\n\ton a recorder; a sound, but not in government.\n\nTHESEUS\tHis speech, was like a tangled chain; nothing\n\timpaired, but all disordered. Who is next?\n\n\t[Enter Pyramus and Thisbe, Wall, Moonshine, and Lion]\n\nPrologue\tGentles, perchance you wonder at this show;\n\tBut wonder on, till truth make all things plain.\n\tThis man is Pyramus, if you would know;\n\tThis beauteous lady Thisby is certain.\n\tThis man, with lime and rough-cast, doth present\n\tWall, that vile Wall which did these lovers sunder;\n\tAnd through Wall's chink, poor souls, they are content\n\tTo whisper. At the which let no man wonder.\n\tThis man, with lanthorn, dog, and bush of thorn,\n\tPresenteth Moonshine; for, if you will know,\n\tBy moonshine did these lovers think no scorn\n\tTo meet at Ninus' tomb, there, there to woo.\n\tThis grisly beast, which Lion hight by name,\n\tThe trusty Thisby, coming first by night,\n\tDid scare away, or rather did affright;\n\tAnd, as she fled, her mantle she did fall,\n\tWhich Lion vile with bloody mouth did stain.\n\tAnon comes Pyramus, sweet youth and tall,\n\tAnd finds his trusty Thisby's mantle slain:\n\tWhereat, with blade, with bloody blameful blade,\n\tHe bravely broach'd is boiling bloody breast;\n\tAnd Thisby, tarrying in mulberry shade,\n\tHis dagger drew, and died. For all the rest,\n\tLet Lion, Moonshine, Wall, and lovers twain\n\tAt large discourse, while here they do remain.\n\n\t[Exeunt Prologue, Thisbe, Lion, and Moonshine]\n\nTHESEUS\tI wonder if the lion be to speak.\n\nDEMETRIUS\tNo wonder, my lord: one lion may, when many asses do.\n\nWall\tIn this same interlude it doth befall\n\tThat I, one Snout by name, present a wall;\n\tAnd such a wall, as I would have you think,\n\tThat had in it a crannied hole or chink,\n\tThrough which the lovers, Pyramus and Thisby,\n\tDid whisper often very secretly.\n\tThis loam, this rough-cast and this stone doth show\n\tThat I am that same wall; the truth is so:\n\tAnd this the cranny is, right and sinister,\n\tThrough which the fearful lovers are to whisper.\n\nTHESEUS\tWould you desire lime and hair to speak better?\n\nDEMETRIUS\tIt is the wittiest partition that ever I heard\n\tdiscourse, my lord.\n\n\t[Enter Pyramus]\n\nTHESEUS\tPyramus draws near the wall: silence!\n\nPyramus\tO grim-look'd night! O night with hue so black!\n\tO night, which ever art when day is not!\n\tO night, O night! alack, alack, alack,\n\tI fear my Thisby's promise is forgot!\n\tAnd thou, O wall, O sweet, O lovely wall,\n\tThat stand'st between her father's ground and mine!\n\tThou wall, O wall, O sweet and lovely wall,\n\tShow me thy chink, to blink through with mine eyne!\n\n\t[Wall holds up his fingers]\n\n\tThanks, courteous wall: Jove shield thee well for this!\n\tBut what see I? No Thisby do I see.\n\tO wicked wall, through whom I see no bliss!\n\tCursed be thy stones for thus deceiving me!\n\nTHESEUS\tThe wall, methinks, being sensible, should curse again.\n\nPyramus\tNo, in truth, sir, he should not. 'Deceiving me'\n\tis Thisby's cue: she is to enter now, and I am to\n\tspy her through the wall. You shall see, it will\n\tfall pat as I told you. Yonder she comes.\n\n\t[Enter Thisbe]\n\nThisbe\tO wall, full often hast thou heard my moans,\n\tFor parting my fair Pyramus and me!\n\tMy cherry lips have often kiss'd thy stones,\n\tThy stones with lime and hair knit up in thee.\n\nPyramus\tI see a voice: now will I to the chink,\n\tTo spy an I can hear my Thisby's face. Thisby!\n\nThisbe\tMy love thou art, my love I think.\n\nPyramus\tThink what thou wilt, I am thy lover's grace;\n\tAnd, like Limander, am I trusty still.\n\nThisbe\tAnd I like Helen, till the Fates me kill.\n\nPyramus\tNot Shafalus to Procrus was so true.\n\nThisbe\tAs Shafalus to Procrus, I to you.\n\nPyramus\tO kiss me through the hole of this vile wall!\n\nThisbe\tI kiss the wall's hole, not your lips at all.\n\nPyramus\tWilt thou at Ninny's tomb meet me straightway?\n\nThisbe\t'Tide life, 'tide death, I come without delay.\n\n\t[Exeunt Pyramus and Thisbe]\n\nWall\tThus have I, Wall, my part discharged so;\n\tAnd, being done, thus Wall away doth go.\n\n\t[Exit]\n\nTHESEUS\tNow is the mural down between the two neighbours.\n\nDEMETRIUS\tNo remedy, my lord, when walls are so wilful to hear\n\twithout warning.\n\nHIPPOLYTA\tThis is the silliest stuff that ever I heard.\n\nTHESEUS\tThe best in this kind are but shadows; and the worst\n\tare no worse, if imagination amend them.\n\nHIPPOLYTA\tIt must be your imagination then, and not theirs.\n\nTHESEUS\tIf we imagine no worse of them than they of\n\tthemselves, they may pass for excellent men. Here\n\tcome two noble beasts in, a man and a lion.\n\n\t[Enter Lion and Moonshine]\n\nLion\tYou, ladies, you, whose gentle hearts do fear\n\tThe smallest monstrous mouse that creeps on floor,\n\tMay now perchance both quake and tremble here,\n\tWhen lion rough in wildest rage doth roar.\n\tThen know that I, one Snug the joiner, am\n\tA lion-fell, nor else no lion's dam;\n\tFor, if I should as lion come in strife\n\tInto this place, 'twere pity on my life.\n\nTHESEUS\tA very gentle beast, of a good conscience.\n\nDEMETRIUS\tThe very best at a beast, my lord, that e'er I saw.\n\nLYSANDER\tThis lion is a very fox for his valour.\n\nTHESEUS\tTrue; and a goose for his discretion.\n\nDEMETRIUS\tNot so, my lord; for his valour cannot carry his\n\tdiscretion; and the fox carries the goose.\n\nTHESEUS\tHis discretion, I am sure, cannot carry his valour;\n\tfor the goose carries not the fox. It is well:\n\tleave it to his discretion, and let us listen to the moon.\n\nMoonshine\tThis lanthorn doth the horned moon present;--\n\nDEMETRIUS\tHe should have worn the horns on his head.\n\nTHESEUS\tHe is no crescent, and his horns are\n\tinvisible within the circumference.\n\nMoonshine\tThis lanthorn doth the horned moon present;\n\tMyself the man i' the moon do seem to be.\n\nTHESEUS\tThis is the greatest error of all the rest: the man\n\tshould be put into the lanthorn. How is it else the\n\tman i' the moon?\n\nDEMETRIUS\tHe dares not come there for the candle; for, you\n\tsee, it is already in snuff.\n\nHIPPOLYTA\tI am aweary of this moon: would he would change!\n\nTHESEUS\tIt appears, by his small light of discretion, that\n\the is in the wane; but yet, in courtesy, in all\n\treason, we must stay the time.\n\nLYSANDER\tProceed, Moon.\n\nMoonshine\tAll that I have to say, is, to tell you that the\n\tlanthorn is the moon; I, the man in the moon; this\n\tthorn-bush, my thorn-bush; and this dog, my dog.\n\nDEMETRIUS\tWhy, all these should be in the lanthorn; for all\n\tthese are in the moon. But, silence! here comes Thisbe.\n\n\t[Enter Thisbe]\n\nThisbe\tThis is old Ninny's tomb. Where is my love?\n\nLion\t[Roaring]  Oh--\n\n\t[Thisbe runs off]\n\nDEMETRIUS\tWell roared, Lion.\n\nTHESEUS\tWell run, Thisbe.\n\nHIPPOLYTA\tWell shone, Moon. Truly, the moon shines with a\n\tgood grace.\n\n\t[The Lion shakes Thisbe's mantle, and exit]\n\nTHESEUS\tWell moused, Lion.\n\nLYSANDER\tAnd so the lion vanished.\n\nDEMETRIUS\tAnd then came Pyramus.\n\n\t[Enter Pyramus]\n\nPyramus\tSweet Moon, I thank thee for thy sunny beams;\n\tI thank thee, Moon, for shining now so bright;\n\tFor, by thy gracious, golden, glittering gleams,\n\tI trust to take of truest Thisby sight.\n\tBut stay, O spite!\n\tBut mark, poor knight,\n\tWhat dreadful dole is here!\n\tEyes, do you see?\n\tHow can it be?\n\tO dainty duck! O dear!\n\tThy mantle good,\n\tWhat, stain'd with blood!\n\tApproach, ye Furies fell!\n\tO Fates, come, come,\n\tCut thread and thrum;\n\tQuail, crush, conclude, and quell!\n\nTHESEUS\tThis passion, and the death of a dear friend, would\n\tgo near to make a man look sad.\n\nHIPPOLYTA\tBeshrew my heart, but I pity the man.\n\nPyramus\tO wherefore, Nature, didst thou lions frame?\n\tSince lion vile hath here deflower'd my dear:\n\tWhich is--no, no--which was the fairest dame\n\tThat lived, that loved, that liked, that look'd\n\twith cheer.\n\tCome, tears, confound;\n\tOut, sword, and wound\n\tThe pap of Pyramus;\n\tAy, that left pap,\n\tWhere heart doth hop:\n\n\t[Stabs himself]\n\n\tThus die I, thus, thus, thus.\n\tNow am I dead,\n\tNow am I fled;\n\tMy soul is in the sky:\n\tTongue, lose thy light;\n\tMoon take thy flight:\n\n\t[Exit Moonshine]\n\n\tNow die, die, die, die, die.\n\n\t[Dies]\n\nDEMETRIUS\tNo die, but an ace, for him; for he is but one.\n\nLYSANDER\tLess than an ace, man; for he is dead; he is nothing.\n\nTHESEUS\tWith the help of a surgeon he might yet recover, and\n\tprove an ass.\n\nHIPPOLYTA\tHow chance Moonshine is gone before Thisbe comes\n\tback and finds her lover?\n\nTHESEUS\tShe will find him by starlight. Here she comes; and\n\ther passion ends the play.\n\n\t[Re-enter Thisbe]\n\nHIPPOLYTA\tMethinks she should not use a long one for such a\n\tPyramus: I hope she will be brief.\n\nDEMETRIUS\tA mote will turn the balance, which Pyramus, which\n\tThisbe, is the better; he for a man, God warrant us;\n\tshe for a woman, God bless us.\n\nLYSANDER\tShe hath spied him already with those sweet eyes.\n\nDEMETRIUS\tAnd thus she means, videlicet:--\n\nThisbe\t          Asleep, my love?\n\tWhat, dead, my dove?\n\tO Pyramus, arise!\n\tSpeak, speak. Quite dumb?\n\tDead, dead? A tomb\n\tMust cover thy sweet eyes.\n\tThese My lips,\n\tThis cherry nose,\n\tThese yellow cowslip cheeks,\n\tAre gone, are gone:\n\tLovers, make moan:\n\tHis eyes were green as leeks.\n\tO Sisters Three,\n\tCome, come to me,\n\tWith hands as pale as milk;\n\tLay them in gore,\n\tSince you have shore\n\tWith shears his thread of silk.\n\tTongue, not a word:\n\tCome, trusty sword;\n\tCome, blade, my breast imbrue:\n\n\t[Stabs herself]\n\n\tAnd, farewell, friends;\n\tThus Thisby ends:\n\tAdieu, adieu, adieu.\n\n\t[Dies]\n\nTHESEUS\tMoonshine and Lion are left to bury the dead.\n\nDEMETRIUS\tAy, and Wall too.\n\nBOTTOM\t[Starting up]  No assure you; the wall is down that\n\tparted their fathers. Will it please you to see the\n\tepilogue, or to hear a Bergomask dance between two\n\tof our company?\n\nTHESEUS\tNo epilogue, I pray you; for your play needs no\n\texcuse. Never excuse; for when the players are all\n\tdead, there needs none to be blamed. Marry, if he\n\tthat writ it had played Pyramus and hanged himself\n\tin Thisbe's garter, it would have been a fine\n\ttragedy: and so it is, truly; and very notably\n\tdischarged. But come, your Bergomask: let your\n\tepilogue alone.\n\n\t[A dance]\n\n\tThe iron tongue of midnight hath told twelve:\n\tLovers, to bed; 'tis almost fairy time.\n\tI fear we shall out-sleep the coming morn\n\tAs much as we this night have overwatch'd.\n\tThis palpable-gross play hath well beguiled\n\tThe heavy gait of night. Sweet friends, to bed.\n\tA fortnight hold we this solemnity,\n\tIn nightly revels and new jollity.\n\n\t[Exeunt]\n\n\t[Enter PUCK]\n\nPUCK\t     Now the hungry lion roars,\n\tAnd the wolf behowls the moon;\n\tWhilst the heavy ploughman snores,\n\tAll with weary task fordone.\n\tNow the wasted brands do glow,\n\tWhilst the screech-owl, screeching loud,\n\tPuts the wretch that lies in woe\n\tIn remembrance of a shroud.\n\tNow it is the time of night\n\tThat the graves all gaping wide,\n\tEvery one lets forth his sprite,\n\tIn the church-way paths to glide:\n\tAnd we fairies, that do run\n\tBy the triple Hecate's team,\n\tFrom the presence of the sun,\n\tFollowing darkness like a dream,\n\tNow are frolic: not a mouse\n\tShall disturb this hallow'd house:\n\tI am sent with broom before,\n\tTo sweep the dust behind the door.\n\n\t[Enter OBERON and TITANIA with their train]\n\nOBERON\t     Through the house give gathering light,\n\tBy the dead and drowsy fire:\n\tEvery elf and fairy sprite\n\tHop as light as bird from brier;\n\tAnd this ditty, after me,\n\tSing, and dance it trippingly.\n\nTITANIA\tFirst, rehearse your song by rote\n\tTo each word a warbling note:\n\tHand in hand, with fairy grace,\n\tWill we sing, and bless this place.\n\n\t[Song and dance]\n\nOBERON\tNow, until the break of day,\n\tThrough this house each fairy stray.\n\tTo the best bride-bed will we,\n\tWhich by us shall blessed be;\n\tAnd the issue there create\n\tEver shall be fortunate.\n\tSo shall all the couples three\n\tEver true in loving be;\n\tAnd the blots of Nature's hand\n\tShall not in their issue stand;\n\tNever mole, hare lip, nor scar,\n\tNor mark prodigious, such as are\n\tDespised in nativity,\n\tShall upon their children be.\n\tWith this field-dew consecrate,\n\tEvery fairy take his gait;\n\tAnd each several chamber bless,\n\tThrough this palace, with sweet peace;\n\tAnd the owner of it blest\n\tEver shall in safety rest.\n\tTrip away; make no stay;\n\tMeet me all by break of day.\n\n\t[Exeunt OBERON, TITANIA, and train]\n\nPUCK\tIf we shadows have offended,\n\tThink but this, and all is mended,\n\tThat you have but slumber'd here\n\tWhile these visions did appear.\n\tAnd this weak and idle theme,\n\tNo more yielding but a dream,\n\tGentles, do not reprehend:\n\tif you pardon, we will mend:\n\tAnd, as I am an honest Puck,\n\tIf we have unearned luck\n\tNow to 'scape the serpent's tongue,\n\tWe will make amends ere long;\n\tElse the Puck a liar call;\n\tSo, good night unto you all.\n\tGive me your hands, if we be friends,\n\tAnd Robin shall restore amends.\n)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 51
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : true,
      "collapsed" : true,
      "id" : "642487B2BEF34B7486E14F09BA3FA862"
    },
    "cell_type" : "code",
    "source" : "",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : true,
      "collapsed" : true,
      "id" : "B033C6A025BB4DAAAB576357B911974B"
    },
    "cell_type" : "code",
    "source" : "",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "B63454514AF841A7824D0A78CCE324C6"
    },
    "cell_type" : "markdown",
    "source" : "> **NOTE:** We called the `RDD.count` method, whereas most Scala collections have a `size` method."
  }, {
    "metadata" : {
      "id" : "6A7FE239825A4DAE86368FAF6E09A142"
    },
    "cell_type" : "markdown",
    "source" : "Now for our next step in the calculation. First, \"tokenize\" the contents into words by splitting on non-alphanumeric characters, meaning all runs of whitespace (including the newlines), punctuation, etc.\n\nNext, the fully-qualified path is verbose and the same prefix is repeated for all the files, so let's extract just the last element of it, the unique file name.\n\nThen form new tuples with the words and file names.\n\n> **Note:** This \"tokenization\" approach is very crude. It improperly handles contractions, like `it's` and hyphenated words like `world-changing`. When you kill Google, be sure to use a real _natural language processing_ (NLP) tokenization technique."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "E072D355D0FF43B58F08848DEAC6109C"
    },
    "cell_type" : "code",
    "source" : "val wordFileNameOnes = fileContents.flatMap { location_contents_tuple2 => // i.e., (file_path, \"all the words in the file\")\n    val words = location_contents_tuple2._2.split(\"\"\"\\W+\"\"\")              // mytuple._2 => give me the 2nd element\n    val fileName = location_contents_tuple2._1.split(pathSeparator).last  // mytuple._1 => give me the 1st element\n    words.map(word => ((word, fileName), 1))        // create a new tuple to return. Note how we structured it!\n}\nwordFileNameOnes",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "wordFileNameOnes: org.apache.spark.rdd.RDD[((String, String), Int)] = MapPartitionsRDD[12] at flatMap at <console>:61\nres91: org.apache.spark.rdd.RDD[((String, String), Int)] = MapPartitionsRDD[12] at flatMap at <console>:61\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "MapPartitionsRDD[12] at flatMap at &lt;console&gt;:61"
      },
      "output_type" : "execute_result",
      "execution_count" : 52
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B9A6AE4D94A443BDA467B4D9EBBE43FC"
    },
    "cell_type" : "code",
    "source" : "wordFileNameOnes.count",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res93: Long = 173336\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "173336"
      },
      "output_type" : "execute_result",
      "execution_count" : 53
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "DB9A436FE9DD48C18E0C1B37B6E73999"
    },
    "cell_type" : "code",
    "source" : "wordFileNameOnes.take(10).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "((,midsummersnightsdream),1)\n((A,midsummersnightsdream),1)\n((MIDSUMMER,midsummersnightsdream),1)\n((NIGHT,midsummersnightsdream),1)\n((S,midsummersnightsdream),1)\n((DREAM,midsummersnightsdream),1)\n((DRAMATIS,midsummersnightsdream),1)\n((PERSONAE,midsummersnightsdream),1)\n((THESEUS,midsummersnightsdream),1)\n((Duke,midsummersnightsdream),1)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 54
    } ]
  }, {
    "metadata" : {
      "id" : "2E98B66DEE2140378F9FA7377ADF1A9A"
    },
    "cell_type" : "markdown",
    "source" : "I find this hard to read and shortly I'll show you a much more elegant, alternative syntax.\n\nLet's understand the difference between `map` and `flatMap`. If I called `fileContents.map`, it would return exactly _one_ new record for each record in _fileContents_. What I actually want instead are new records for each word-fileName combination, a significantly larger number (but the data in each record will be much smaller). \n\nUsing `fileContents.flatMap` gives me what I want. Instead of returning one output record for each input record, a `flatMap` returns a _collection_ of new records, zero or more, for _each_ input record. These collections are then _flattened_ into one big collection, another `RDD` in this case."
  }, {
    "metadata" : {
      "id" : "FB33105E2CF641E7AE3BB637A5A0AA82"
    },
    "cell_type" : "markdown",
    "source" : "What should `flatMap` actually do with each record? I pass a _function_ to define what to do. I'm using an unnamed or _anonymous_ function. The syntax is `argument_list => body`:\n\n```scala\nlocation_contents_tuple2 => \n    val words = ...\n    ...\n}\n```\n\nI have a single argument, the record, which I named `location_contents_tuple2`, a verbose way to say that it's a two-element tuple with an input file's location and contents. I don't require a type parameter after `location_contents_tuple2`, because it's inferred by Scala. The `=>` \"arrow\" separates the argument list from the body, which appears on the next few lines.\n\nWhen a function takes more than one argument or you add explicit type _annotations_ (e.g., `: (String,Int,Double)`), then you need parentheses. Here are three examples:\n\n```scala\n(some_tuple3: (String,Int,Double)) => ...\n(arg1, arg2, arg3) => ...\n(arg1: String, arg2: Int, arg3: Double) => ...\n```\nWe're letting Scala infer the argument type in our case, `(String,String)`."
  }, {
    "metadata" : {
      "id" : "1053B25F426A40558F2F51C474EC8998"
    },
    "cell_type" : "markdown",
    "source" : "Wait, I said we're passing a function as an argument to `flatMap`. If so, why am I using braces `{...}` around this function argument instead of parentheses `(...)` like you would normally expect when passing arguments to a method like `flatMap`? \n\nIt's because Scala lets us substitute braces instead of parentheses so we have the familiar block-like syntax `{...}` we know and love for `if` and `for` expressions. I could use either braces or parentheses here. The convention in the Scala community is to use braces for a multi-line anonymous function and to use parentheses for a single expression when it fits on the same line."
  }, {
    "metadata" : {
      "id" : "E6C1137A823349E082F92E38C1F3FACF"
    },
    "cell_type" : "markdown",
    "source" : "Now, for each `location_contents_tuple2`, I access the _first_ element using the `_1` method and the _second_ element using `_2`.\n\nThe file `contents` is in the second element. I split it by calling Java's `String.split` method, which takes a _regular expression_ string. Here I specify a regular expression for one or more, non-alphanumeric characters. `String.split` returns an `Array[String]` of the words. \n\n```scala\nval words = location_contents_tuple2._2.split(\"\"\"\\W+\"\"\")\n```\n\nFor the first tuple element, I extract the file name at the end of the location path. This isn't necessary, but it makes the output more readable if I remove the long, common prefix from the path. \n\n```scala\nval fileName = location_contents_tuple2._1.split(pathSeparator).last\n```"
  }, {
    "metadata" : {
      "id" : "CEF8F60B111D4EE8B4F08C0DAF4E3701"
    },
    "cell_type" : "markdown",
    "source" : "Finally, still inside the anonymous function passed to `flatMap`, I use Scala's `Array.map` (_not_ `RDD.map`) to transform each `word` into a tuple of the form `((word, fileName), 1)`.\n\n```scala\nwords.map(word => ((word, fileName), 1))\n```\n\nWhy did I embed a tuple of `(word, fileName)` inside the \"outer\" tuple with a `1` as the second element? Why not just write a three-element tuple, `(word, fileName, 1)`? It's because I'll use the `(word, fileName)` as a _key_ in the next step, where I'll find all unique word-fileName combinations (using the equivalent of a `group by` statement). So, using the nested `(word, fileName)` as my _key_ is most convenient. The `1` _value_ is a \"seed\" count, which I'll use to count the occurrences of the unique `(word, fileName)` pairs."
  }, {
    "metadata" : {
      "id" : "CB365E8B50C44DC88A0A4FB973D1AF0D"
    },
    "cell_type" : "markdown",
    "source" : "> **Notes:**\n> * For historical reasons, tuple indices start at 1, not 0. Arrays and other Scala collections index from 0.\n> * I said previously that _method_ arguments have to be declared with types. That's usually _not_ required for _function_ arguments, as here.\n> * Another benefit of triple-quoted strings that makes them nice for regular expressions is that you don't have to escape regular expression metacharacters, like `\\W`. If I used a single-quoted string, I would have to write it as `\"\\\\W+\"`. Your choice..."
  }, {
    "metadata" : {
      "id" : "08AA193D2F2043FA831DD736760C6CB8"
    },
    "cell_type" : "markdown",
    "source" : "Let's count the number of records we have and look at a few of the lines. We'll use the `RDD.take` method to grab the first 10 lines, then loop over them and print them."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "41FF9807CE0B4FB59C59DEEA48A7E8A2"
    },
    "cell_type" : "code",
    "source" : "wordFileNameOnes.count",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res53: Long = 173336\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "173336"
      },
      "output_type" : "execute_result",
      "execution_count" : 30
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "AA2C8482A4874A2584B6DE64D387FE7D"
    },
    "cell_type" : "code",
    "source" : "wordFileNameOnes.take(10).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "((,asyoulikeit),1)\n((AS,asyoulikeit),1)\n((YOU,asyoulikeit),1)\n((LIKE,asyoulikeit),1)\n((IT,asyoulikeit),1)\n((DRAMATIS,asyoulikeit),1)\n((PERSONAE,asyoulikeit),1)\n((DUKE,asyoulikeit),1)\n((SENIOR,asyoulikeit),1)\n((living,asyoulikeit),1)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 31
    } ]
  }, {
    "metadata" : {
      "id" : "8BA9250ABA92441FA406F42C09C867AD"
    },
    "cell_type" : "markdown",
    "source" : "We asked for results, so we forced Spark to run a job to compute results. Spark pipelines, like `iiFirstPass1` are _lazy_; nothing is computed until we ask for results. \n\nWhen you're learning, it's useful to print some data to better understand what's happening. Just be aware of the extra overhead of running lots of Spark jobs.\n\nThe first record shown has \"\" (blank) as the word:\n\n```\n((,asyoulikeit),1)\n```\n\nAlso, some words have all capital letters:\n\n```\n((DRAMATIS,asyoulikeit),1)\n```\n\n(You can see where these capitalized words occur if you look in the original files.) Later on, We'll filter out the blank-word records and use lower case for all words."
  }, {
    "metadata" : {
      "id" : "82C274F9C74448B7817C504E07F920E3"
    },
    "cell_type" : "markdown",
    "source" : "Now, let's join all the unique `(word,fileName)` pairs together. "
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "8DD3365A4AA2402A9D2556F995961C00"
    },
    "cell_type" : "code",
    "source" : "val uniques = wordFileNameOnes.reduceByKey((count1, count2) => count1 + count2)\nuniques",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "uniques: org.apache.spark.rdd.RDD[((String, String), Int)] = ShuffledRDD[13] at reduceByKey at <console>:63\nres97: org.apache.spark.rdd.RDD[((String, String), Int)] = ShuffledRDD[13] at reduceByKey at <console>:63\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "ShuffledRDD[13] at reduceByKey at &lt;console&gt;:63"
      },
      "output_type" : "execute_result",
      "execution_count" : 55
    } ]
  }, {
    "metadata" : {
      "id" : "340390D700F34A198E099DF39FBBC74D"
    },
    "cell_type" : "markdown",
    "source" : "In SQL you would use `GROUP BY` for this (including SQL queries you might write with Spark's [DataFrame](http://spark.apache.org/docs/latest/sql-programming-guide.html) API). However, in the `RDD` API, this is too expensive for our needs, because we don't care about the groups themselves, the long list of repeated `(word,fileName)` pairs. We only care about how many elements are in each group, that is their _size_. That's the purpose of the `1` in the tuples and the use of `RDD.reduceByKey`. It brings together all records with the same key, the unique `(word,fileName)` pairs, and then applies the anonymous function to \"reduce\" the values, the `1`s. I simply sum them up to compute the group counts.\n\nNote that the anonymous function `reduceByKey` expects must take two arguments, so I need parentheses around the argument list. Since this function fits on the same line, I used parentheses for `reduceByKey`, instead of braces.\n\n> **Note:** All the `*ByKey` methods operate on two-element tuples and treat the first element as the key, by default."
  }, {
    "metadata" : {
      "id" : "93409D472EBF4C07BD74EA733D4D6296"
    },
    "cell_type" : "markdown",
    "source" : "How many are there? Let's see a few:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "17D9B46320474C17BD71A9EDA0F717E9"
    },
    "cell_type" : "code",
    "source" : "uniques.count",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res99: Long = 27276\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "27276"
      },
      "output_type" : "execute_result",
      "execution_count" : 56
    } ]
  }, {
    "metadata" : {
      "id" : "DC87537AD03041868BF85C6645D4B72D"
    },
    "cell_type" : "markdown",
    "source" : "As you would expect from a `GROUP BY`-like statement, the number of records is smaller than before. There are about 1/6 as many records now, meaning that on average, each `(word,fileName)` combination appears 6 times."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "15493734ED804BC484BF3DF21DEBDF6F"
    },
    "cell_type" : "code",
    "source" : "uniques.take(30).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "((dexterity,merrywivesofwindsor),1)\n((crest,asyoulikeit),1)\n((whole,comedyoferrors),2)\n((lamb,muchadoaboutnothing),2)\n((force,muchadoaboutnothing),2)\n((letter,merrywivesofwindsor),19)\n((blunt,tamingoftheshrew),3)\n((bestow,asyoulikeit),1)\n((rear,midsummersnightsdream),1)\n((crossing,tamingoftheshrew),1)\n((wronged,merrywivesofwindsor),4)\n((S,tamingoftheshrew),10)\n((HIPPOLYTA,midsummersnightsdream),19)\n((revolve,twelfthnight),1)\n((er,merrywivesofwindsor),11)\n((renown,asyoulikeit),1)\n((cubiculo,twelfthnight),1)\n((All,twelfthnight),3)\n((power,loveslabourslost),8)\n((Albeit,asyoulikeit),1)\n((lips,tamingoftheshrew),3)\n((upshot,twelfthnight),1)\n((approach,midsummersnightsdream),4)\n((mean,muchadoaboutnothing),5)\n((embossed,asyoulikeit),1)\n((varnish,loveslabourslost),2)\n((Apollo,midsummersnightsdream),1)\n((spangled,midsummersnightsdream),1)\n((gentlemen,comedyoferrors),1)\n((Rebuke,loveslabourslost),1)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 34
    } ]
  }, {
    "metadata" : {
      "id" : "883847887BD84C2C8AFF71A63A87638F"
    },
    "cell_type" : "markdown",
    "source" : "For _inverted index_, we want our final keys to be the words themselves, so let's restructure the tuples from `((word,fileName),count)` to `(word,(fileName,count))`. Now, I'll still output two-element, key-value tuples, but the `word` will be the key and the `(fileName,count)` tuple will be the value."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B945394B877C4C1D8C601E446D5A856B"
    },
    "cell_type" : "code",
    "source" : "val words = uniques.map { word_file_count_tup3 => \n    (word_file_count_tup3._1._1, (word_file_count_tup3._1._2, word_file_count_tup3._2)) \n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "words: org.apache.spark.rdd.RDD[(String, (String, Int))] = MapPartitionsRDD[14] at map at <console>:65\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 57
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true,
      "id" : "0677B45945B84EFFB81120DC3E329253"
    },
    "cell_type" : "code",
    "source" : "rdd.mapPartitions { partition =>\n  val jdbc = openJDBC\n  partition.foreach(record => jdbc.writeToMyDatabase())\n}",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "D2412BFCCAE942448B2F0F2A83755325"
    },
    "cell_type" : "markdown",
    "source" : "The nested tuple methods, e.g., `_1._2`, are hard to read, making the logic somewhat obscure. We'll see a beautiful and elegant alternative shortly."
  }, {
    "metadata" : {
      "id" : "8017FCDB61244ABF982FEBD7EDE2FE30"
    },
    "cell_type" : "markdown",
    "source" : "Now I'll use an actual `group by` operation, because I now need to retain the groups. Calling `RDD.groupByKey` uses the first tuple element, now just the `words`, to bring together all occurrences of the unique words. Next, I'll sort the result by word, ascending alphabetically."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "3A55E6B49D8E4E1D85F8DE4B3715F750"
    },
    "cell_type" : "code",
    "source" : "val wordGroups = words.groupByKey.sortByKey(ascending = true)\nwordGroups",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "wordGroups: org.apache.spark.rdd.RDD[(String, Iterable[(String, Int)])] = ShuffledRDD[18] at sortByKey at <console>:67\nres102: org.apache.spark.rdd.RDD[(String, Iterable[(String, Int)])] = ShuffledRDD[18] at sortByKey at <console>:67\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "ShuffledRDD[18] at sortByKey at &lt;console&gt;:67"
      },
      "output_type" : "execute_result",
      "execution_count" : 58
    } ]
  }, {
    "metadata" : {
      "id" : "EF406143D451401B938CC7CBC3102B54"
    },
    "cell_type" : "markdown",
    "source" : "Note that each group is actually a Scala [Iterable](http://www.scala-lang.org/api/current/index.html#scala.collection.Iterable), i.e., an abstraction for some sort of collection. (It's actually a Spark-defined, private collection type called a `CompactBuffer`.)"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0591CBBB7ED04BC18313CC4B8DD11F22"
    },
    "cell_type" : "code",
    "source" : "wordGroups.count",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res104: Long = 11951\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "11951"
      },
      "output_type" : "execute_result",
      "execution_count" : 59
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0238CC44E40444DDB43D53ACCBBA6513"
    },
    "cell_type" : "code",
    "source" : "wordGroups.take(30).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "(,CompactBuffer((tamingoftheshrew,1), (asyoulikeit,1), (merrywivesofwindsor,1), (comedyoferrors,1), (midsummersnightsdream,1), (twelfthnight,1), (loveslabourslost,1), (muchadoaboutnothing,1)))\n(A,CompactBuffer((loveslabourslost,78), (midsummersnightsdream,39), (muchadoaboutnothing,31), (merrywivesofwindsor,38), (comedyoferrors,42), (asyoulikeit,34), (twelfthnight,47), (tamingoftheshrew,59)))\n(ABOUT,CompactBuffer((muchadoaboutnothing,18)))\n(ACT,CompactBuffer((asyoulikeit,22), (comedyoferrors,11), (tamingoftheshrew,12), (loveslabourslost,9), (muchadoaboutnothing,17), (twelfthnight,18), (merrywivesofwindsor,23), (midsummersnightsdream,9)))\n(ADAM,CompactBuffer((asyoulikeit,16)))\n(ADO,CompactBuffer((muchadoaboutnothing,18)))\n(ADRIANA,CompactBuffer((comedyoferrors,85)))\n(ADRIANO,CompactBuffer((loveslabourslost,111)))\n(AEGEON,CompactBuffer((comedyoferrors,20)))\n(AEMELIA,CompactBuffer((comedyoferrors,16)))\n(AEMILIA,CompactBuffer((comedyoferrors,3)))\n(AEacides,CompactBuffer((tamingoftheshrew,1)))\n(AEgeon,CompactBuffer((comedyoferrors,7)))\n(AEgle,CompactBuffer((midsummersnightsdream,1)))\n(AEmilia,CompactBuffer((comedyoferrors,4)))\n(AEsculapius,CompactBuffer((merrywivesofwindsor,1)))\n(AGUECHEEK,CompactBuffer((twelfthnight,2)))\n(ALL,CompactBuffer((midsummersnightsdream,2), (tamingoftheshrew,2)))\n(AMIENS,CompactBuffer((asyoulikeit,16)))\n(ANDREW,CompactBuffer((twelfthnight,104)))\n(ANGELO,CompactBuffer((comedyoferrors,36)))\n(ANN,CompactBuffer((merrywivesofwindsor,1)))\n(ANNE,CompactBuffer((merrywivesofwindsor,27)))\n(ANTIPHOLUS,CompactBuffer((comedyoferrors,195)))\n(ANTONIO,CompactBuffer((muchadoaboutnothing,32), (twelfthnight,32)))\n(ARMADO,CompactBuffer((loveslabourslost,111)))\n(AS,CompactBuffer((asyoulikeit,24)))\n(AUDREY,CompactBuffer((asyoulikeit,18)))\n(Abate,CompactBuffer((midsummersnightsdream,1), (loveslabourslost,1)))\n(Abbess,CompactBuffer((comedyoferrors,2)))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 60
    } ]
  }, {
    "metadata" : {
      "id" : "2A2C2E4A954A40718D3E9059EAE0D08C"
    },
    "cell_type" : "markdown",
    "source" : "Finally, let's clean up these `CompactBuffers`. Let's convert each to a Scala [Vector](http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Vector) (a collection with _O(1)_ performance for most operations), then sort it _descending_ by count, so the locations that mention the corresponding word the _most_ appear _first_ in the list. (Think about how you would want a search tool to work...) \n\nNote we're using `Vector.sortBy`, not an `RDD` sorting method. It takes a function that accepts each collection element and returns something used to sort the collection. By returning `(-fileNameCountTuple2._2, fileNameCountTuple2)`, I effectively say, \"sort by the counts _descending_ first, then sort by the file names.\" Why does `-fileNameCountTuple2._2` cause counts to be sorted descending, because I'm returning the negative of the value, so larger counts will be less than smaller counts, e.g., `-3 < -2`.\n\nFinally, I take the resulting `Vector` and make a comma-separated string with the elements, using the helper method `mkString`.\n\nWhat's `RDD.mapValues`? I could use `RDD.map`, but I'm not changing the keys (the words), so rather than have to deal with the tuple with both elements, `mapValues` just passes in the value part of the tuple and reconstructs new `(key,value)` tuples with the new value that my function returns. So, `mapValues` is more convenient to use than `map` when I have two-element tuples and I'm not modifying the keys."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "016D0589F20E40B58212D382F9A2FEC8"
    },
    "cell_type" : "code",
    "source" : "val iiFirstPass2 = wordGroups.mapValues { iterable => \n    val vect = iterable.toVector.sortBy { file_count_tup2 => \n        (-file_count_tup2._2, file_count_tup2._1)\n    }\n    vect.mkString(\",\")\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "iiFirstPass2: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[19] at mapValues at <console>:69\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 61
    } ]
  }, {
    "metadata" : {
      "id" : "7C7007C29F564BBB852779540111D12D"
    },
    "cell_type" : "markdown",
    "source" : "We're done! The number of records is the same as for `wordGroups` (do you understand why?), so let's just see see some of the records."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9F721446ECFC4A5A8A82ECC97D49BF17"
    },
    "cell_type" : "code",
    "source" : "iiFirstPass2.take(30).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "(,(asyoulikeit,1),(comedyoferrors,1),(loveslabourslost,1),(merrywivesofwindsor,1),(midsummersnightsdream,1),(muchadoaboutnothing,1),(tamingoftheshrew,1),(twelfthnight,1))\n(A,(loveslabourslost,78),(tamingoftheshrew,59),(twelfthnight,47),(comedyoferrors,42),(midsummersnightsdream,39),(merrywivesofwindsor,38),(asyoulikeit,34),(muchadoaboutnothing,31))\n(ABOUT,(muchadoaboutnothing,18))\n(ACT,(merrywivesofwindsor,23),(asyoulikeit,22),(twelfthnight,18),(muchadoaboutnothing,17),(tamingoftheshrew,12),(comedyoferrors,11),(loveslabourslost,9),(midsummersnightsdream,9))\n(ADAM,(asyoulikeit,16))\n(ADO,(muchadoaboutnothing,18))\n(ADRIANA,(comedyoferrors,85))\n(ADRIANO,(loveslabourslost,111))\n(AEGEON,(comedyoferrors,20))\n(AEMELIA,(comedyoferrors,16))\n(AEMILIA,(comedyoferrors,3))\n(AEacides,(tamingoftheshrew,1))\n(AEgeon,(comedyoferrors,7))\n(AEgle,(midsummersnightsdream,1))\n(AEmilia,(comedyoferrors,4))\n(AEsculapius,(merrywivesofwindsor,1))\n(AGUECHEEK,(twelfthnight,2))\n(ALL,(midsummersnightsdream,2),(tamingoftheshrew,2))\n(AMIENS,(asyoulikeit,16))\n(ANDREW,(twelfthnight,104))\n(ANGELO,(comedyoferrors,36))\n(ANN,(merrywivesofwindsor,1))\n(ANNE,(merrywivesofwindsor,27))\n(ANTIPHOLUS,(comedyoferrors,195))\n(ANTONIO,(muchadoaboutnothing,32),(twelfthnight,32))\n(ARMADO,(loveslabourslost,111))\n(AS,(asyoulikeit,24))\n(AUDREY,(asyoulikeit,18))\n(Abate,(loveslabourslost,1),(midsummersnightsdream,1))\n(Abbess,(comedyoferrors,2))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 62
    } ]
  }, {
    "metadata" : {
      "id" : "D54E35935C124319897560C95FED8D8D"
    },
    "cell_type" : "markdown",
    "source" : "Okay. Looks reasonable. \n\nNext, I'll refine the code using a very powerful feature, _pattern matching_, which both makes the code more concise and easier to understand. It's my *favorite* feature of Scala.\n\nBefore I do that, try a few refinements on your own.\n\n**Exercises:**\n\n* Add a filter statement to remove the first entry for the blank word \"\". You could do this one of two ways, using another \"step\" with [RDD.filter](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD) (search the [Scaladoc page]((http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD) for the `filter` method), _or_ using the similar Scala collections method, [scala.collection.Seq.filter](http://www.scala-lang.org/api/current/index.html#scala.collection.Seq). Both versions take a _predicate_ function, one that returns `true` if the record should be _retained_ and `false` otherwise. Do you think one choice is better than the other? Why? Or, are they basically the same? Reasons might include code comprehension and performance of one over the other.\n* Convert all words to lower case. Calling `toLowerCase` on a string is all you need. Where's a good place to insert this logic?\n\nI'll implement both changes in subsequent refinements below."
  }, {
    "metadata" : {
      "id" : "548A5954DA12488B8A0E641AF902DB2D"
    },
    "cell_type" : "markdown",
    "source" : "> **NOTE:** If you would prefer to make a copy of the code in a new cell, use the _Insert_ menu above to add cells. Or, learn another keyboard shortcut; `ESC` (escape key), followed by `A` for insert before or `B` for insert after. Then hit return to edit. Note the toolbar pop-down for setting the format of the cell. This cell you're reading is _Markdown_. Make sure to use _Code_ for your source code cells."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "F8DFDE55DFC542758E4869AB319A3B81"
    },
    "cell_type" : "code",
    "source" : "val iiFirstPass1 = sc.wholeTextFiles(shakespeare.toString).\n    flatMap { location_contents_tuple2 => \n        val words = location_contents_tuple2._2.toLowerCase.split(\"\"\"\\W+\"\"\")\n        val words2 = words.filter(_ != \"\")\n        val fileName = location_contents_tuple2._1.split(pathSeparator).last\n        words2.map(word => ((word, fileName), 1))\n    }.\n    reduceByKey((count1, count2) => count1 + count2).\n    map { word_file_count_tup3 => \n        (word_file_count_tup3._1._1, (word_file_count_tup3._1._2, word_file_count_tup3._2)) \n    }.\n    groupByKey.\n    sortByKey(ascending = true).\n    mapValues { iterable => \n        val vect = iterable.toVector.sortBy { file_count_tup2 => \n            (-file_count_tup2._2, file_count_tup2._1)\n        }\n        vect.mkString(\",\")\n    }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "iiFirstPass1: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[29] at mapValues at <console>:80\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 63
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "99F32FA708704775B8E7F05E3F9C2255"
    },
    "cell_type" : "code",
    "source" : "iiFirstPass1.take(30).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "(a,(loveslabourslost,507),(merrywivesofwindsor,494),(muchadoaboutnothing,492),(asyoulikeit,461),(tamingoftheshrew,445),(twelfthnight,416),(midsummersnightsdream,281),(comedyoferrors,254))\n(abandon,(asyoulikeit,4),(tamingoftheshrew,1),(twelfthnight,1))\n(abate,(loveslabourslost,1),(midsummersnightsdream,1),(tamingoftheshrew,1))\n(abatement,(twelfthnight,1))\n(abbess,(comedyoferrors,8))\n(abbey,(comedyoferrors,9))\n(abbominable,(loveslabourslost,1))\n(abbreviated,(loveslabourslost,1))\n(abed,(asyoulikeit,1),(twelfthnight,1))\n(abetting,(comedyoferrors,1))\n(abhominable,(loveslabourslost,1))\n(abhor,(asyoulikeit,1),(comedyoferrors,1),(loveslabourslost,1),(merrywivesofwindsor,1),(muchadoaboutnothing,1))\n(abhors,(twelfthnight,2))\n(abide,(merrywivesofwindsor,3),(midsummersnightsdream,2))\n(abides,(muchadoaboutnothing,1))\n(ability,(muchadoaboutnothing,1),(twelfthnight,1))\n(abject,(comedyoferrors,1),(tamingoftheshrew,1))\n(abjure,(midsummersnightsdream,1))\n(abjured,(tamingoftheshrew,1),(twelfthnight,1))\n(able,(merrywivesofwindsor,4),(midsummersnightsdream,2),(asyoulikeit,1),(comedyoferrors,1),(tamingoftheshrew,1))\n(aboard,(comedyoferrors,5),(tamingoftheshrew,1))\n(abode,(tamingoftheshrew,1))\n(abominable,(asyoulikeit,1),(merrywivesofwindsor,1))\n(abortive,(loveslabourslost,1))\n(abound,(midsummersnightsdream,1))\n(about,(muchadoaboutnothing,35),(merrywivesofwindsor,27),(twelfthnight,10),(tamingoftheshrew,9),(asyoulikeit,7),(comedyoferrors,7),(midsummersnightsdream,7),(loveslabourslost,6))\n(above,(merrywivesofwindsor,6),(twelfthnight,6),(tamingoftheshrew,4),(loveslabourslost,3),(asyoulikeit,1),(comedyoferrors,1),(muchadoaboutnothing,1))\n(abraham,(merrywivesofwindsor,2))\n(abridgement,(midsummersnightsdream,1))\n(abroad,(loveslabourslost,2),(tamingoftheshrew,1))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 64
    } ]
  }, {
    "metadata" : {
      "id" : "BC161EB30C3B4F4EA5E341E88523BE8C"
    },
    "cell_type" : "markdown",
    "source" : "## Pattern Matching\nWe've studied a real program and we've learned quite a bit of Scala. Let's improve it with my favorite Scala feature, _pattern matching_.\n\nHere's the \"first pass\" version again for easy reference."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "DA1A70091E8E4407A223F8AB9E2F1E62"
    },
    "cell_type" : "code",
    "source" : "val iiFirstPass1b = sc.wholeTextFiles(shakespeare.toString).\n    flatMap { location_contents_tuple2 => \n        val words = location_contents_tuple2._2.split(\"\"\"\\W+\"\"\")\n        val fileName = location_contents_tuple2._1.split(pathSeparator).last\n        words.map(word => ((word, fileName), 1))\n    }.\n    reduceByKey((count1, count2) => count1 + count2).\n    map { word_file_count_tup3 => \n        (word_file_count_tup3._1._1, (word_file_count_tup3._1._2, word_file_count_tup3._2)) \n    }.\n    groupByKey.\n    sortByKey(ascending = true).\n    mapValues { iterable => \n        val vect = iterable.toVector.sortBy { file_count_tup2 => \n            (-file_count_tup2._2, file_count_tup2._1)\n        }\n        vect.mkString(\",\")\n    }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "iiFirstPass1b: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[35] at mapValues at <console>:80\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 42
    } ]
  }, {
    "metadata" : {
      "id" : "B776C7F5F9E04F5B8D15EEEA2B1CDAC2"
    },
    "cell_type" : "markdown",
    "source" : "Now here is a new implementation that uses _pattern matching_. \n\nI've also made two other additions, the solutions to the last exercises, which remove empty words \"\" and fix mixed capitalization, using the following additions:\n* `filter(word => word.size > 0)` to remove the empty words. (In Spark and Scala collections, `filter` has the positive sense; what should be retained?) It's indicated by the comment `// #1`.\n* `word.toLowerCase` to convert all words to lower case uniformly, so that words like HAMLET, Hamlet, and hamlet in the original texts are treated as the same, since we're counting word occurrences. See comment `// #2`."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4AC1B06955A74550AF9304053604DEEC"
    },
    "cell_type" : "code",
    "source" : "val ii1 = sc.wholeTextFiles(shakespeare.toString).\n  flatMap {\n        case (location, contents) => \n            val words = contents.split(\"\"\"\\W+\"\"\").\n                filter(word => word.size > 0)                      // #1\n            val fileName = location.split(pathSeparator).last\n            words.map(word => ((word.toLowerCase, fileName), 1))   // #2\n    }.\n    reduceByKey((count1, count2) => count1 + count2).\n    map { \n        case ((word, fileName), count) => (word, (fileName, count)) \n    }.\n    groupByKey.\n    sortByKey(ascending = true).\n    mapValues { iterable => \n        val vect = iterable.toVector.sortBy { \n            case (fileName, count) => (-count, fileName) \n        }\n        vect.mkString(\",\")\n    }.\n    map { case (key, value) => (key.toUpperCase, value.toLowerCase) \n    }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "ii1: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[50] at map at <console>:87\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 73
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B62E8C2FDBFD46B49A3A1FFC7CFA02AC"
    },
    "cell_type" : "code",
    "source" : "ii1.take(10).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "(A,(loveslabourslost,507),(merrywivesofwindsor,494),(muchadoaboutnothing,492),(asyoulikeit,461),(tamingoftheshrew,445),(twelfthnight,416),(midsummersnightsdream,281),(comedyoferrors,254))\n(ABANDON,(asyoulikeit,4),(tamingoftheshrew,1),(twelfthnight,1))\n(ABATE,(loveslabourslost,1),(midsummersnightsdream,1),(tamingoftheshrew,1))\n(ABATEMENT,(twelfthnight,1))\n(ABBESS,(comedyoferrors,8))\n(ABBEY,(comedyoferrors,9))\n(ABBOMINABLE,(loveslabourslost,1))\n(ABBREVIATED,(loveslabourslost,1))\n(ABED,(asyoulikeit,1),(twelfthnight,1))\n(ABETTING,(comedyoferrors,1))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 74
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true,
      "id" : "8F6101EC8BD04430831705BF43D03644"
    },
    "cell_type" : "code",
    "source" : "",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab2040086508-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "345E7B7DC2E540CF87E4006F20A7545E"
    },
    "cell_type" : "code",
    "source" : "List(\"one\", (3, 3.14), 3L).map {// x => x match {\n    case \"one\" => \"found one\"\n    case s: String => \"found STring\"\n    case l: Long => \"found long\"\n    case (2, x) => \"found (2,...)\"\n    case (_, x) => \"found (_,...)\"\n//}\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res126: List[String] = List(found one, found (_,...), found long)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon2f31a4bdbb9e7b8f5aca8820127f3136&quot;,&quot;dataInit&quot;:[{&quot;string value&quot;:&quot;found one&quot;},{&quot;string value&quot;:&quot;found (_,...)&quot;},{&quot;string value&quot;:&quot;found long&quot;}],&quot;genId&quot;:&quot;2040086508&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tabs'], \n      function(playground, _magictabs) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictabs,\n    \"o\": {}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <div>\n          <ul class=\"nav nav-tabs\" id=\"ul2040086508\"><li>\n                <a href=\"#tab2040086508-0\"><i class=\"fa fa-table\"/></a>\n              </li><li>\n                <a href=\"#tab2040086508-1\"><i class=\"fa fa-cubes\"/></a>\n              </li></ul>\n\n          <div class=\"tab-content\" id=\"tab2040086508\"><div class=\"tab-pane\" id=\"tab2040086508-0\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon27fac63a1153085920fb77c33303e317&quot;,&quot;dataInit&quot;:[{&quot;string value&quot;:&quot;found one&quot;},{&quot;string value&quot;:&quot;found (_,...)&quot;},{&quot;string value&quot;:&quot;found long&quot;}],&quot;genId&quot;:&quot;970564054&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"string value\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon6dcb30a0515d34e9ac3c333bace8bb7c&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon30cf8fdbc2022da2432e89f2bc380a45&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div><div class=\"tab-pane\" id=\"tab2040086508-1\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon06d75bd6f03ea3083dcea84f68be69f8&quot;,&quot;dataInit&quot;:[{&quot;string value&quot;:&quot;found one&quot;},{&quot;string value&quot;:&quot;found (_,...)&quot;},{&quot;string value&quot;:&quot;found long&quot;}],&quot;genId&quot;:&quot;1552108457&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pivotChart'], \n      function(playground, _magicpivotChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpivotChart,\n    \"o\": {\"width\":600,\"height\":400,\"derivedAttributes\":{},\"extraOptions\":{}}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon10bd8c809fdb0354eaec37a582969dcc&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonab06902eb36492acb1f2c3e41b503c55&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div></div>\n        </div>\n      </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 72
    } ]
  }, {
    "metadata" : {
      "id" : "8881B4F7C5914C4380FCE7C450174D29"
    },
    "cell_type" : "markdown",
    "source" : "}Compare with your exercise solutions above. I added the filtering inside the function passed to `flatMap`. My choice reduces the number of output records from `flatMap` by at most one record per input line, which shouldn't have a significant impact on performance. Filtering itself adds some extra overhead. \n\nAlso, the way Spark implements steps like `map`, `flatMap`, `filter`, it would incur about the same overhead if I used `RDD.filter` instead. Note that we could also do the filtering later in the pipeline, after `groupByKey`, for example. So, whichever approach you implemented above is probably fine. You could do performance profiling of the different approaches, but you may not notice a significance difference until you use very large input data sets."
  }, {
    "metadata" : {
      "id" : "AEFCD90AF8BF4D9C8944AAAC966D885D"
    },
    "cell_type" : "markdown",
    "source" : "Let's verify we still get reasonable results. Now I'll use Spark's [DataFrame](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.DataFrame) API for its convenient display options. `DataFrames` are part of [Spark SQL](http://spark.apache.org/docs/latest/sql-programming-guide.html). We'll start by creating an instance of [SQLContext](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.SQLContext) that we need to access these features."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "ABB91A9A1526418A8BDAFA19CD2DD5FB"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.sql.SQLContext\nval sqlContext = new SQLContext(sc)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.sql.SQLContext\nsqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@e503e44\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 75
    } ]
  }, {
    "metadata" : {
      "id" : "DF19D2277A81408F831B7715AC5A62CD"
    },
    "cell_type" : "markdown",
    "source" : "Now convert the `RDD` to a `DataFrame` with `sqlContext.createDataFrame`, then use `toDF` (convert to another `DataFrame`?) with new names for each \"column\"."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "5E1532F5A88042F685A3E759E749B2E1"
    },
    "cell_type" : "code",
    "source" : "val ii1DF = sqlContext.createDataFrame(ii1).toDF(\"word\", \"locations_counts\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "ii1DF: org.apache.spark.sql.DataFrame = [word: string, locations_counts: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 76
    } ]
  }, {
    "metadata" : {
      "id" : "D047BDFA0EC64794865588169B7BB8D4"
    },
    "cell_type" : "markdown",
    "source" : "If we ask for the value of a DataFrame, Spark Notebook renders it with a paged, table view."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "92EAFF4259D84EAD8076DFE88562A1ED"
    },
    "cell_type" : "code",
    "source" : "ii1DF",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res133: org.apache.spark.sql.DataFrame = [word: string, locations_counts: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon6de8c95e851a4f0363f588fcbfd40353&quot;,&quot;partitionIndexId&quot;:&quot;anon52e95bb92b7f62fce7c92fd3e762d9be&quot;,&quot;numPartitions&quot;:417,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;word&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;locations_counts&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 77
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "C401CCFF8B244318A035975A6AFC41B6"
    },
    "cell_type" : "code",
    "source" : "ii1DF.show(truncate=false, numRows=5)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n|word     |locations_counts                                                                                                                                                                       |\n+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n|A        |(loveslabourslost,507),(merrywivesofwindsor,494),(muchadoaboutnothing,492),(asyoulikeit,461),(tamingoftheshrew,445),(twelfthnight,416),(midsummersnightsdream,281),(comedyoferrors,254)|\n|ABANDON  |(asyoulikeit,4),(tamingoftheshrew,1),(twelfthnight,1)                                                                                                                                  |\n|ABATE    |(loveslabourslost,1),(midsummersnightsdream,1),(tamingoftheshrew,1)                                                                                                                    |\n|ABATEMENT|(twelfthnight,1)                                                                                                                                                                       |\n|ABBESS   |(comedyoferrors,8)                                                                                                                                                                     |\n+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\nonly showing top 5 rows\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 81
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "8155E017145448248295E0EDB873D20D"
    },
    "cell_type" : "code",
    "source" : "ii1DF.printSchema",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "root\n |-- word: string (nullable = true)\n |-- locations_counts: string (nullable = true)\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 82
    } ]
  }, {
    "metadata" : {
      "id" : "BD278B27A85248358992E2C828710B45"
    },
    "cell_type" : "markdown",
    "source" : "Okay, now let's explore the new implementation. I start off as before, by calling `wholeTextFiles`:\n\n```scala\nval ii = sc.wholeTextFiles(shakespeare.toString).\n```"
  }, {
    "metadata" : {
      "id" : "D76E82AA12614AC68EB2234331AF8553"
    },
    "cell_type" : "markdown",
    "source" : "The function I pass to `flatMap` now looks like this:\n\n```scala\nflatMap { \n    case (location, contents) => \n        val words = contents.split(\"\"\"\\W+\"\"\").\n            filter(word => word.size > 0)                      // #1\n        val fileName = location.split(pathSeparator).last\n        words.map(word => ((word.toLowerCase, fileName), 1))   // #2\n}.\n```\n\nCompare it to the previous version (ignoring the enhancements for blank words and capitalization, marked with the \\#1 and \\#2 comments):\n\n```scala\nflatMap { location_contents_tuple2 => \n    val words = location_contents_tuple2._2.split(\"\"\"\\W+\"\"\")\n    val fileName = location_contents_tuple2._1.split(pathSeparator).last\n    words.map(word => ((word, fileName), 1))\n}.\n```    \n\nInstead of `location_contents_tuple2` a variable name for the whole tuple, I wrote `case (location, contents)`. The `case` keyword says I want to _pattern match_ on the object passed to the function. If it's a two-element tuple (and I know it always will be in this case), then _extract_ the first element and assign it to a variable named `location` and extract the second element and assign it to a variable named `contents`.\n\nNow, instead of accessing the location and content with the slighly obscure and verbose `location_contents_tuple2._1` and `location_contents_tuple2._2`, respectively, I use meaningful names, `location` and `contents`. The code becomes more concise and more readable. \n\nI'll explore more pattern matching features below."
  }, {
    "metadata" : {
      "id" : "F6C55F95192341F6844A0B38FB7FAA49"
    },
    "cell_type" : "markdown",
    "source" : "The `reduceByKey` step is unchanged:\n\n```scala\nreduceByKey((count1, count2) => count1 + count2).\n```\n\nTo be clear, this isn't a pattern-matching expression; there is no `case` keyword. It's just a \"regular\" function that takes two arguments, for the two things I'm adding."
  }, {
    "metadata" : {
      "id" : "52B6F792A97945EC918C3700D42AE7D6"
    },
    "cell_type" : "markdown",
    "source" : "My favorite improvement is the next line:\n\n```scala\nmap { \n    case ((word, fileName), count) => (word, (fileName, count)) \n}.\n```\n\nCompare it to the previous, obscure version:\n\n```\nmap { word_file_count_tup3 => \n    (word_file_count_tup3._1._1, (word_file_count_tup3._1._2, word_file_count_tup3._2)) \n}.\n```\n\nThe new implementation makes it clear what I'm doing; just shifting parentheses! That's all it takes to go from the `(word, fileName)` keys with `count` values to `word` keys and `(fileName, count)` values. Note that pattern matching works just fine with nested structures, like `((word, fileName), count)`.\n\nI hope you can appreciate how elegant and concise this expression is! Note how I thought of the next transformation I needed to do in preparation for the final group-by, to switch from `((word, fileName), count)` to `(word, (fileName, count))` and _I just wrote it down exactly as I pictured it!_\n\nCode like this makes writing Scala Spark code a sublime experience for me. I hope it will for you, too ;)"
  }, {
    "metadata" : {
      "id" : "292E580C8360480D9663AE1957D947AC"
    },
    "cell_type" : "markdown",
    "source" : "The next two expressions are unchanged:\n\n```scala\ngroupByKey.\nsortByKey(ascending = true).\n```"
  }, {
    "metadata" : {
      "id" : "5E27729F18C5497CA12FCEF9C971F855"
    },
    "cell_type" : "markdown",
    "source" : "The final `mapValues` now uses pattern matching to sort the `Vector` in each record:\n\n```scala\nmapValues { iterable => \n    val vect = iterable.toVector.sortBy { \n        case (fileName, count) => (-count, fileName) \n    }\n    vect.mkString(\",\")\n}\n```\n\nCompared to the original version, it's again easier to read:\n\n```scala\nmapValues { iterable => \n    val vect = iterable.toVector.sortBy { file_count_tup2 => \n        (-file_count_tup2._2, file_count_tup2._1)\n    }\n    vect.mkString(\",\")\n}\n```"
  }, {
    "metadata" : {
      "id" : "D2C026C6C6E641BD81DEA55690F987AE"
    },
    "cell_type" : "markdown",
    "source" : "The function I pass to `sortBy` returns a tuple used for sorting, with `-count` to force _descending_ numerical sort (biggest first) and `fileName` to secondarily sort by the file name, for equivalent counts. I could ignore file name order and just return `-count` (not a tuple). However, if you need more repeatable output in a distributed system like Spark, say for example to use in unit test validation, then the secondary sorting by file name is handy."
  }, {
    "metadata" : {
      "id" : "C224719DD3084F0A9D81A85E693E40D1"
    },
    "cell_type" : "markdown",
    "source" : "## Our Final Version: Supporting SQL Queries\nTo play with some more Spark, let's write SQL queries to explore the resulting data. \n\nTo do this, let's first refine the output. Instead of creating a string for the list of `(location,count)` pairs, which is opaque to our SQL schema (i.e., just a string), let's \"unzip\" the collection into two arrays, one for the `locations` and one for the `counts`. That way, if we ask for the first element of each array, we'll have nicely separate fields that work better with Spark SQL queries.\n\n\"Zipping\" and \"unzipping\" work like a mechanical zipper. If I have a collection of tuples, say `List[(String, Int)]`, I convert this single collection of \"zippered\" values into two collections (in a tuple) of single values, `(List[String], List[Int])`. Zipping is the inverse operation.\n\nHere is our final implementation, `ii1` rewritten with this change."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "120CBF8222CD4483BB8DD4EBDC7A3ED5"
    },
    "cell_type" : "code",
    "source" : "val ii = sc.wholeTextFiles(shakespeare.toString).\n    flatMap {\n        case (location, contents) => \n            val words = contents.split(\"\"\"\\W+\"\"\").\n                filter(word => word.size > 0)                      // #1\n            val fileName = location.split(pathSeparator).last\n            words.map(word => ((word.toLowerCase, fileName), 1))   // #2\n    }.\n    reduceByKey((count1, count2) => count1 + count2).\n    map { \n        case ((word, fileName), count) => (word, (fileName, count)) \n    }.\n    groupByKey.\n    sortByKey(ascending = true).\n    map {                         // Must use map now, because we'll format new records. \n      case (word, iterable) =>    // Hence, pattern match on the whole input record.\n\n        val vect = iterable.toVector.sortBy { \n            case (fileName, count) => (-count, fileName) \n        }\n\n        // Use `Vector.unzip`, which returns a single, two element tuple, where each\n        // element is a collection, one for the locations and one for the counts. \n        // I use pattern matching to extract these two collections into variables.\n        val (locations, counts) = vect.unzip  \n        \n        // Lastly, I'll compute the total count across all locations and return \n        // a new record with all four fields. The `reduceLeft` method takes a function\n        // that knows how to \"reduce\" the collection down to a final value, working \n        // from the left.\n        val totalCount = counts.reduceLeft((n1,n2) => n1+n2)\n        \n        (word, totalCount, locations, counts)\n    }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "ii: org.apache.spark.rdd.RDD[(String, Int, scala.collection.immutable.Vector[String], scala.collection.immutable.Vector[Int])] = MapPartitionsRDD[74] at map at <console>:82\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 83
    } ]
  }, {
    "metadata" : {
      "id" : "DE48F43EDC0B4FE983B358F999D1F00F"
    },
    "cell_type" : "markdown",
    "source" : "We've changed the ending `mapValues` call to a `map` call, because we'll construct entirely new records, not just new values with the same keys. Hence the full records, two-element tuples are passed in, rather than just the values, so we'll pattern match on the tuple:\n\n\n```scala\n    map {                         // Must use map now, because we'll format new records.\n      case (word, iterable) =>    // Hence, pattern match on the whole input record.\n\n        val vect = iterable.toVector.sortBy { \n            case (fileName, count) => (-count, fileName) \n        }\n```\n\n\nWe have a `Vector[String, Int]` of two-element tuples `(fileName, count)`. We use `Vector.unzip` to create a single, two element tuple, where each element is now a collection, one for the locations and one for the counts. The type is `(Vector[String], Vector[Int])`.\n\nWe can also use pattern matching with assignment! We immediately decompose the two-element tuple:\n\n```scala\n        // I use pattern matching to extract these two collections into variables.\n        val (locations, counts) = vect.unzip  \n```\n\nFinally, it's convenient to know how many locations and counts we have, so we'll compute another new column for the their count and format a four-element tuple as the final output.\n\n```scala\n        // Lastly, I'll compute the total count across all locations and return \n        // a new record with all four fields. The `reduceLeft` method takes a function\n        // that knows how to \"reduce\" the collection down to a final value, working \n        // from the left.\n        val totalCount = counts.reduceLeft((n1,n2) => n1+n2)\n\n        (word, totalCount, locations, counts)\n    }\n```    "
  }, {
    "metadata" : {
      "id" : "1B97941817A049CAA7F89263D1D8BFE6"
    },
    "cell_type" : "markdown",
    "source" : "Okay! Now let's create a [DataFrame](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.DataFrame) with this data. The `toDF` method just returns the same `DataFrame`, but with appropriate names for the columns, instead of the synthesized names that `createDataFrame` generates (e.g., `_c1`, `_c2`, etc.)\n\nCaching the `DataFrame` in memory prevents Spark from recomputing `ii` from the input files _every time_ I write a query!\n\nFinally, to use SQL, I need to \"register\" a temporary table."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "ACACA5AC5DF9489CA03EFE559847B9D5"
    },
    "cell_type" : "code",
    "source" : "val iiDF = sqlContext.createDataFrame(ii).toDF(\"word\", \"total_count\", \"locations\", \"counts\")\niiDF.cache\niiDF.registerTempTable(\"inverted_index\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "iiDF: org.apache.spark.sql.DataFrame = [word: string, total_count: int, locations: array<string>, counts: array<int>]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 85
    } ]
  }, {
    "metadata" : {
      "id" : "B3E7EFA85D784E519ABA70036450AB3F"
    },
    "cell_type" : "markdown",
    "source" : "Let's remind ourselves of the schema:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A0FF2B70D76043318104BAD9ECF67BF5"
    },
    "cell_type" : "code",
    "source" : "iiDF.printSchema",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "root\n |-- word: string (nullable = true)\n |-- total_count: integer (nullable = false)\n |-- locations: array (nullable = true)\n |    |-- element: string (containsNull = true)\n |-- counts: array (nullable = true)\n |    |-- element: integer (containsNull = false)\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 87
    } ]
  }, {
    "metadata" : {
      "id" : "DD372976F9D44EC48FEB02697BF7AE74"
    },
    "cell_type" : "markdown",
    "source" : "The following SQL query extracts the top location by count for each word, as well as the total count across all locations for the word. The Spark SQL dialect supports Hive SQL syntax for extracting elements from arrays, maps, and structs ([details](https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF#LanguageManualUDF-CollectionFunctions)). Here I access the first element (index zero) from each array. "
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B5A8A092E0C84E4E87112E0181CE38B5"
    },
    "cell_type" : "code",
    "source" : ":sql SELECT word, total_count, locations[0] AS top_location, counts[0] AS top_count \nFROM inverted_index \n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import notebook.front.widgets.Sql\nimport notebook.front.widgets.Sql._\nres154: notebook.front.widgets.Sql = <Sql widget>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonb83533afd7a4322a88cf4f07e9579bc7&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p><p data-bind=\"text: value\">\n      <script data-this=\"{&quot;valueId&quot;:&quot;anone24ba4ce964748df7583bc6e074ba51c&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/ req(\n              ['observable', 'knockout'],\n              function (O, ko) {\n                ko.applyBindings({\n                    value: O.makeObservable(valueId)\n                  },\n                  this\n                );\n              }\n            );\n        /*]]>*/</script>\n    </p>"
      },
      "output_type" : "execute_result",
      "execution_count" : 88
    } ]
  }, {
    "metadata" : {
      "id" : "6C6F9CAE64B6461883CB25DCA0575F3F"
    },
    "cell_type" : "markdown",
    "source" : "Unfortunately, a current Spark Notebook bug prevents us from seeing the result of the query, so let's use the Scala API to run it. Note that we'll use a triple-quoted string to make it easy to write the query across several lines. Since we assign the result to a variable, in order to see the table output, we ask for the value of `topLocations` after the assignment."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "7AF28C5FA07B4F2794DB32A75B04B703"
    },
    "cell_type" : "code",
    "source" : "val topLocations = sqlContext.sql(\"\"\"\nSELECT word, total_count, locations[0] AS top_location, counts[0] AS top_count \nFROM inverted_index \n\"\"\")\ntopLocations",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "topLocations: org.apache.spark.sql.DataFrame = [word: string, total_count: int, top_location: string, top_count: int]\nres156: org.apache.spark.sql.DataFrame = [word: string, total_count: int, top_location: string, top_count: int]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anona512ad1c1a5446d143fdee5be1e84d1b&quot;,&quot;partitionIndexId&quot;:&quot;anonacd3a92509fc580ffde4fa03b6eb5cca&quot;,&quot;numPartitions&quot;:417,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;word&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;total_count&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:false,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;top_location&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;top_count&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 89
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true,
      "id" : "8ED0282590954CDB8063E02816635F8F"
    },
    "cell_type" : "code",
    "source" : "df1.join(df2, df1(\"id1\") === df2(\"record_locator\"))  // foo.bar(baz)  ==> foo bar baz",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "C24DF412925D422F963BA25EF2B0676F"
    },
    "cell_type" : "markdown",
    "source" : "A _natural language processing_ (NLP) expert might tell you that _love_, _loved_, _loves_, etc. are really the same word, because they are different conjugations of the verb _to love_ and _love_ is a noun, too. Similarly, should _gloves_ (plural) and _glove_ (singular) be handled differently?\n\nWhat we really should do is extract the _stems_ of these words and use those instead. NLP toolkits handle this _stemming_ for you."
  }, {
    "metadata" : {
      "id" : "D9F7860B6544491B8543ACCE24E1A27A"
    },
    "cell_type" : "markdown",
    "source" : "By the way, `DataFrames.show` has some optional arguments when you don't want to truncate the columns and you want to see a different number of rows than the default of 20."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1C89BA5AA15944DB85EB81C101B5A5E7"
    },
    "cell_type" : "code",
    "source" : "topLocations.show(numRows = 40, truncate = false)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+-----------+-----------+---------------------+---------+\n|word       |total_count|top_location         |top_count|\n+-----------+-----------+---------------------+---------+\n|a          |3350       |loveslabourslost     |507      |\n|abandon    |6          |asyoulikeit          |4        |\n|abate      |3          |loveslabourslost     |1        |\n|abatement  |1          |twelfthnight         |1        |\n|abbess     |8          |comedyoferrors       |8        |\n|abbey      |9          |comedyoferrors       |9        |\n|abbominable|1          |loveslabourslost     |1        |\n|abbreviated|1          |loveslabourslost     |1        |\n|abed       |2          |asyoulikeit          |1        |\n|abetting   |1          |comedyoferrors       |1        |\n|abhominable|1          |loveslabourslost     |1        |\n|abhor      |5          |asyoulikeit          |1        |\n|abhors     |2          |twelfthnight         |2        |\n|abide      |5          |merrywivesofwindsor  |3        |\n|abides     |1          |muchadoaboutnothing  |1        |\n|ability    |2          |muchadoaboutnothing  |1        |\n|abject     |2          |comedyoferrors       |1        |\n|abjure     |1          |midsummersnightsdream|1        |\n|abjured    |2          |tamingoftheshrew     |1        |\n|able       |9          |merrywivesofwindsor  |4        |\n|aboard     |6          |comedyoferrors       |5        |\n|abode      |1          |tamingoftheshrew     |1        |\n|abominable |2          |asyoulikeit          |1        |\n|abortive   |1          |loveslabourslost     |1        |\n|abound     |1          |midsummersnightsdream|1        |\n|about      |108        |muchadoaboutnothing  |35       |\n|above      |22         |merrywivesofwindsor  |6        |\n|abraham    |2          |merrywivesofwindsor  |2        |\n|abridgement|1          |midsummersnightsdream|1        |\n|abroad     |3          |loveslabourslost     |2        |\n|abrogate   |1          |loveslabourslost     |1        |\n|abruptly   |1          |asyoulikeit          |1        |\n|absence    |7          |merrywivesofwindsor  |2        |\n|absent     |5          |asyoulikeit          |2        |\n|absolute   |1          |merrywivesofwindsor  |1        |\n|abstinence |1          |loveslabourslost     |1        |\n|abstract   |1          |merrywivesofwindsor  |1        |\n|abuse      |3          |merrywivesofwindsor  |2        |\n|abused     |11         |twelfthnight         |4        |\n|abuses     |2          |asyoulikeit          |2        |\n+-----------+-----------+---------------------+---------+\nonly showing top 40 rows\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 90
    } ]
  }, {
    "metadata" : {
      "id" : "069FC6B00C0C4AB79121C9A9B1B71DE9"
    },
    "cell_type" : "markdown",
    "source" : "> **Note:** Named Parameters\n\n> I used _named parameters_ here, `show(numRows = 40, truncate = false)`, for legibility. They are optional in Scala, as long as you pass the values in the same order as the parameters are declared. You can also use named parameters to write the arguments in any order you want, not just declaration order. So, I could have just written `(40, false)`, but then you would rightly wonder what `false` means in this context."
  }, {
    "metadata" : {
      "id" : "489DD9FF400A4109BF9B637B99269313"
    },
    "cell_type" : "markdown",
    "source" : "**Exercises:** \n\nSee the <a href=\"#ExerciseSolutions\">Appendix</a> for the solutions to the first two exercises.\n\n* The `glove`, `gloves`, `whate` and `whatever` aren't really the `love` and `hate` we wanted ;) How might you change the query so be more specific.\n* Modify the query to return the top two locations and counts.\n* Before moving on, try writing other queries. Edit the query in the following cell:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9EE20BF733134708B2531403E13C20C4"
    },
    "cell_type" : "code",
    "source" : "val sql1 = sqlContext.sql(\"\"\"\n    SELECT * FROM inverted_index\n\"\"\")\nsql1.show(10, false)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+-----------+-----------+------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------+\n|word       |total_count|locations                                                                                                                                       |counts                                  |\n+-----------+-----------+------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------+\n|a          |3350       |[loveslabourslost, merrywivesofwindsor, muchadoaboutnothing, asyoulikeit, tamingoftheshrew, twelfthnight, midsummersnightsdream, comedyoferrors]|[507, 494, 492, 461, 445, 416, 281, 254]|\n|abandon    |6          |[asyoulikeit, tamingoftheshrew, twelfthnight]                                                                                                   |[4, 1, 1]                               |\n|abate      |3          |[loveslabourslost, midsummersnightsdream, tamingoftheshrew]                                                                                     |[1, 1, 1]                               |\n|abatement  |1          |[twelfthnight]                                                                                                                                  |[1]                                     |\n|abbess     |8          |[comedyoferrors]                                                                                                                                |[8]                                     |\n|abbey      |9          |[comedyoferrors]                                                                                                                                |[9]                                     |\n|abbominable|1          |[loveslabourslost]                                                                                                                              |[1]                                     |\n|abbreviated|1          |[loveslabourslost]                                                                                                                              |[1]                                     |\n|abed       |2          |[asyoulikeit, twelfthnight]                                                                                                                     |[1, 1]                                  |\n|abetting   |1          |[comedyoferrors]                                                                                                                                |[1]                                     |\n+-----------+-----------+------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------+\nonly showing top 10 rows\n\nsql1: org.apache.spark.sql.DataFrame = [word: string, total_count: int, locations: array<string>, counts: array<int>]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 55
    } ]
  }, {
    "metadata" : {
      "id" : "19CA443F73DC490A9373828770C659E9"
    },
    "cell_type" : "markdown",
    "source" : "#### Removing the \"Stop Words\"\nDid you notice that one record we saw above was for the word \"a\". Not very useful if you're using this data for text searching, _sentiment mining_, etc. So called _stop words_, like _a_, _an_, _the_, _he_, _she_, _it_, etc., could also be removed.\n\nRecall the `filter` logic I added to remove \"\", `word => word.size > 0`. I could replace it with `word => keep(word)`, where `keep` is a method that does any additional filtering I want, like removing stop words.\n\n**Exercise:**\n\n* Implement the `keep(word: String):Boolean` method and change the `filter` function to use it. Have `keep` return `false` for a small, hard-coded list of stop words (make up your own list or search for one). (See the <a href=\"#ExerciseSolutions\">Appendix</a> for the solution.)"
  }, {
    "metadata" : {
      "id" : "53E07BA2AC3842E98DD0F66A5CF845EB"
    },
    "cell_type" : "markdown",
    "source" : "## More on Pattern Matching Syntax\nWe've only scratched the surface of pattern matching. Let's explore it some more.\n\nHere's another anonymous function using pattern matching that extends the previous function we passed to `flatMap`:\n\n```scala\n{\n    case (location, \"\") => \n        Array.empty[((String, String), Int)]  // Return an empty array\n    case (location, contents) => \n        val words = contents.split(\"\"\"\\W+\"\"\")\n        val fileName = location.split(pathSep).last\n        words.map(word => ((word, fileName), 1))\n}.\n```\n\nYou can have multiple `case` clauses, some of which might match on specific literal values (\"\" in this case) and others which are more general. The first case clause handles files with no content. The second clause is the same as before.\n\nPattern matching is _eager_. The first successful match in the order as written will win. If you reversed the order here, the `case (location, \"\")` would never match and the compiler would throw an \"unreachable code\" warning for it.\n\nNote that you don't have to put the lines after the `=>` inside braces, `{...}` (although you can). The `=>` and `case` keywords (or the final `}`) are sufficient to mark these blocks. Also, for a single-expression block, like the one for the first case clause, you can put the expression on the same line after the `=>` if you want (and it fits). \n\nFinally, if none of the case clauses matches, then a [MatchError](http://www.scala-lang.org/api/current/index.html#scala.MatchError) exception is thrown. In our case, we _always_ know we'll have two-element tuples, so the examples so far are fine. \n\nHere's a final contrived example to illustrate what's possible, using a sequence of objects of different types:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A22422DA7F56403F83517E1DAD19D2A3"
    },
    "cell_type" : "code",
    "source" : "val stuff = Seq(1, 3.14159, 2L, 4.4F, (\"one\", 1), (404F, \"boo\"), ((11, 12), 21, 31), \"hello\")\n\nstuff.foreach {\n    case i: Int               => println(s\"Found an Int:   $i\")\n    case l: Long              => println(s\"Found a Long:   $l\")\n    case f: Float             => println(s\"Found a Float:  $f\")\n    case d: Double            => println(s\"Found a Double: $d\")\n    case (x1, x2) => \n        println(s\"Found a two-element tuple with elements of arbitrary type: ($x1, $x2)\")\n    case ((x1a, x1b), _, x3) => \n        println(s\"Found a three-element tuple with 1st and 3th elements: ($x1a, $x1b) and $x3\")\n    case default              => println(s\"Found something else: $default\")\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Found an Int:   1\nFound a Double: 3.14159\nFound a Long:   2\nFound a Float:  4.4\nFound a two-element tuple with elements of arbitrary type: (one, 1)\nFound a two-element tuple with elements of arbitrary type: (404.0, boo)\nFound a three-element tuple with 1st and 3th elements: (11, 12) and 31\nFound something else: hello\nstuff: Seq[Any] = List(1, 3.14159, 2, 4.4, (one,1), (404.0,boo), ((11,12),21,31), hello)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 54
    } ]
  }, {
    "metadata" : {
      "id" : "8BB870235FCB4763898579F65A6B293E"
    },
    "cell_type" : "markdown",
    "source" : "A few notes.\n* A literal like `1` is inferred to be `Int`, while `3.14159` is inferred to be `Double`. Add `L` or `F`, respectively, to infer `Long` or `Float` instead.\n* Note how we mixed specific type checking, e.g., `i: Int`, with more loosely-typed expressions, e.g., `(x1, x2)`, which expects a two-element tuple, but the element types are unconstrained.\n* All the words `i`, `l`, `f`, `d`, `x1`, `x2`, `x3`, and `default` are arbitrary variable names. Yes `default` is not a keyword, but an arbitrary choice for a variable name. We could use anything we want.\n* The last `default` clause specifies a variable with no type information. Hence, it matches _anything_, which is why this clause must appear last. This is the idiom to use when you aren't sure about the types of things you're matching against and you want to avoid a possible [MatchError](http://www.scala-lang.org/api/current/index.html#scala.MatchError).\n* If you want to match that something _exists_, but you don't need to bind it to a variable, then use `_`, as in the three-element tuple example.\n* The three-element tuple example also demonstrates that arbitrary nesting of expressions is supported, where the first element is expected to be a two-element tuple.\n\nAll the anonymous functions we've seen that use these pattern matching clauses have this format:\n\n```scala\n{ \n    case firstCase => ...\n    case secondCase => ...\n    ... \n}```\n\nThis format has a special name. It's called a _partial function_. All that means is that we only \"promise\" to accept arguments that match at least one of our `case` clauses, not any possible input. \n\nThe other kind of anonymous function we've seen is a _total function_, to be precise. \n\nRecall we said that for total functions you can use either `(...)` or `{...}` around them, depending on the \"look\" you want. For _partial functions_, you _must_ use `{...}`."
  }, {
    "metadata" : {
      "id" : "3987C83C80DB4EC18399001B6148F0E4"
    },
    "cell_type" : "markdown",
    "source" : "Also, recall that we used pattern matching with assignment:\n\n```scala\nval (locations, counts) = vect.unzip  \n```\n[Vector.unzip](http://www.scala-lang.org/api/current/#scala.collection.immutable.Vector) returns a two-element tuple, where each element is a collection. We matched on that tuple and assigned each piece to a variable. Here's another contrived example, with nested tuple elements:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "F0BEF4E415EA47088CA07F8BDFD44E5D"
    },
    "cell_type" : "code",
    "source" : "val (a, (b, (c1, c2), d)) = (\"A\", (\"B\", (\"C1\", \"C2\"), \"D\"))\nprintln(s\" $a, $b, $c1, $c2, $d\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : " A, B, C1, C2, D\na: String = A\nb: String = B\nc1: String = C1\nc2: String = C2\nd: String = D\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 55
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1F07801CF65E4334B3DFE890C1559728"
    },
    "cell_type" : "code",
    "source" : "val list = 0 to 10\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "list: scala.collection.immutable.Range.Inclusive = Range(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 91
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "C9A63A07B119411682DC74E7A4273BF0"
    },
    "cell_type" : "code",
    "source" : "// list.reduceLeft(_+_)\nlist.foldRight(\"\")((s,x) => s\"($s,$x)\")\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res179: String = (0,(1,(2,(3,(4,(5,(6,(7,(8,(9,(10,)))))))))))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "(0,(1,(2,(3,(4,(5,(6,(7,(8,(9,(10,)))))))))))"
      },
      "output_type" : "execute_result",
      "execution_count" : 101
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "DF1CB655F15F46C48EA5B2F9440C9428"
    },
    "cell_type" : "code",
    "source" : "list.foldLeft(\"\")((s,x) => s\"($s,$x)\")\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res181: String = (((((((((((,0),1),2),3),4),5),6),7),8),9),10)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "(((((((((((,0),1),2),3),4),5),6),7),8),9),10)"
      },
      "output_type" : "execute_result",
      "execution_count" : 102
    } ]
  }, {
    "metadata" : {
      "id" : "1EB1D204C073428E8226BDB65A013FF5"
    },
    "cell_type" : "markdown",
    "source" : "Try adding an `\"E\"` element to the tuple on the right-hand side, without changing the left-hand side. What happens? Try removing the `\"D\"` and `\"E\"` elements. What happens now?"
  }, {
    "metadata" : {
      "id" : "28CECBF1777C42E296EFB0CE1C6F858D"
    },
    "cell_type" : "markdown",
    "source" : "We'll come back to one last example of pattern matching when we discuss _case classes_."
  }, {
    "metadata" : {
      "id" : "BD1881613BF4402DA92CDC11B060B93A"
    },
    "cell_type" : "markdown",
    "source" : "## Scala's Object Model\nScala is a _hybrid_, object-oriented and functional programming language. The philosophy of Scala is that you exploit object orientation for encapsulation of details, i.e., _modularity_, but use functional programming for its logical precision when implementing those details. Most of what we've seen so far falls into the functional programming camp. Much of data manipulation and analysis is really Mathematics. Functional programming tries to stay close to how functions and values work in Mathematics.\n\nHowever, when writing non-trivial Spark programs, it's occasionally useful to exploit the object-oriented features."
  }, {
    "metadata" : {
      "id" : "4855076A7BC54D6C97D33A64EEFA0965"
    },
    "cell_type" : "markdown",
    "source" : "### Classes vs. Instances\nScala uses the same distinction between classes and instances that you find in Java. Classes are like _templates_ used to create instances. \n\nWe've talked about the _types_ of things, like `word` is a `String` and `totalCount` is an `Int`. A class defines a _type_ in the same sense.\n\nHere is an example class that we might use to represent the inverted index records we just created:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "E669C6B01CFE4ECCA6697FE314017013"
    },
    "cell_type" : "code",
    "source" : "class IIRecord1(\n    word: String, \n    total_count: Int, \n    locations: Array[String], \n    counts: Array[Int]) {\n    \n    /** CSV formatted string, but use [a,b,c] for the arrays */\n    override def toString: String = {\n        val locStr = locations.mkString(\"[\", \",\", \"]\")  // i.e., \"[a,b,c]\"\n        val cntStr = counts.mkString(\"[\", \",\", \"]\")  // i.e., \"[1,2,3]\"\n        s\"$word,$total_count,$locStr,$cntStr\"\n    }\n}\n\nnew IIRecord1(\"hello\", 3, Array(\"one\", \"two\"), Array(1, 2))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined class IIRecord1\nres97: IIRecord1 = hello,3,[one,two],[1,2]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "hello,3,[one,two],[1,2]"
      },
      "output_type" : "execute_result",
      "execution_count" : 56
    } ]
  }, {
    "metadata" : {
      "id" : "258FF28F533148E9828A26183A19E9F4"
    },
    "cell_type" : "markdown",
    "source" : "When defining a class, the argument list after the class name is the argument list for the _primary constructor_. You can define secondary constructors, too, but it's not very common, in part for reasons we'll see shortly.\n\nNote that when you override a method that's defined in a parent class, like Java's `Object.toString`, Scala requires you to add the `override` keyword.\n\nWe created an _instance_ of `IIRecord1` using `new`, just like in Java.\n\nFinally, as a side note, we've been using `Ints` (integers) all along for the various counts, but really for \"big data\", we should probably use `Longs`."
  }, {
    "metadata" : {
      "id" : "1DAC760FBC7A4F239981F119549B58E4"
    },
    "cell_type" : "markdown",
    "source" : "### Objects\n\nI've been careful to use the word _instance_ for things we create from classes. That's because Scala has built-in support for the [Singleton Design Pattern](https://en.wikipedia.org/wiki/Singleton_pattern), i.e., when we only want one instance of a class. We use the `object` keyword. \n\nFor example, in Java, you define a class with a `static void main(String[] arguments)` method as your entry point into your program. In Scala, you use an `object` to hold `main`, as follows:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "238A29DAC4E54899BDF1E9154BA020C0"
    },
    "cell_type" : "code",
    "source" : "object MySparkJob {\n\n    val greeting = \"Hello Spark!\"\n    \n    def main(arguments: Array[String]) = {\n        println(greeting)\n        \n        // Create your SparkContext, etc., etc.\n    }\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined object MySparkJob\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 57
    } ]
  }, {
    "metadata" : {
      "id" : "378CA4822C7A461A80EAE453340AA1B9"
    },
    "cell_type" : "markdown",
    "source" : "Just as for classes, the name of the object can be anything you want. There is no `static` keyword in Scala. Instead of adding `static` methods and fields to classes as in Java, you put them in objects instead, as here.\n\n> **NOTE:** Because the Scala compiler must generate valid JVM byte code, these definitions are converted into the equivalent, Java-like static definitions in the output byte code."
  }, {
    "metadata" : {
      "id" : "5AC7D2875B4C44F299F1ECF6E6A4674B"
    },
    "cell_type" : "markdown",
    "source" : "### Case Classes\nTuples are handy for representing records and for decomposing them with pattern matching. However, it would be nice if the fields were _named_, as well as _typed_. A good use for a class, like our `IIRecord1` above, us to represent this structure and give us named fields. Let's now refine that class definition to exploit some extra, very useful features in Scala.\n\nConsider the following definition of a _case class_ that represents our final record type."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "BFC725674989451788C183FD136D5FBC"
    },
    "cell_type" : "code",
    "source" : "case class IIRecord(\n    word: String, \n    total_count: Int = 0, \n    locations: Array[String] = Array.empty, \n    counts: Array[Int] = Array.empty) {\n\n    /** \n     * Different than our CSV output above, but see toCSV.\n     * Array.toString is useless, so format these ourselves. \n     */\n    override def toString: String = \n        s\"\"\"IIRecord($word, $total_count, $locStr, $cntStr)\"\"\"\n    \n    /** CSV-formatted string, but use [a,b,c] for the arrays */\n    def toCSV: String = \n        s\"$word,$total_count,$locStr,$cntStr\"\n        \n    /** Return a JSON-formatted string for the instance. */\n    def toJSONString: String = \n        s\"\"\"{\n        |  \"word\":        \"$word\", \n        |  \"total_count\": $total_count, \n        |  \"locations\":   ${toJSONArrayString(locations)},\n        |  \"counts\"       ${toArrayString(counts, \", \")}\n        |}\n        |\"\"\".stripMargin\n\n    private def locStr = toArrayString(locations)\n    private def cntStr = toArrayString(counts)\n\n    // \"[_]\" means we don't care what type of elements; we're just\n    // calling toString on them!\n    private def toArrayString(array: Array[_], delim: String = \",\"): String = \n        array.mkString(\"[\", delim, \"]\")  // i.e., \"[a,b,c]\"\n\n    private def toJSONArrayString(array: Array[String]): String =\n        toArrayString(array.map(quote), \", \")\n    \n    private def quote(word: String): String = \"\\\"\" + word + \"\\\"\"  \n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined class IIRecord\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 58
    } ]
  }, {
    "metadata" : {
      "id" : "E6F90E87F0FE4F0789FE3CBB009F2C84"
    },
    "cell_type" : "markdown",
    "source" : "I said that defining secondary constructors is not very common. In part, it's because I used a convenient feature, the ability to define default values for arguments to methods, including the primary constructor. The default values mean that I can create instances without providing all the arguments explicitly, as long as there is a default value defined, and similarly for calling methods. Consider these two examples:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "D933A899DBEA4CFD886EA159A598CD23"
    },
    "cell_type" : "code",
    "source" : "val hello = new IIRecord(\"hello\")\nval world = new IIRecord(\"world!\", 3, Array(\"one\", \"two\"), Array(1, 2))\n\nprintln(\"\\n`toString` output:\")\nprintln(hello)\nprintln(world)\n\nprintln(\"\\n`toJSONString` output:\")\nprintln(hello.toJSONString)\nprintln(world.toJSONString)\n\nprintln(\"\\n`toCSV` output:\")\nprintln(hello.toCSV)\nprintln(world.toCSV)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "\n`toString` output:\nIIRecord(hello, 0, [], [])\nIIRecord(world!, 3, [one,two], [1,2])\n\n`toJSONString` output:\n{\n  \"word\":        \"hello\", \n  \"total_count\": 0, \n  \"locations\":   [],\n  \"counts\"       []\n}\n\n{\n  \"word\":        \"world!\", \n  \"total_count\": 3, \n  \"locations\":   [\"one\", \"two\"],\n  \"counts\"       [1, 2]\n}\n\n\n`toCSV` output:\nhello,0,[],[]\nworld!,3,[one,two],[1,2]\nhello: IIRecord = IIRecord(hello, 0, [], [])\nworld: IIRecord = IIRecord(world!, 3, [one,two], [1,2])\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 59
    } ]
  }, {
    "metadata" : {
      "id" : "2EFE1FD2D6D5447886C2AD89CF017711"
    },
    "cell_type" : "markdown",
    "source" : "I added `toJSONString` to illustrate adding _public_ methods, the default visibility, and _private_ methods to a class definition. By the way, when there are no methods or non-field variables to define, I can omit the body complete; no empty `{}` required.\n\nRecall that the `override` keyword is required when redefining `toString`."
  }, {
    "metadata" : {
      "id" : "28D18FCD76A64DD592DD8BA3970CCFD5"
    },
    "cell_type" : "markdown",
    "source" : "Okay, what about that `case` keyword? It tells the compiler to do several useful things for us, eliminating a lot of boilerplate that we would have to write for ourselves with other languages, especially Java:\n\n1. Treat each constructor argument as an immutable (`val`) private field of the instance.\n1. Generate a public reader method for the field with the same name (e.g., `word`).\n1. Generate _correct_ implementations of the `equals` and `hashCode` methods, which people often implement incorrectly, as well as a default `toString` method. You can use your own definitions by adding them explicitly to the body. We did this for `toString`, to format the arrays in a nicer way than the default `Array[_].toString` method.\n1. Generate an `object IIRecord`, i.e., with the same name. The object is called the _companion object_.\n1. Generate a \"factory\" method in the companion object that takes the same argument list and instantiates an instance.\n1. Generate helper methods in the companion object that support pattern matching.\n\nPoints 1 and 2 make each argument behave as if they are public, read-only fields of the instance, but they are actually implemented as described.\n\nPoint 3 is important for correct behavior. Case class instances are often used as keys in [Maps](http://www.scala-lang.org/api/current/index.html#scala.collection.Map) and [Sets](http://www.scala-lang.org/api/current/index.html#scala.collection.Set), Spark RDD and DataFrame methods, etc. In fact, you should _only_ use your case classes or Scala's built-in types with well-defined `hashCode` and `equals` methods (like `Int` and other number types, `String`, tuples, etc.) as keys.\n\nFor point 4, the _companion object_ is generated automatically by the compiler. It adds the \"factory\" method discussed in point 5, and methods that support pattern matching, point 6. You can explicitly define these methods and others yourself, as well as fields to hold state. The compiler will still insert these other methods. However, see <a href=\"#Ambiguities\">Ambiguities with Companion Objects</a>. The bottom line is that you shouldn't define case classes in notebooks like this with extra methods in the companion object, due to parsing ambiguities.\n\nPoint 5 means you actually rarely use `new` when creating instances. That is, the following are effectively equivalent:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4CFDB66B3462418F89967C3FF58F8222"
    },
    "cell_type" : "code",
    "source" : "val hello1 = new IIRecord(\"hello1\")\nval hello2 = IIRecord(\"hello2\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "hello1: IIRecord = IIRecord(hello1, 0, [], [])\nhello2: IIRecord = IIRecord(hello2, 0, [], [])\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 60
    } ]
  }, {
    "metadata" : {
      "id" : "7472F705871D4CC38546FB8C4D416AAE"
    },
    "cell_type" : "markdown",
    "source" : "What actually happens in the second case, without `new`? The \"factory\" method is actually called `apply`. In Scala, whenever you put an argument list after any _instance_, including these `objects`, as in the `hello2` case, Scala looks for an `apply` method to call. The arguments have to match the argument list for apply (number of arguments, types of arguments, accounting for default argument values, etc.). Hence, the `hello2` declaration is really this:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "88DDD90C19B64C1C80C037DEEAA3E895"
    },
    "cell_type" : "code",
    "source" : "val hello2b = IIRecord.apply(\"hello2b\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "hello2b: IIRecord = IIRecord(hello2b, 0, [], [])\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 61
    } ]
  }, {
    "metadata" : {
      "id" : "8FDF18BD8DA74C0D8CABD6EA3B96584A"
    },
    "cell_type" : "markdown",
    "source" : "You can exploit this feature, too, in your other classes. We talked about word stemming above. Suppose you write a stemming library and declare an object for as the entry point. Here, I'll just do something simple; assume a trailing \"s\" means the word is a plural and remove it (a bad assumption...):"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "E44A24511FC94B8F87974F7A3665FE7C"
    },
    "cell_type" : "code",
    "source" : "object stem {\n    def apply(word: String): String = word.replaceFirst(\"s$\", \"\") // insert real implementation!\n}\n\nprintln(stem(\"dog\"))\nprintln(stem(\"dogs\"))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "dog\ndog\ndefined object stem\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 62
    } ]
  }, {
    "metadata" : {
      "id" : "AFF82895E4174B9B8840C286B55E9942"
    },
    "cell_type" : "markdown",
    "source" : "Note how it looks like I'm calling a function or method named `stem`. Scala allows object and class names to start with a lower case letter."
  }, {
    "metadata" : {
      "id" : "7F9B448BBC2F47E6821CA916459FD59C"
    },
    "cell_type" : "markdown",
    "source" : "Finally, point 6 means we can use our custom case classes in pattern matching expressions. I won't go into the methods actually implemented in the companion object and how they support pattern matching. I'll just use the \"magic\" in the following example that \"parses\" or previously-defined `hello` and `world` instances."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab778143766-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "E5528BE4892B47AFBBA677D7A6E011E8"
    },
    "cell_type" : "code",
    "source" : "Seq(hello, world).map {\n    case IIRecord(word, 0, _, _) => s\"$word with no occurrences.\"\n    case IIRecord(word, cnt, locs, cnts) => \n        s\"$word occurs $cnt times: ${locs.zip(cnts).mkString(\", \")}\"\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res107: Seq[String] = List(hello with no occurrences., world! occurs 3 times: (one,1), (two,2))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon7ff720b6addcb06337e3b0eecff638ec&quot;,&quot;dataInit&quot;:[{&quot;string value&quot;:&quot;hello with no occurrences.&quot;},{&quot;string value&quot;:&quot;world! occurs 3 times: (one,1), (two,2)&quot;}],&quot;genId&quot;:&quot;778143766&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tabs'], \n      function(playground, _magictabs) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictabs,\n    \"o\": {}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <div>\n          <ul class=\"nav nav-tabs\" id=\"ul778143766\"><li>\n                <a href=\"#tab778143766-0\"><i class=\"fa fa-table\"/></a>\n              </li><li>\n                <a href=\"#tab778143766-1\"><i class=\"fa fa-cubes\"/></a>\n              </li></ul>\n\n          <div class=\"tab-content\" id=\"tab778143766\"><div class=\"tab-pane\" id=\"tab778143766-0\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonc131f2dfc5cfe6d561c94016c9511d0c&quot;,&quot;dataInit&quot;:[{&quot;string value&quot;:&quot;hello with no occurrences.&quot;},{&quot;string value&quot;:&quot;world! occurs 3 times: (one,1), (two,2)&quot;}],&quot;genId&quot;:&quot;580016818&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"string value\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon8aab5a6c02b7bec66d2f0fbdae191405&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonac9fa9eb2ef6611470108d1dbc39bf81&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div><div class=\"tab-pane\" id=\"tab778143766-1\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon11278824c1487ba269eda94dcea6d9d2&quot;,&quot;dataInit&quot;:[{&quot;string value&quot;:&quot;hello with no occurrences.&quot;},{&quot;string value&quot;:&quot;world! occurs 3 times: (one,1), (two,2)&quot;}],&quot;genId&quot;:&quot;1468855675&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pivotChart'], \n      function(playground, _magicpivotChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpivotChart,\n    \"o\": {\"width\":600,\"height\":400,\"derivedAttributes\":{},\"extraOptions\":{}}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon77da2588b08498b4db2fb4ad8d226ad4&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anondbef907400797a36c009632f3f1aa5be&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div></div>\n        </div>\n      </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 63
    } ]
  }, {
    "metadata" : {
      "id" : "4FF0B17F9FDC430384E40A416C35D04E"
    },
    "cell_type" : "markdown",
    "source" : "The first case clause ignores the locations and counts, because I know they will be empty arrays if the total count is 0! \n\nThe second case clause uses the `zip` method to put the locations and counts back together. Recall we used `unzip` to create the separate collections."
  }, {
    "metadata" : {
      "id" : "B6FAD3997BF245C8AC6EDD4AE85DE15D"
    },
    "cell_type" : "markdown",
    "source" : "## Datasets and DataFrames\nWe've mostly used Spark's RDD API, where it's common to use case classes to represent the \"schema\" of records when working with RDDs, but also with a new type, [Dataset[T]](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.Dataset), analogous to `RDD[T]`, where the `T` represents the type of records.\n\nA problem with [DataFrames](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.DataFrame) is the fact that the fields are untyped until you try to access them. `Datasets` restore the type safety of `RDDs` by using a case class as the definition of the schema. \n\n`Datasets` were introduced in Spark 1.6.0, but they are somewhat incomplete in the 1.6.X releases. In Spark 2.0.0, `Dataset` becomes the \"parent\" class of `DataFrame`. This means that you'll be encouraged to use the greater type safety of `Dataset`, but you can still use `DataFrame` if you want. Now, `DataFrame` will be the equivalent of `Dataset[Row]`, where [Row](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.Row) is the loosely-typed representation of the row and its columns.\n\nIn Spark 1.6.2, it's somewhat awkward to convert between `DataFrames` and `Dataset`, but this is improved in Spark 2.0."
  }, {
    "metadata" : {
      "id" : "DF36806F348A4FC0B7EA0E17824ACFCC"
    },
    "cell_type" : "markdown",
    "source" : "# \"Scala for Spark 102\"\nWe've covered a lot already in this notebook, focusing on the most important topics you need to know about Scala for daily use. Let's call them the \"Scala for Spark 101\" material.\n\nAt this point, I suggest you create a new notebook and play with Spark using what you've learned so far, then come back to this point if you run into something we didn't cover already. Chances are you're ready to learn the next bits of useful Scala, the \"102\" material."
  }, {
    "metadata" : {
      "id" : "0B4C288179C7414D8DE58D87168D6B35"
    },
    "cell_type" : "markdown",
    "source" : "### Importing Everything in a Package\nIn Java, `import foo.bar.*;` means import everything in the `bar` package.\n\nIn Scala, `*` is actually a legal method name; think of defining multiplication for custom numeric types, like `Matrix`. Hence, this import statement in Scala would be ambigious. Therefore, Scala uses `_` instead of `*`, `import foo.bar._` (with the semicolon inferred)."
  }, {
    "metadata" : {
      "id" : "8D557ECC0A1E47E4B58E4D2D8B9B0B29"
    },
    "cell_type" : "markdown",
    "source" : "Incidentally, what would that `*` method definition look like? Something like this:\n\n```scala\ncase class Matrix(rows: Array[Array[Double]]) {  // Each row is an Array[Double]\n\n    /** Multiple this matrix by another. */\n    def *(other: Matrix): Matrix = ...\n    \n    /** Add this matrix by another. */\n    def +(other: Matrix): Matrix = ...\n    \n    ...\n}\n\nval row1: Array[Array[Double]] = ...\nval row2: Array[Array[Double]] = ...\nval m1 = Matrix(rows1)\nval m2 = Matrix(rows2)\nval m1_times_m2 = m1 * m2\nval m1_plus_m2 = m1 + m2\n```"
  }, {
    "metadata" : {
      "id" : "D09A3AE2C3C3408F85322926C1AE71C7"
    },
    "cell_type" : "markdown",
    "source" : "### Operator Syntax\n\nWait!! What's this `m1 * m2` stuff?? Shouldn't it be `m1.*(m2)`. It would be really convenient to use \"operator syntax\", more precisely called _infix operator notation_ for many methods like `*` and `+` here. The Scala parser supports this with a simple relaxation of the rules; when a method takes a single argument, you can omit the period `.` and parentheses `(...)`. Hence the following really is equivalent:\n\n```scala\nval m1_times_m2 = m1.*(m2)\nval m1_times_m2 = m1 * m2\n```\n\nThis convenience can lead to confusing code, especially for beginners to Scala, so use it cautiously."
  }, {
    "metadata" : {
      "id" : "B7AF61B1BFC644BB8A2C39BBAB0AA04B"
    },
    "cell_type" : "markdown",
    "source" : "### Traits\n_Traits_ are similar to Java 8 _interfaces_, used to define abstractions, but with the ability to provide \"default\" implementations of the methods declared. Unlike Java 8 interfaces, traits can also have fields representing \"state\" information about instances. There is a blury line between traits and _abstract classes_, again where some member methods or fields are not defined. In both cases, a subtype of a trait and/or an abstract class must define any undefined members if you want to construct instances of it.\n\nSo, why have both traits and abstract classes? It's because Java only allows _single inheritance_; there can be only one _parent_ type, which is normally where you would use an abstract class, but Scala lets you \"mix in\" one or more additional traits (or use a trait as the parent class - yes, confusing). A great example \"mix in\" trait is one that implements logging. Any \"service\" type can mix in the logging trait to get \"instant\" access to this reusable functionality. Schematically, it looks like the following:\n\n```scala\n// Assume severity `Level` and `Logger` types defined elsewhere...\ntrait Logging {\n\n    def log(level: Level, message: String): Unit = logger.log(level, message)\n    \n    private logger: Logger = ...\n}\n\nabstract class Service {\n    def run(): Unit   // No body, so abstract!\n}\n\nclass MyService extends Service with Logging {\n    def run(): Unit = {\n        log(INFO, \"Staring MyService...\")\n        ...\n        log(INFO, \"Finished MyService\")\n    }\n}\n```\n\n`Unit` is Scala's equivalent to Java's `void`. It actually is a true type with a single return value, unlike `void`, but we use it in the same sense of \"nothing useful will be returned\"."
  }, {
    "metadata" : {
      "id" : "F4F9E4DFF1914C1A8CF2B359BC3A7142"
    },
    "cell_type" : "markdown",
    "source" : "### Ranges\nWhat if you want some numbers between a start and end value? Use a [Range](http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Range), which has a nice literal syntax, e.g., `1 until 100`, `2 to 200 by 3`. \n\nThe `Range` always includes the lower bound. Using `to` in a `Range` makes it _inclusive_ at the upper bound. Using `until` makes it _exclusive_ at the upper bound. Use `by` to specify a delta, which defaults to `1`."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab44206678-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "4094E87E9CBF4B7AB7813A84B31C3512"
    },
    "cell_type" : "code",
    "source" : "1 until 10",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res109: scala.collection.immutable.Range = Range(1, 2, 3, 4, 5, 6, 7, 8, 9)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anoned21348671d25708826944ea77d661be&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9}],&quot;genId&quot;:&quot;44206678&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tabs'], \n      function(playground, _magictabs) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictabs,\n    \"o\": {}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <div>\n          <ul class=\"nav nav-tabs\" id=\"ul44206678\"><li>\n                <a href=\"#tab44206678-0\"><i class=\"fa fa-table\"/></a>\n              </li><li>\n                <a href=\"#tab44206678-1\"><i class=\"fa fa-dot-circle-o\"/></a>\n              </li><li>\n                <a href=\"#tab44206678-2\"><i class=\"fa fa-line-chart\"/></a>\n              </li><li>\n                <a href=\"#tab44206678-3\"><i class=\"fa fa-bar-chart\"/></a>\n              </li><li>\n                <a href=\"#tab44206678-4\"><i class=\"fa fa-cubes\"/></a>\n              </li></ul>\n\n          <div class=\"tab-content\" id=\"tab44206678\"><div class=\"tab-pane\" id=\"tab44206678-0\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonf8548182a43fd34f759ceeeea1222e9a&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9}],&quot;genId&quot;:&quot;592231912&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"_1\",\"_2\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonf76221e6cf531f386ebeb7c754f4d2b8&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon3a93cde1109e19b36813310705aa2fae&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div><div class=\"tab-pane\" id=\"tab44206678-1\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon40affa1a21dedb71453a259f3e8d41cd&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9}],&quot;genId&quot;:&quot;801173241&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/scatterChart'], \n      function(playground, _magicscatterChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicscatterChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon69c3a7d0c008d27764dfd0ac6656c361&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonc1a6b09816e785938dfe5378b90278ed&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div><div class=\"tab-pane\" id=\"tab44206678-2\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anondda57cfb169f3d4ebc22df11d79b52a9&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9}],&quot;genId&quot;:&quot;1391783236&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/lineChart'], \n      function(playground, _magiclineChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magiclineChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonacff63e469df159bd679a08cdcaee1a7&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon024cc9ac9a3c1a397f3b6b55e3909d13&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div><div class=\"tab-pane\" id=\"tab44206678-3\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anona249f366846ea68ecd490f8f7d86b82a&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9}],&quot;genId&quot;:&quot;1260888591&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/barChart'], \n      function(playground, _magicbarChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicbarChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon104a3efb2e3aa12b63c16131f084cf8c&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anoneeba0c7c1f655310bcad63dbe3845900&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div><div class=\"tab-pane\" id=\"tab44206678-4\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonda1a3f0d0894e076374ad10633ba1755&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9}],&quot;genId&quot;:&quot;793049514&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pivotChart'], \n      function(playground, _magicpivotChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpivotChart,\n    \"o\": {\"width\":600,\"height\":400,\"derivedAttributes\":{},\"extraOptions\":{}}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon0201f95d7349bb7741e8970f325a7974&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon114a6f893fb5ca03dc7725464bb3bfd3&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div></div>\n        </div>\n      </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 64
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1031714428-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "DABC04E31BF74B9FAD7630F87CF197F3"
    },
    "cell_type" : "code",
    "source" : "1 to 10",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res111: scala.collection.immutable.Range.Inclusive = Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon4706a0ea3261961210d74714439b2a1f&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9},{&quot;_1&quot;:9,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;1031714428&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tabs'], \n      function(playground, _magictabs) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictabs,\n    \"o\": {}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <div>\n          <ul class=\"nav nav-tabs\" id=\"ul1031714428\"><li>\n                <a href=\"#tab1031714428-0\"><i class=\"fa fa-table\"/></a>\n              </li><li>\n                <a href=\"#tab1031714428-1\"><i class=\"fa fa-dot-circle-o\"/></a>\n              </li><li>\n                <a href=\"#tab1031714428-2\"><i class=\"fa fa-line-chart\"/></a>\n              </li><li>\n                <a href=\"#tab1031714428-3\"><i class=\"fa fa-bar-chart\"/></a>\n              </li><li>\n                <a href=\"#tab1031714428-4\"><i class=\"fa fa-cubes\"/></a>\n              </li></ul>\n\n          <div class=\"tab-content\" id=\"tab1031714428\"><div class=\"tab-pane\" id=\"tab1031714428-0\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonfe9fedd08c6024122847ac7afb375ead&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9},{&quot;_1&quot;:9,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;224526557&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"_1\",\"_2\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon057fb596c60f7be07de4440dc68004ad&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon7e6797f33ffe042b4fec87628125c78c&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div><div class=\"tab-pane\" id=\"tab1031714428-1\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon62fc3783894ca88df9398c70f987bbb2&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9},{&quot;_1&quot;:9,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;1099940780&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/scatterChart'], \n      function(playground, _magicscatterChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicscatterChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon280475152bdf40f8e300cfbbaee74d2b&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anond6226aac352c7ee7265f8c7ded14a8d0&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div><div class=\"tab-pane\" id=\"tab1031714428-2\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon3d67d21b7af21aa0cfebc7ee311a3216&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9},{&quot;_1&quot;:9,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;1926230893&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/lineChart'], \n      function(playground, _magiclineChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magiclineChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonf653d13a11b8880842f0a8a5793d8486&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon7eedc1b4db4c0ceaa1427b7064659f91&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div><div class=\"tab-pane\" id=\"tab1031714428-3\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anona1895594cd9eca0be645909c2d899fb7&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9},{&quot;_1&quot;:9,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;449560241&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/barChart'], \n      function(playground, _magicbarChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicbarChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon02a5f171bc674ebfc16b291f903c7ee4&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon101da204e89039d68cf98a0acafe162e&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div><div class=\"tab-pane\" id=\"tab1031714428-4\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon610a9a84644fb6e9ef9e6ff6e529abaf&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:2},{&quot;_1&quot;:2,&quot;_2&quot;:3},{&quot;_1&quot;:3,&quot;_2&quot;:4},{&quot;_1&quot;:4,&quot;_2&quot;:5},{&quot;_1&quot;:5,&quot;_2&quot;:6},{&quot;_1&quot;:6,&quot;_2&quot;:7},{&quot;_1&quot;:7,&quot;_2&quot;:8},{&quot;_1&quot;:8,&quot;_2&quot;:9},{&quot;_1&quot;:9,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;690486267&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pivotChart'], \n      function(playground, _magicpivotChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpivotChart,\n    \"o\": {\"width\":600,\"height\":400,\"derivedAttributes\":{},\"extraOptions\":{}}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon99f7b5e4d75a68071d3032ce87b3f431&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anondfc7b54119e6b1ca255b60a6503c485b&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div></div>\n        </div>\n      </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 65
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1868499668-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "9A93F6D0AB394275971A1EF8F7F39925"
    },
    "cell_type" : "code",
    "source" : "1 to 10 by 3",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res113: scala.collection.immutable.Range = Range(1, 4, 7, 10)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon497a6c4811f74f1c5eaec5b0bd3fab52&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:4},{&quot;_1&quot;:2,&quot;_2&quot;:7},{&quot;_1&quot;:3,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;1868499668&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tabs'], \n      function(playground, _magictabs) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictabs,\n    \"o\": {}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <div>\n          <ul class=\"nav nav-tabs\" id=\"ul1868499668\"><li>\n                <a href=\"#tab1868499668-0\"><i class=\"fa fa-table\"/></a>\n              </li><li>\n                <a href=\"#tab1868499668-1\"><i class=\"fa fa-dot-circle-o\"/></a>\n              </li><li>\n                <a href=\"#tab1868499668-2\"><i class=\"fa fa-line-chart\"/></a>\n              </li><li>\n                <a href=\"#tab1868499668-3\"><i class=\"fa fa-bar-chart\"/></a>\n              </li><li>\n                <a href=\"#tab1868499668-4\"><i class=\"fa fa-cubes\"/></a>\n              </li></ul>\n\n          <div class=\"tab-content\" id=\"tab1868499668\"><div class=\"tab-pane\" id=\"tab1868499668-0\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon1017dd51d964bfdec1891b44efbf3b2d&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:4},{&quot;_1&quot;:2,&quot;_2&quot;:7},{&quot;_1&quot;:3,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;819098693&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"_1\",\"_2\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon9257e802e6a1af51b807ad8ef99c21b3&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon6c8b3317bce97bd5035bc946518951ab&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div><div class=\"tab-pane\" id=\"tab1868499668-1\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon4c31456b7b2bca64992979738216fe15&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:4},{&quot;_1&quot;:2,&quot;_2&quot;:7},{&quot;_1&quot;:3,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;2054093721&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/scatterChart'], \n      function(playground, _magicscatterChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicscatterChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonfecd2a03d3e318583317cd8247893a01&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon06d3d728d89d2855705279f57f5e0643&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div><div class=\"tab-pane\" id=\"tab1868499668-2\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon197553498bed519bf7b8daf389562418&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:4},{&quot;_1&quot;:2,&quot;_2&quot;:7},{&quot;_1&quot;:3,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;1236031421&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/lineChart'], \n      function(playground, _magiclineChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magiclineChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anona475b92569aa62ff8335f3c0410f97db&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anondf6cff068a20272821d8266e96b79709&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div><div class=\"tab-pane\" id=\"tab1868499668-3\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon7a91fab640cd5d4d611023dae0446d5c&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:4},{&quot;_1&quot;:2,&quot;_2&quot;:7},{&quot;_1&quot;:3,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;2006597228&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/barChart'], \n      function(playground, _magicbarChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicbarChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon2420e7d515be58ba31336c79f0db85ef&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anona64ca6eb36290f8c08a0689521da61ea&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div><div class=\"tab-pane\" id=\"tab1868499668-4\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon93248d437168d3a72bf5576d93a529ac&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:4},{&quot;_1&quot;:2,&quot;_2&quot;:7},{&quot;_1&quot;:3,&quot;_2&quot;:10}],&quot;genId&quot;:&quot;365832182&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pivotChart'], \n      function(playground, _magicpivotChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpivotChart,\n    \"o\": {\"width\":600,\"height\":400,\"derivedAttributes\":{},\"extraOptions\":{}}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon24626827745c54bb1d3e20c95a7ddb6d&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon2cd6f9d77e0097c2641ec7f2cf226359&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div></div>\n        </div>\n      </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 66
    } ]
  }, {
    "metadata" : {
      "id" : "D7A021C377D840358578268423571D28"
    },
    "cell_type" : "markdown",
    "source" : "When you need a small test data set to play with Spark, ranges can be convenient."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "14F278432C3D46ED8F3A8C282A27C71A"
    },
    "cell_type" : "code",
    "source" : "val rdd7 = sc.parallelize(1 to 50).\n    map(i => (i, i%7)).\n    groupBy{ case (i, seven) => seven }.\n    sortByKey()\nrdd7.take(7).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "(0,CompactBuffer((7,0), (14,0), (21,0), (28,0), (35,0), (42,0), (49,0)))\n(1,CompactBuffer((1,1), (8,1), (15,1), (22,1), (29,1), (36,1), (43,1), (50,1)))\n(2,CompactBuffer((2,2), (9,2), (16,2), (23,2), (30,2), (37,2), (44,2)))\n(3,CompactBuffer((3,3), (10,3), (17,3), (24,3), (31,3), (38,3), (45,3)))\n(4,CompactBuffer((4,4), (11,4), (18,4), (25,4), (32,4), (39,4), (46,4)))\n(5,CompactBuffer((5,5), (12,5), (19,5), (26,5), (33,5), (40,5), (47,5)))\n(6,CompactBuffer((6,6), (13,6), (20,6), (27,6), (34,6), (41,6), (48,6)))\nrdd7: org.apache.spark.rdd.RDD[(Int, Iterable[(Int, Int)])] = ShuffledRDD[80] at sortByKey at <console>:64\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 67
    } ]
  }, {
    "metadata" : {
      "id" : "CB6562E464EC41A2ABD7CDE4246BBBA4"
    },
    "cell_type" : "markdown",
    "source" : "[SparkContext](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.SparkContext) also has a `range` method that effectively does the same thing as `sc.parallelize(some_range)`."
  }, {
    "metadata" : {
      "id" : "797990BEF349442581344872D613911F"
    },
    "cell_type" : "markdown",
    "source" : "### Scala Interpreter (REPL) vs. Notebooks vs. Scala Compiler\n<a name=\"REPL\"></a>\nThis notebook has been using a running Scala interpreter, a.k.a. _REPL_ (\"read, eval, print, loop\") to parse the Scala code. The Spark distribution comes with a `spark-shell` script that also lets you use the interpreter from the command line, but without the nice notebook UI.\n\nIf you use `spark-shell`, there are a few other behavior changes you should know about."
  }, {
    "metadata" : {
      "id" : "E5C679DF0C204FD48041407DD1AA339A"
    },
    "cell_type" : "markdown",
    "source" : "#### Using :paste Mode\nBy default the Scala interpreter treats _each line_ you enter separately. This can cause surprises compared to how the Scala _compiler_ works, where it treats all the code in the same file in the same context.\n\nFor example, the following code, where the expression continues on the second line, is handled successfully by the compiler, but not by the interpreter.\n\n```scala\n(1 to 100)\n.map(i => i*i)\n```\n\nthe Interpreter thinks it finished parsing the expression when it hit the new line after the literal [Range](http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Range), `1 to 100`. It then throws an error on the opening `.` on the next line. On the other hand, the compiler keeps compiling, ignoring the new line in this case. \n\nThis notebook also does the same thing as the \"raw\" interpreter, but in some cases, notebooks will use an interpeter command, `:paste` that tells the parser to parse all of the lines that follow together, just like the compiler would parse them, until the \"end of input\", which you indicate with `CTRL-D`. \n\nYou can't experiment with it through this notebook, but your session would look something like this:\n\n```scala\nscala> :paste\n// Entering paste mode (ctrl-D to finish)\n\n(1 to 10)\n.map(i => i*i)\n<CTRL-D>\n\n// Exiting paste mode, now interpreting.\n\nres0: scala.collection.immutable.IndexedSeq[Int] = Vector(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)\n\nscala>\n```"
  }, {
    "metadata" : {
      "id" : "E214F5D1B4184A8383B4A84A823A1729"
    },
    "cell_type" : "markdown",
    "source" : "#### Ambiguities with Companion Objects\n<a name=\"Ambiguities\"></a>\nAs I wrote this notebook, I _wanted_ to demonstrate using the companion object `IIRecord` to define a method explicitly, but this leads to an ambiguity later on in the notebook if you attempt to use this method. The notebook gets confused between the case class and the object. \n\nWhile unfortunate, it's also true that once you start defining more involved case classes, with more than trivial methods and explicit additions to the default companion object, you should really define these types outside the notebook in a compiled library that you use within the notebook.\n\nThe details are beyond our scope here, but basically, you set up a project with your Scala code and build it using your favorite build tool. [SBT](http://www.scala-sbt.org/) is a popular choice for Scala, but Maven, Gradle, etc. can be used. \n\nYou want to generate a _jar_ file with the compiled artifacts, then when you start `spark-shell`, submit a Spark job with `spark-submit` or use a notebook environment like this one, you specify the jar for inclusion. For `spark-shell` and `spark-submit`, invoke it with the `--jars myproject.jar` option. For Toree with Jupyter, see the discussion on the [FAQ page](https://toree.incubator.apache.org/documentation/user/faq.html)."
  }, {
    "metadata" : {
      "id" : "309C64A9379541BEBF998A39DD9DB5E4"
    },
    "cell_type" : "markdown",
    "source" : "### Scala's Type Hierarchy\nScala's type hierarchy is similar to Java's, but with some interesting differences."
  }, {
    "metadata" : {
      "id" : "302080EB350C4C928853154BD88D660D"
    },
    "cell_type" : "markdown",
    "source" : "![Scala Type Hierarchy](http://docs.scala-lang.org/resources/images/classhierarchy.img_assist_custom.png)"
  }, {
    "metadata" : {
      "id" : "C8375B83CD0247C6BEE98E1DF8CDD0EF"
    },
    "cell_type" : "markdown",
    "source" : "In Java, all _reference types_ are descended from [java.lang.Object](https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html). The name _reference type_ reflects the fact that the instances for all these types are allocated on the _heap_ and program variables are references to those heap locations.\n\nThe primitives types, `int`, `long`, etc. are not considered part of the type hierarchy and are treated specially. This is in part a performance optimization, as instances of these types fit in CPU registers and the values are pushed onto stack frames. However, they have wrapper or \"boxed\" types, `Integer`, `Long`, etc., that are part of the type hierarchy, which you must use with Java's collections, for example (with the exception of arrays).\n\nInstead, Scala treats the primitives at the code level as basically the same as the reference types. You don't use `new Int(100)` for example, but you can call methods on `Int` instances. The code generated, in most cases, uses the optimized JVM primitives. \n\nHence, the Scala type hierarchy defines a type [Any](http://www.scala-lang.org/api/current/#scala.Any) to be the a parent type of _both_ reference types and \"value\" types (for the primitives). Each of those subhierarchies have parent types, [AnyRef](http://www.scala-lang.org/api/current/#scala.AnyRef) is effectively the same as [java.lang.Object](https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html), and [AnyVal](http://www.scala-lang.org/api/current/#scala.AnyVal) is the parent of the value types.\n\nFinally, for better \"soundness\", the Scala type system defines a real type to represent [Null](http://www.scala-lang.org/api/current/#scala.Null) and [Nothing](http://www.scala-lang.org/api/current/#scala.Nothing). By defining `Null` to be the subtype of all reference types `AnyRefs` (but not `AnyVals`), it supports at the type level the (unfortunate) practice of using `null` for a reference value.\n\nHowever, `null` is not allowed for an `AnyVal`, so the true \"bottom type\" of the hierarchy is `Nothing`. Why is that useful. I'll explain in the next section."
  }, {
    "metadata" : {
      "id" : "5D85EDA6B1E340D49CA04EB1B8379A1D"
    },
    "cell_type" : "markdown",
    "source" : "<a name=\"TryOptionNull\"></a>\n### Try vs. Option vs. null\n\nRecall the signature of our `curl` method near the beginning of this notebook:\n\n```scala\ndef curl(sourceURLString: String, targetDirectoryString: String): File = ...\n```\n\nIt returns a `File` when everything goes well, but it could throw an exception. An alternative is return a `Try[File]`, where the [Try](http://www.scala-lang.org/api/current/index.html#scala.util.Try) encapsulates both cases in the return value, as we'll discuss next. We'll also discuss an alternative, [Option](http://www.scala-lang.org/api/current/index.html#scala.Option)."
  }, {
    "metadata" : {
      "id" : "EA03F2FA02244AF989A920AC520BA08E"
    },
    "cell_type" : "markdown",
    "source" : "Suppose instead that we declared `curl` to return [util.Try[T]](http://www.scala-lang.org/api/current/index.html#scala.util.Try), where `T` is `java.io.File`. The only change to the body would be to simply add `Try` before the opening bracket:\n\n```\ndef curl(sourceURLString: String, targetDirectoryString: String): Try[File] = Try {...}\n```\n\nNow, the reader knows from the method signature that it might fail somehow. If a call fails, the relevant exception will be returned wrapped in a subclass of `Try`, called [util.Failure[T]](http://www.scala-lang.org/api/current/index.html#scala.util.Failure). However, if `curl` succeeds, the `File` will be returned wrapped in the other subclass of `Try`, [util.Success[T]](http://www.scala-lang.org/api/current/index.html#scala.util.Success).\n\nBecause of Scala's type safety, the caller of `curl` must determine which result was returned and handle it appropriately. That is, the caller must determine if a `Success` or `Failure` was returned and handle it appropriately.\n\nScala does not have exception declarations like Java. So, looking at the signature of our original version, there's no obvious way to know if it throws an exception _or_ returns `null` on failure:\n```scala\ndef curl(sourceURLString: String, targetDirectoryString: String): File = {...}\n```\n\nIf we choose to catch exceptions internally and return `null`, the caller has to remember to check for `null`. Otherwise, the infamous [NullPointerException](https://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html) might happen occasionally if the caller assumes a non-`null` value is returned. So, using `Try[T]` prevents us from this loophole. _It helps the user do the right thing!_\n\nAlso, using `Try` rather than simply throwing an exception, means that `curl` always returns \"normally\", so the caller maintains full control of the call stack and special exception-catching logic isn't required."
  }, {
    "metadata" : {
      "id" : "02910EB617EE423582DC23CAB4FBE5F6"
    },
    "cell_type" : "markdown",
    "source" : "What are all the possible valid subclasses of `Try`? Really, there are only two, `Success` and `Failure`. It would be a mistake to allow a user to define other subtypes, like `MaybeCouldFailButWhoKnows`, because users of `Try` in pattern matching will always want to know that there are only two possibilities. Scala adds a keyword to enforce this logical behavior. `Try` is actually declared as follows:\n\n```scala\nsealed abstract class Try[+T] extends AnyRef\n```\n\n(`AnyRef` is the same as Java's `Object` supertype.) The `sealed` keyword says that _no_ subclasses of `Try` can be declared, _except_ in the same source file (which the library author wrote). Hence, users of `Try` can't declare their own subclasses, subverting the logical structure of this type hierarchy and other user's code that relies on this structure."
  }, {
    "metadata" : {
      "id" : "0CA5438E96E34CBC860C65C61DF2B2B8"
    },
    "cell_type" : "markdown",
    "source" : "What if we have a situation where it makes no sense to involve an exception, but we want the same logically handling? This is where [Option[T]](http://www.scala-lang.org/api/current/index.html#scala.Option) comes in. \n\n`Option` is analogous to `Try`, it is a `sealed` abstract type with two possible subtypes:\n\n* [Some[T]](http://www.scala-lang.org/api/current/index.html#scala.None): I have a an instance of `T` for your, inside the `Some[T]`.\n* [None](http://www.scala-lang.org/api/current/index.html#scala.None): I don't have a value for your, sorry.\n\nNote that a hash map is a great example where I either have a value for a given key or I don't. Therefore, for Scala's [Map[K,V]](http://www.scala-lang.org/api/current/index.html#scala.collection.Map) abstraction, where `K` is the key type and `V` is the value type, the `get` method has this signature:\n\n```scala\ndef get(key: K): Option[V]\n```\n\nOne again, you know from the type signature that you may or may not get a value instance for the input key, _and_ you **must** determine whether you got a `Some[V]` or a `None` as the result. Once again, we avoid returning a `null` value and risking a `NullPointerException` if we forget to handle it."
  }, {
    "metadata" : {
      "id" : "000CD7F1DA0647BBBC49DD21B4A5A265"
    },
    "cell_type" : "markdown",
    "source" : "So, how do we determine which `Option[T]` was returned? Let's look a few examples using `Option`. Can you guess what they are doing? Check the [Option Scaladocs](http://www.scala-lang.org/api/current/#scala.Option) to confirm. `Try` can be used similarly, with a few other ways available that we won't discuss here (but see the [Try Scaladocs](http://www.scala-lang.org/api/current/#scala.util.Try))."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "417601022616427EA8B7ED8C982C6239"
    },
    "cell_type" : "code",
    "source" : "val options = Seq(None, Some(2), Some(3), None, Some(5))\n\noptions.foreach { o =>\n    println(o.getOrElse(\"None\"))\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "None\n2\n3\nNone\n5\noptions: Seq[Option[Int]] = List(None, Some(2), Some(3), None, Some(5))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 76
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "563BAB96709E407C87098F477544F6E1"
    },
    "cell_type" : "code",
    "source" : "options.foreach {\n    case None    => println(None)\n    case Some(i) => println(i)  // Note how we extract the enclosed value.\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "None\n2\n3\nNone\n5\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 77
    } ]
  }, {
    "metadata" : {
      "id" : "01C6A19D2CDF490B8D9A776894CD4C0A"
    },
    "cell_type" : "markdown",
    "source" : "If you just want to ignore the `None` values, use a _for comprehension_. We could print them as before, but this time we'll `yield` each value, constructing a new `Seq` (sequence) of numbers."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0E1BF86C497B43568BC1A7B3B2E92FB5"
    },
    "cell_type" : "code",
    "source" : "val numbers = for {\n    opt   <- options  // loop through the options, assign each to \"option\"\n    value <- opt      // extract the value from the Some, or if None, skip to the next loop\n} yield value",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "numbers: Seq[Int] = List(2, 3, 5)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 91
    } ]
  }, {
    "metadata" : {
      "id" : "183B495289174E1A9D95EEBBBB5C505D"
    },
    "cell_type" : "markdown",
    "source" : "Finally, you might wonder how `None` is declared. Consider this example:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "01EA7C7FFFBE4469A0BDF9D87F283162"
    },
    "cell_type" : "code",
    "source" : "val opts: Seq[Option[String]] = Seq(Some(\"hello\"), None, Some(\"world!\"))\nopts.foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Some(hello)\nNone\nSome(world!)\nopts: Seq[Option[String]] = List(Some(hello), None, Some(world!))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 92
    } ]
  }, {
    "metadata" : {
      "id" : "041002EBDA9849ADB9D5098ED8A4EEF0"
    },
    "cell_type" : "markdown",
    "source" : "This works, so it must mean that `None` is a valid subclass of `Option[String]`. That's actually true for all `Option[T]`. How can a single object be a valid subtype for _all_ of them? Here is how it's declared (omitting some details):\n\n```scala\nobject None extends Option[Nothing] {...}\n\n```\n\n`None` carries no \"state\" information, because it doesn't wrap an instance like `Some[T]` does. Hence, we only need one instance for all uses, so it's declared as an object. Recall we mentioned above that the type system has a [Nothing](http://www.scala-lang.org/api/current/#scala.Nothing) type, which is a subtype of all other types. Without diving into too many details, if a variable is of type `Option[String]`, then you can use an `Option[Nothing]` for it (i.e., the latter is a subtype of the former). This is why `Nothing` is useful, for cases like `None`, so we can have one instance of it, but still obey the rules of Scala's object-oriented type system."
  }, {
    "metadata" : {
      "id" : "F39CA8B00D7F41C9851C49E0E0D7D5A1"
    },
    "cell_type" : "markdown",
    "source" : "### Implicits\n<a name=\"implicits\"></a>\nScala has a powerful mechanism known as _implicits_ that is used in the Spark Scala API. Implicits are a big topic, so we'll focus just on the uses of it that are most important to understand.  "
  }, {
    "metadata" : {
      "id" : "6C195C1AEB8E471699BB6B4D8541598F"
    },
    "cell_type" : "markdown",
    "source" : "#### Type Conversions\nWe used `RDD` methods like `reduceByKey` above, but if you search for this method in the [RDD Scaladoc page](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD), you won't find it. Instead it's defined in the [PairRDDFunctions](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.PairRDDFunctions) type (along with all the other `*ByKey` methods). So, how can we use these methods as if they are defined for `RDD`??\n\nWhen the Scala compiler sees code calling a method that doesn't exist on the type, it looks for an _implicit conversion_ in the current scope, which can transform the instance into another type (i.e., by wrapping it), where the other type provides the needed method. The full signature inferred for the method as it's used must match the definition in the wrapping class.\n\n> **Note:** If you don't find a method in the [Spark Scaladocs](http://spark.apache.org/docs/latest/api/scala/index.html#package) for a type where you think it should be defined, look for related helper types with the method.\n\nHere's a small Scala example of how this works:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9CE1F09078A64727BEE4A59B32F7CC19"
    },
    "cell_type" : "code",
    "source" : "// A sample class. Note it doesn't define a `toJSON` method:\ncase class Person(name: String, age: Int = 0)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined class Person\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 93
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "41EBF853BA8E4D2B8C39B66897E45A23"
    },
    "cell_type" : "code",
    "source" : "// To scope them, define implicit conversions within an object\nobject implicits {\n\n    // `implicit` keyword tells the compiler to consider this conversion.\n    // It takes a `Person`, returning a new instance of `PersonToJSONString`,\n    // then resolves the invocation of `toJSON`.\n    implicit class PersonToJSONString(person: Person) {\n        def toJSON: String = s\"\"\"{\"name\": ${person.name}, \"age\": ${person.age}}\"\"\"\n    }\n}\n\nimport implicits._        // Now it is visible in the current scope.\n\nval p = Person(\"Dean Wampler\", 39)\n\n// Magic conversion to `PersonToJSONString`, then `toJSON` is called.\np.toJSON",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined object implicits\nimport implicits._\np: Person = Person(Dean Wampler,39)\nres159: String = {\"name\": Dean Wampler, \"age\": 39}\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 94
    } ]
  }, {
    "metadata" : {
      "id" : "66E48B7868F94F9383CF62A0BB79F2D0"
    },
    "cell_type" : "markdown",
    "source" : "For `RDDs`, the implicit conversions to `PairRDDFunctions` and other support types are handled for you. However, when you use Spark SQL and the [DataFrame](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.DataFrame) API, you'll need to import some of these conversions yourself:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "FE77D70EB2CB4434B885E4782A07B97C"
    },
    "cell_type" : "code",
    "source" : "val sqlc = sqlContext\nimport sqlc.implicits._  ",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "sqlc: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@26445b16\nimport sqlc.implicits._\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 95
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "CC6CE2FC418846DE8E5133836A8AC66C"
    },
    "cell_type" : "code",
    "source" : "val wtc = iiDF.select($\"word\", $\"total_count\")\nwtc.show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+-----------+-----------+\n|       word|total_count|\n+-----------+-----------+\n|          a|       3350|\n|    abandon|          6|\n|      abate|          3|\n|  abatement|          1|\n|     abbess|          8|\n|      abbey|          9|\n|abbominable|          1|\n|abbreviated|          1|\n|       abed|          2|\n|   abetting|          1|\n|abhominable|          1|\n|      abhor|          5|\n|     abhors|          2|\n|      abide|          5|\n|     abides|          1|\n|    ability|          2|\n|     abject|          2|\n|     abjure|          1|\n|    abjured|          2|\n|       able|          9|\n+-----------+-----------+\nonly showing top 20 rows\n\nwtc: org.apache.spark.sql.DataFrame = [word: string, total_count: int]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 96
    } ]
  }, {
    "metadata" : {
      "id" : "EC8352A276FA495EB26F84C4B4402E0B"
    },
    "cell_type" : "markdown",
    "source" : "The column-reference syntax `$\"name\"` is implemented using the same mechanism in the Scala library that implements interpolated strings, `s\"$foo\"`. The `import sqlc.implicits._` makes it available. \n\nNote we imported something from an _instance_, rather than a package or type, as allowed in Java. This can be a useful feature in Scala, but it's also fragile, If you try `import sqlContext.implicits._`, you'll get a compiler error that a \"stable identifier\" is required. It turns out that doing the value assignment, `val sqlc = sqlContext` first meets this requirement. This is unique to the notebook environment. You normally won't see this problem if you use the `spark-shell` that comes with a Spark distribution or you write a Spark program and compile it with the Scala compiler.\n\nHowever, it would be better if Spark defined this `implicits` object on the `SQLContext` companion object instead of on instances of it!"
  }, {
    "metadata" : {
      "id" : "AD9665EA860E4C2F8CC2E408C20603F3"
    },
    "cell_type" : "markdown",
    "source" : "For completeness, but unrelated to implicits, the `DataFrame` API lets you write SQL-like queries with a programmatic API. If you want to use built in functions like `min`, `max`, etc. on columns, you need the following `import` statement:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "6F83A0CC81934708ACD1E136CE4F0C1A"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.sql.functions._",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.sql.functions._\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 97
    } ]
  }, {
    "metadata" : {
      "id" : "C6C9D19C7E9A41D28CECF6E8790D5646"
    },
    "cell_type" : "markdown",
    "source" : "Now we can use `min`, `max`, `avg`, etc."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B2BD1F33FB2E47708D33564A398AA7F1"
    },
    "cell_type" : "code",
    "source" : "val mma = iiDF.select(min(\"total_count\"), max(\"total_count\"), avg(\"total_count\"))\nmma.show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+----------------+----------------+------------------+\n|min(total_count)|max(total_count)|  avg(total_count)|\n+----------------+----------------+------------------+\n|               1|            5208|16.651743683350947|\n+----------------+----------------+------------------+\n\nmma: org.apache.spark.sql.DataFrame = [min(total_count): int, max(total_count): int, avg(total_count): double]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 98
    } ]
  }, {
    "metadata" : {
      "id" : "E2ED40DF8736441589E4366F32AE84F8"
    },
    "cell_type" : "markdown",
    "source" : "#### Implicit Method Arguments\nOne other use of implicits worth understanding is _implicit arguments_ to methods. You will encounter this mechanism used when you read the Spark Scaladocs, even though you might never realize you're actually using it in your code!\n\nRecall I mentioned previously that you can define default values for method arguments. I just used it for the `age` argument for `Person`:\n\n```scala\ncase class Person(name: String, age: Int = 0)\n```\n\nSometimes we need something more sophisticated. For example, our library might have a group of methods that need a special argument passed to them that provides useful \"context\" information, but you don't want the user to be required to explicitly pass this argument every time. Other times you might use implicit arguments to make the API \"cleaner\", but still have some control over what's allowed.\n\nHere's an example, that's partly inspired by Scala's [Seq.sum](http://www.scala-lang.org/api/current/#scala.collection.Seq) method. Wouldn't it be great if I happen to have a collection of things I can \"add\" together, if I could just call `sum` on the collection? Let's do this in a slightly different way, with a helper `sum` method outside of `Seq`."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "56FAB05720ED42D78975EA9145F27795"
    },
    "cell_type" : "code",
    "source" : "trait Add[T] {\n    def add(t1: T, t2: T): T\n}\n\n// Nested implicits so they don't conflict with the previous object implicits.\nobject Adder {\n    object implicits {\n        implicit val intAdd = new Add[Int] { \n            def add(i1: Int, i2: Int): Int = i1+i2 \n        }\n        implicit val doubleAdd = new Add[Double] { \n            def add(d1: Double, d2: Double): Double = d1+d2 \n        }\n        implicit val stringAdd = new Add[String] { \n            def add(s1: String, s2: String): String = s1+s2 \n        }\n        // etc...\n    }\n}\n\nimport Adder.implicits._\n\n// NOTE: TWO argument lists!\ndef sum[T](ts: Seq[T])(implicit adder: Add[T]): T = {\n    ts.reduceLeft((t1, t2) => adder.add(t1, t2))\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined trait Add\ndefined object Adder\nimport Adder.implicits._\nsum: [T](ts: Seq[T])(implicit adder: Add[T])T\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 99
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "481097DD68F447E2864FBB4F59EDB8CD"
    },
    "cell_type" : "code",
    "source" : "sum(0 to 10)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res168: Int = 55\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "55"
      },
      "output_type" : "execute_result",
      "execution_count" : 100
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0AC34A98556444D3ACFFEE51C4685D24"
    },
    "cell_type" : "code",
    "source" : "sum(0.0 to 5.5 by 0.3)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res170: Double = 51.29999999999999\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "51.29999999999999"
      },
      "output_type" : "execute_result",
      "execution_count" : 101
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "282E7CEDA0C645AB8086D547A957B6FC"
    },
    "cell_type" : "code",
    "source" : "sum(Seq(\"one\", \"two\", \"three\"))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res172: String = onetwothree\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "onetwothree"
      },
      "output_type" : "execute_result",
      "execution_count" : 102
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "66BA8398396D47B3B7F6432596396F8E"
    },
    "cell_type" : "code",
    "source" : "// Will fail, because there's no Add[Char] in scope:\nsum(Seq('a', 'b', 'c'))   // Characters",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "<console>:93: error: could not find implicit value for parameter adder: Add[Char]\n       sum(Seq('a', 'b', 'c'))   // Characters\n          ^\n"
    } ]
  }, {
    "metadata" : {
      "id" : "AA7F3CE084AF4EAAADFD1B9460750DF2"
    },
    "cell_type" : "markdown",
    "source" : "So, the implicit values `intAdd`, `doubleAdd`, and `stringAdd`, were used by the Scala interpreter for the `adder` argument in the second _argument list_ for `sum`. Note that you have to use a second argument list and all arguments there must be implicit. \n\nWe could have avoided using implicit arguments if we defined custom `sum` methods for every type. That would have been simpler in this trivial case, but for nontrivial methods, the duplication is worth avoiding. Another advantage of this mechanism is that the user can define her own implicit `Add[T]` instances for domain types (say for example, `Money`) and they would \"just work\".\n\nThe Scala collections API uses this mechanism to know how to construct a new collection of the same kind as the input collection when you use `map`, `flatMap`, `reduceLeft`, etc.\n\nSpark uses this pattern for [Encoders](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.Encoder) in  Spark SQL. Encoders are used to serialize values into the new, compact memory encoding introduced in the _Tungsten_ project (see for example, [here](https://spark-summit.org/2015/events/deep-dive-into-project-tungsten-bringing-spark-closer-to-bare-metal/)). Here's an example of creating a [Dataset](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.Dataset), where the `toDS` method is first \"added\" to a Scala [Seq](http://www.scala-lang.org/api/current/#scala.collection.Seq) through an implicit conversion (specifically [SQLImplicits.localSeqToDatasetHolder](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.SQLImplicits), which is brought into scope by the `import sqlc.implicits._` statement earlier) and then `toDS` uses `Encoders` internally."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "934904B8DC224EEC83154CD6149F3AB7"
    },
    "cell_type" : "code",
    "source" : "(0 to 10).toDS()",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res176: org.apache.spark.sql.Dataset[Int] = [value: int]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "[value: int]"
      },
      "output_type" : "execute_result",
      "execution_count" : 104
    } ]
  }, {
    "metadata" : {
      "id" : "A37856B8529E4A5D86C787C595E14FCA"
    },
    "cell_type" : "markdown",
    "source" : "# Conclusions\nI appreciate the effort you put into studying this notebook. I hope you enjoyed it as much as I enjoyed writing it. Please post issues on how I can improve it to the [GitHub repo](https://github.com/deanwampler/JustEnoughScalaForSpark).\n\nNow you know the core elements of Scala that you need for using the Spark Scala API. I hope you can appreciate the power and elegance of Scala. I hope you will choose to use it for all of your data engineering tasks, not just for Spark. \n\nWhat about data science? There are many people who use Scala for data science in Spark, but today Python and R have much richer libraries for Mathematics and Machine Learning. That will change over time, but for now, you'll need to decide which language best fits your needs.\n\nAs you use Scala, there will be more things you'll want to understand that we haven't covered, including common idioms, conventions, and tools used in the Scala community. The references at the beginning of the notebook will give you the information you need.\n\nBest wishes.\n\n[Dean Wampler](mailto:deanwampler@gmail.com)<br/>\n[@deanwampler](http://twitter.com/deanwampler)"
  }, {
    "metadata" : {
      "id" : "F824A7CAA46A49BD83A19E9E06399954"
    },
    "cell_type" : "markdown",
    "source" : "## Appendix: Exercise Solutions\n<a name=\"ExerciseSolutions\"></a>\nLet's discuss the solutions to exercises that weren't already solved earlier in the notebook."
  }, {
    "metadata" : {
      "id" : "6D9D398315014C05822F8889BBDA49C2"
    },
    "cell_type" : "markdown",
    "source" : "### Filter for Plays that Have \"of\" in the Name\nYou can add the condition (comment `// <== here`) immediate after defining `play`. You could do it later, after either of the subsequent two expressions, but then you're doing needless computation. Change `true` to `false` to print plays that don't contain \"of\"."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "8E63870D6F26419BB1B375463C69009D"
    },
    "cell_type" : "code",
    "source" : "val list2 = for {\n    play <- plays \n    if (play.contains(\"of\") == true)                            // <== here\n    playFileString = targetDirName + pathSeparator + play\n    playFile = new File(playFileString)\n} yield {\n    val successString = if (playFile.exists) \"Success!\" else \"NOT FOUND!!\"\n    s\"$playFileString\\t$successString\"\n}\nlist2.foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "data/shakespeare/tamingoftheshrew\tSuccess!\ndata/shakespeare/comedyoferrors\tSuccess!\ndata/shakespeare/merrywivesofwindsor\tSuccess!\nlist2: Seq[String] = List(data/shakespeare/tamingoftheshrew\tSuccess!, data/shakespeare/comedyoferrors\tSuccess!, data/shakespeare/merrywivesofwindsor\tSuccess!)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 68
    } ]
  }, {
    "metadata" : {
      "id" : "58DE43817782420189CF9BA4DD12AE5C"
    },
    "cell_type" : "markdown",
    "source" : "### More Specific \"Love\" and \"Hate\" Words\nOne reasonable choice to prevent seeing `glove`, `whatever`, etc. is to only find words that start with `love` and `have`. Let's also keep `unlove`:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "D69DA27B224B40C0A070D64DF221A95D"
    },
    "cell_type" : "code",
    "source" : "val topLocationsLoveHate = sqlContext.sql(\"\"\"\n    SELECT word,  total_count, locations[0] AS top_location, counts[0] AS top_count\n    FROM inverted_index \n    WHERE word LIKE 'love%' OR word LIKE 'unlove%' OR word LIKE 'hate%'\n\"\"\")\ntopLocationsLoveHate.show(40)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+-------+-----------+--------------------+---------+\n|   word|total_count|        top_location|top_count|\n+-------+-----------+--------------------+---------+\n|   hate|         22|midsummersnightsd...|        9|\n|  hated|          6|midsummersnightsd...|        4|\n|hateful|          5|midsummersnightsd...|        3|\n|  hates|          5|         asyoulikeit|        2|\n| hateth|          1|midsummersnightsd...|        1|\n|   love|        662|    loveslabourslost|      121|\n|  loved|         38|         asyoulikeit|       13|\n| lovely|         15|midsummersnightsd...|        7|\n|  lover|         33|         asyoulikeit|       14|\n| lovers|         31|midsummersnightsd...|       17|\n|  loves|         51| muchadoaboutnothing|       10|\n| lovest|          8|    tamingoftheshrew|        3|\n| loveth|          2|    loveslabourslost|        1|\n|unloved|          1|midsummersnightsd...|        1|\n+-------+-----------+--------------------+---------+\n\ntopLocationsLoveHate: org.apache.spark.sql.DataFrame = [word: string, total_count: int, top_location: string, top_count: int]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 106
    } ]
  }, {
    "metadata" : {
      "id" : "8ADC76DC45314B31B2D085B78698FE53"
    },
    "cell_type" : "markdown",
    "source" : "### Return the Top Two Locations and Counts\nWe used the `DataFrame` API to write a SQL query that returned the top location and count. Adding the next one is straightforward. What do you observe is returned when there isn't a second location and count?"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "83520E5410494DA79BE37C05D8F63A57"
    },
    "cell_type" : "code",
    "source" : "val topTwoLocations = sqlContext.sql(\"\"\"\n    SELECT word, total_count, \n        locations[0] AS first_location,  counts[0] AS first_count,\n        locations[1] AS second_location, counts[1] AS second_count\n    FROM inverted_index \n    WHERE word LIKE '%love%' OR word LIKE '%hate%'\n\"\"\")\ntopTwoLocations.show(100)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+--------+-----------+--------------------+-----------+--------------------+------------+\n|    word|total_count|      first_location|first_count|     second_location|second_count|\n+--------+-----------+--------------------+-----------+--------------------+------------+\n| beloved|         11|    tamingoftheshrew|          4|         asyoulikeit|           3|\n|  cloven|          1|    loveslabourslost|          1|                null|        null|\n|  cloves|          1|    loveslabourslost|          1|                null|        null|\n|   glove|          3|    loveslabourslost|          2|        twelfthnight|           1|\n|  glover|          1| merrywivesofwindsor|          1|                null|        null|\n|  gloves|          5| merrywivesofwindsor|          3|         asyoulikeit|           1|\n|    hate|         22|midsummersnightsd...|          9|         asyoulikeit|           6|\n|   hated|          6|midsummersnightsd...|          4|         asyoulikeit|           2|\n| hateful|          5|midsummersnightsd...|          3|    loveslabourslost|           1|\n|   hates|          5|         asyoulikeit|          2| merrywivesofwindsor|           1|\n|  hateth|          1|midsummersnightsd...|          1|                null|        null|\n|    love|        662|    loveslabourslost|        121|         asyoulikeit|         119|\n|   loved|         38|         asyoulikeit|         13| muchadoaboutnothing|          13|\n|  lovely|         15|midsummersnightsd...|          7|    tamingoftheshrew|           5|\n|   lover|         33|         asyoulikeit|         14|midsummersnightsd...|          10|\n|  lovers|         31|midsummersnightsd...|         17|         asyoulikeit|           6|\n|   loves|         51| muchadoaboutnothing|         10| merrywivesofwindsor|           9|\n|  lovest|          8|    tamingoftheshrew|          3| muchadoaboutnothing|           2|\n|  loveth|          2|    loveslabourslost|          1|    tamingoftheshrew|           1|\n| unloved|          1|midsummersnightsd...|          1|                null|        null|\n|   whate|          4|    tamingoftheshrew|          3|         asyoulikeit|           1|\n|whatever|          1|    tamingoftheshrew|          1|                null|        null|\n+--------+-----------+--------------------+-----------+--------------------+------------+\n\ntopTwoLocations: org.apache.spark.sql.DataFrame = [word: string, total_count: int, first_location: string, first_count: int, second_location: string, second_count: int]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 108
    } ]
  }, {
    "metadata" : {
      "id" : "A12E1200260C4F43890B3B7C9F8801EF"
    },
    "cell_type" : "markdown",
    "source" : "### Removing Stop Words\nRecall you were asked to implement a `keep(word: String):Boolean` method that filters stop words.\n\nFirst, let's implement `keep`. You can find lists of stop words on the web. One such list for English can be found [here]( * From http://norm.al/2009/04/14/list-of-english-stop-words/). It includes many words that you might not consider stop words. Nevertheless, I'll just use a smaller list here.\n\nNote that I'll use a Scala [Set](http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Set) to hold the stop words. We want _O(1)_ look-up performance. We just want to know if the word is in the set or not.\n\nI'll also add \"\", so I can remove the explicit test for it.\n\nFinally, we'll embed the whole thing in a new Scala `object`. This extra encapsulation is a way to work around occasional problems with \"task not serializable\" errors."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1E1181BF7B5D43B28638787497FE37B1"
    },
    "cell_type" : "code",
    "source" : "// NOTE: Put helpers like this in a separate object. This minimizes the risk of\n// \"task not serializable\" errors when running Spark.\nobject keep {\n    val stopWords = Set(\"\", \"a\", \"an\", \"and\", \"I\", \"he\", \"she\", \"it\", \"the\")\n\n    /**\n     * If the set contains the word, we return false - we don't want to keep it!\n     * Note we assume the word has already been converted to lower case!\n     */\n    def apply(word: String): Boolean = stopWords.contains(word) == false  \n}\n\nobject IIStopWords {\n\n    def compute(sc: org.apache.spark.SparkContext, input: String) = {\n        sc.wholeTextFiles(input).\n        flatMap {\n            case (location, contents) => \n                val words = contents.split(\"\"\"\\W+\"\"\").\n                    map(word => word.toLowerCase).  // Do this early, before keep()\n                    filter(word => keep(word))      // <== filter here\n                val fileName = location.split(java.io.File.separator).last\n                words.map(word => ((word, fileName), 1))\n        }.\n        reduceByKey((count1, count2) => count1 + count2).\n        map { \n            case ((word, fileName), count) => (word, (fileName, count)) \n        }.\n        groupByKey.\n        sortByKey(ascending = true).\n        map { \n            case (word, iterable) => \n                val vect = iterable.toVector.sortBy { \n                    case (fileName, count) => (-count, fileName) \n                }\n                val (locations, counts) = vect.unzip  \n                val totalCount = counts.reduceLeft((n1,n2) => n1+n2)        \n                (word, totalCount, locations, counts)\n        }\n    }\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined object keep\ndefined object IIStopWords\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 113
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true,
      "id" : "3E5F26CCF308489BAFC2CE5D5DCE34E5"
    },
    "cell_type" : "code",
    "source" : "val iiStopWords = IIStopWords.compute(sc, \"data/shakespeare\")",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "3A21BDCF674F402883F3B8E70E3E310E"
    },
    "cell_type" : "markdown",
    "source" : "> **NOTE:** If you get an error `org.apache.spark.SparkException: Task not serializable` in the previous cell, even despite the comment about avoiding this problem, it is because of a bug in the way Spark Notebook handles scoping in Scala code. However, as discussed previously, defining whole classes like this is usually best done in libraries that you _use_ in the notebook, where the Scala compiler handles scopes more carefully."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true,
      "id" : "F44D9D36301344779B87054C92F313EB"
    },
    "cell_type" : "code",
    "source" : "iiStopWords.take(100).foreach(println)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "E1FDAF1071864528A32C3CDC0BE0F5E4"
    },
    "cell_type" : "markdown",
    "source" : "One last thing, we now have `filter(word => keep(word))`, but note how we used `println` in the previous cell to see results. We can do something similar with `filter` and instead write `filter(keep)`. \n\nWhat does this mean exactly? It tells the compiler \"convert the _method_ `keep` to a _function_ and pass that to `filter`.\" This works because `keep` already does what `filter` wants, take a single string argument and return a boolean result.\n\nPassing `keep` is actually different than passing `word => keep(word)`, which is an _anonymous_ function that _calls_ keep. We are using `keep` as the function itself, rather than constructing a function that uses `keep`."
  } ],
  "nbformat" : 4
}